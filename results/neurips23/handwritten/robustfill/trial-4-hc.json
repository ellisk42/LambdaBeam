[
    {
        "name": "none:deepcoder_0",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "none:hailstone",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "none:coins",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "none:next_multiple",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "none:drop_last",
        "success": true,
        "solution": "ZipWith ( lambda u1 , u2 : ( lambda v1 : Subtract ( v1 , 0 ) ) ( u1 ) , x1 , Drop ( x2 , x1 ) )",
        "num_attempts": 11253,
        "elapsed_time": 4.274632263183594
    },
    {
        "name": "none:decreasing_suffix",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "none:remove_ends",
        "success": true,
        "solution": "Map ( lambda u1 : ( lambda v1 : Add ( 0 , v1 ) ) ( u1 ) , Take ( -1 , Drop ( 1 , x1 ) ) )",
        "num_attempts": 22230,
        "elapsed_time": 6.200833129882812
    },
    {
        "name": "none:slice",
        "success": true,
        "solution": "Map ( lambda u1 : ( lambda v1 : Multiply ( 1 , v1 ) ) ( u1 ) , Drop ( x2 , Take ( x3 , x1 ) ) )",
        "num_attempts": 24881,
        "elapsed_time": 6.666020202636719
    },
    {
        "name": "none:top_k",
        "success": true,
        "solution": "Map ( lambda u1 : ( lambda v1 : Max ( x2 , v1 ) ) ( u1 ) , Take ( x2 , Reverse ( Sort ( x1 ) ) ) )",
        "num_attempts": 36314,
        "elapsed_time": 8.672238159179688
    },
    {
        "name": "none:kth_largest",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "none:outer_average",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "none:triple_median",
        "success": true,
        "solution": "Sum ( Scanl1 ( lambda u1 , u2 : ( lambda v1 : Subtract ( Maximum ( x1 ) , v1 ) ) ( u2 ) , Drop ( 1 , Sort ( x1 ) ) ) )",
        "num_attempts": 38719,
        "elapsed_time": 9.094258117675782
    },
    {
        "name": "none:range",
        "success": true,
        "solution": "Maximum ( Map ( lambda u1 : ( lambda v1 : Subtract ( Maximum ( x1 ) , v1 ) ) ( u1 ) , x1 ) )",
        "num_attempts": 53382,
        "elapsed_time": 11.667263793945313
    },
    {
        "name": "none:range_both",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "none:slope",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "map:cube",
        "success": true,
        "solution": "Map ( lambda u1 : ( lambda v1 : Multiply ( v1 , ( lambda v1 : Square ( v1 ) ) ( v1 ) ) ) ( u1 ) , x1 )",
        "num_attempts": 5292,
        "elapsed_time": 3.228619384765625
    },
    {
        "name": "map:absolute_value",
        "success": true,
        "solution": "Map ( lambda u1 : ( lambda v1 : Max ( v1 , ( lambda v1 : IntDivide ( v1 , -1 ) ) ( v1 ) ) ) ( u1 ) , x1 )",
        "num_attempts": 15823,
        "elapsed_time": 5.076557922363281
    },
    {
        "name": "map:multiply_previous",
        "success": true,
        "solution": "Map ( lambda u1 : ( lambda v1 : Subtract ( ( lambda v1 : Square ( v1 ) ) ( v1 ) , v1 ) ) ( u1 ) , x1 )",
        "num_attempts": 1692,
        "elapsed_time": 2.596905517578125
    },
    {
        "name": "map:triangular",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "map:linear_equation",
        "success": true,
        "solution": "Map ( lambda u1 : ( lambda v1 : Add ( x3 , ( lambda v1 : Multiply ( x2 , v1 ) ) ( v1 ) ) ) ( u1 ) , x1 )",
        "num_attempts": 282,
        "elapsed_time": 2.3494842529296873
    },
    {
        "name": "map:linear_transform",
        "success": true,
        "solution": "Map ( lambda u1 : ( lambda v1 : Subtract ( ( lambda v1 : Multiply ( 3 , v1 ) ) ( v1 ) , 4 ) ) ( u1 ) , x1 )",
        "num_attempts": 3030,
        "elapsed_time": 2.8316925048828123
    },
    {
        "name": "map:quadratic_transform",
        "success": true,
        "solution": "Map ( lambda u1 : ( lambda v1 : Multiply ( v1 , ( lambda v1 : Add ( 2 , v1 ) ) ( v1 ) ) ) ( u1 ) , x1 )",
        "num_attempts": 576,
        "elapsed_time": 2.40107421875
    },
    {
        "name": "map:clip",
        "success": true,
        "solution": "Map ( lambda u1 : ( lambda v1 : Min ( x3 , ( lambda v1 : Max ( x2 , v1 ) ) ( v1 ) ) ) ( u1 ) , x1 )",
        "num_attempts": 1123,
        "elapsed_time": 2.497059631347656
    },
    {
        "name": "map:square_keep_sign",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "map:sort_square",
        "success": true,
        "solution": "Sort ( Map ( lambda u1 : ( lambda v1 : Square ( v1 ) ) ( u1 ) , x1 ) )",
        "num_attempts": 31,
        "elapsed_time": 2.305439758300781
    },
    {
        "name": "map:zero_min",
        "success": true,
        "solution": "Map ( lambda u1 : ( lambda v1 : Subtract ( v1 , Minimum ( x1 ) ) ) ( u1 ) , x1 )",
        "num_attempts": 26,
        "elapsed_time": 2.3045623779296873
    },
    {
        "name": "map:zero_element",
        "success": true,
        "solution": "Map ( lambda u1 : ( lambda v1 : Subtract ( v1 , Access ( x2 , x1 ) ) ) ( u1 ) , x1 )",
        "num_attempts": 20029,
        "elapsed_time": 5.814610290527344
    },
    {
        "name": "map:shift_first_to",
        "success": true,
        "solution": "Map ( lambda u1 : ( lambda v1 : Subtract ( v1 , Subtract ( Head ( x1 ) , x2 ) ) ) ( u1 ) , x1 )",
        "num_attempts": 1197,
        "elapsed_time": 2.5100448608398436
    },
    {
        "name": "map:gather",
        "success": true,
        "solution": "Map ( lambda u1 : ( lambda v1 : Access ( v1 , x1 ) ) ( u1 ) , x2 )",
        "num_attempts": 28116,
        "elapsed_time": 7.233685302734375
    },
    {
        "name": "map:max_selected",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "map:zero_odds",
        "success": true,
        "solution": "Map ( lambda u1 : ( lambda v1 : If ( ( lambda v1 : IsEven ( v1 ) ) ( v1 ) , v1 , 0 ) ) ( u1 ) , x1 )",
        "num_attempts": 35,
        "elapsed_time": 2.306141662597656
    },
    {
        "name": "map:replace",
        "success": true,
        "solution": "Map ( lambda u1 : ( lambda v1 : If ( ( lambda v1 : Equal ( x2 , v1 ) ) ( v1 ) , x3 , v1 ) ) ( u1 ) , x1 )",
        "num_attempts": 14257,
        "elapsed_time": 4.801762390136719
    },
    {
        "name": "map:replace_negative",
        "success": true,
        "solution": "Map ( lambda u1 : ( lambda v1 : If ( ( lambda v1 : Greater ( -1 , v1 ) ) ( v1 ) , x2 , v1 ) ) ( u1 ) , x1 )",
        "num_attempts": 815,
        "elapsed_time": 2.443013000488281
    },
    {
        "name": "map:spread_last",
        "success": true,
        "solution": "Take ( -1 , Map ( lambda u1 : ( lambda v1 : Add ( v1 , Last ( x1 ) ) ) ( u1 ) , x1 ) )",
        "num_attempts": 5,
        "elapsed_time": 2.3008773803710936
    },
    {
        "name": "map:fill_first",
        "success": true,
        "solution": "Map ( lambda u1 : Sum ( Scanl1 ( lambda u1 , u2 : ( lambda v1 : IntDivide ( v1 , Sum ( x1 ) ) ) ( u2 ) , x1 ) ) , x1 )",
        "num_attempts": 253,
        "elapsed_time": 2.3443954467773436
    },
    {
        "name": "map:length",
        "success": true,
        "solution": "Add ( 1 , Count ( lambda u1 : ( lambda v1 : Less ( v1 , Maximum ( x1 ) ) ) ( u1 ) , x1 ) )",
        "num_attempts": 2329,
        "elapsed_time": 2.7086837768554686
    },
    {
        "name": "map:median",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "map:is_greater",
        "success": true,
        "solution": "Map ( lambda u1 : ( lambda v1 : If ( ( lambda v1 : Less ( x2 , v1 ) ) ( v1 ) , 1 , 0 ) ) ( u1 ) , x1 )",
        "num_attempts": 8910,
        "elapsed_time": 3.8634918212890623
    },
    {
        "name": "map:divide_even",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "map:multiply_odd",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "filter:greater",
        "success": true,
        "solution": "Filter ( lambda u1 : ( lambda v1 : Greater ( v1 , x2 ) ) ( u1 ) , x1 )",
        "num_attempts": 2687,
        "elapsed_time": 2.771504211425781
    },
    {
        "name": "filter:sort_even",
        "success": true,
        "solution": "Sort ( Take ( Head ( x1 ) , Filter ( lambda u1 : ( lambda v1 : IsEven ( v1 ) ) ( u1 ) , x1 ) ) )",
        "num_attempts": 2341,
        "elapsed_time": 2.7107894897460936
    },
    {
        "name": "filter:max_odd",
        "success": true,
        "solution": "Maximum ( Scanl1 ( lambda u1 , u2 : ( lambda v1 : If ( ( lambda v1 : IsEven ( v1 ) ) ( v1 ) , 2 , v1 ) ) ( u2 ) , x1 ) )",
        "num_attempts": 15100,
        "elapsed_time": 4.949688720703125
    },
    {
        "name": "filter:odd_negative",
        "success": true,
        "solution": "Filter ( lambda u1 : ( lambda v1 : IsOdd ( ( lambda v1 : Min ( 2 , v1 ) ) ( v1 ) ) ) ( u1 ) , x1 )",
        "num_attempts": 17375,
        "elapsed_time": 5.348896789550781
    },
    {
        "name": "filter:sum_positive",
        "success": true,
        "solution": "Sum ( Filter ( lambda u1 : ( lambda v1 : Greater ( v1 , -1 ) ) ( u1 ) , x1 ) )",
        "num_attempts": 10400,
        "elapsed_time": 4.124951171875
    },
    {
        "name": "filter:negative_descending",
        "success": true,
        "solution": "Drop ( Count ( lambda u1 : ( lambda v1 : Greater ( v1 , -1 ) ) ( u1 ) , x1 ) , Reverse ( Sort ( x1 ) ) )",
        "num_attempts": 26753,
        "elapsed_time": 6.994511413574219
    },
    {
        "name": "filter:between",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "filter:multiple",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "filter:find_factors",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "filter:fixpoints",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "filter:find_at",
        "success": true,
        "solution": "Filter ( lambda u1 : ( lambda v1 : Equal ( x2 , ( lambda v1 : Access ( v1 , x1 ) ) ( v1 ) ) ) ( u1 ) , x3 )",
        "num_attempts": 16812,
        "elapsed_time": 5.250103759765625
    },
    {
        "name": "count:num_match",
        "success": true,
        "solution": "Count ( lambda u1 : ( lambda v1 : Equal ( x2 , ( lambda v1 : Max ( 4 , v1 ) ) ( v1 ) ) ) ( u1 ) , x1 )",
        "num_attempts": 5037,
        "elapsed_time": 3.1838729858398436
    },
    {
        "name": "count:rank",
        "success": true,
        "solution": "Count ( lambda u1 : ( lambda v1 : Greater ( x2 , v1 ) ) ( u1 ) , x1 )",
        "num_attempts": 62,
        "elapsed_time": 2.3108795166015623
    },
    {
        "name": "count:num_under_first",
        "success": true,
        "solution": "Count ( lambda u1 : ( lambda v1 : Less ( v1 , Head ( x1 ) ) ) ( u1 ) , x1 )",
        "num_attempts": 412,
        "elapsed_time": 2.372296142578125
    },
    {
        "name": "count:count_negative",
        "success": true,
        "solution": "Count ( lambda u1 : ( lambda v1 : Greater ( 0 , v1 ) ) ( u1 ) , x1 )",
        "num_attempts": 5717,
        "elapsed_time": 3.3031967163085936
    },
    {
        "name": "count:count_last",
        "success": true,
        "solution": "Count ( lambda u1 : ( lambda v1 : Equal ( v1 , Last ( x1 ) ) ) ( u1 ) , x1 )",
        "num_attempts": 35945,
        "elapsed_time": 8.60748748779297
    },
    {
        "name": "count:count_at",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "count:even_or_positive",
        "success": true,
        "solution": "Count ( lambda u1 : ( lambda v1 : IsEven ( ( lambda v1 : Min ( 2 , v1 ) ) ( v1 ) ) ) ( u1 ) , x1 )",
        "num_attempts": 30416,
        "elapsed_time": 7.6372802734375
    },
    {
        "name": "count:total_zeros",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "count:min_costs",
        "success": true,
        "solution": "Take ( Count ( lambda u1 : ( lambda v1 : Less ( 0 , v1 ) ) ( u1 ) , x1 ) , Sort ( x2 ) )",
        "num_attempts": 19151,
        "elapsed_time": 5.660542297363281
    },
    {
        "name": "zipwith:deepcoder_1",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "zipwith:deepcoder_4",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "zipwith:deepcoder_5",
        "success": true,
        "solution": "ZipWith ( lambda u1 , u2 : ( lambda v1 , v2 : Min ( v1 , v2 ) ) ( u1 , u2 ) , x1 , Reverse ( x1 ) )",
        "num_attempts": 7710,
        "elapsed_time": 3.6529205322265623
    },
    {
        "name": "zipwith:deepcoder_6",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "zipwith:deepcoder_8",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "zipwith:dot",
        "success": true,
        "solution": "Sum ( ZipWith ( lambda u1 , u2 : ( lambda v1 , v2 : Multiply ( v1 , v2 ) ) ( u1 , u2 ) , x1 , x2 ) )",
        "num_attempts": 5709,
        "elapsed_time": 3.3017929077148436
    },
    {
        "name": "zipwith:average",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "zipwith:three_sum",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "zipwith:sort_divide",
        "success": true,
        "solution": "Sort ( ZipWith ( lambda u1 , u2 : ( lambda v1 , v2 : IntDivide ( v1 , v2 ) ) ( u1 , u2 ) , x1 , x2 ) )",
        "num_attempts": 1911,
        "elapsed_time": 2.635334777832031
    },
    {
        "name": "zipwith:pair_differences",
        "success": true,
        "solution": "ZipWith ( lambda u1 , u2 : ( lambda v1 , v2 : Subtract ( v1 , v2 ) ) ( u2 , u1 ) , x1 , Drop ( 1 , x1 ) )",
        "num_attempts": 1608,
        "elapsed_time": 2.58216552734375
    },
    {
        "name": "zipwith:sum_mask",
        "success": true,
        "solution": "Sum ( ZipWith ( lambda u1 , u2 : ( lambda v1 , v2 : Multiply ( v1 , v2 ) ) ( u1 , u2 ) , x1 , x2 ) )",
        "num_attempts": 4647,
        "elapsed_time": 3.115437316894531
    },
    {
        "name": "zipwith:distance",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "zipwith:squared_distance",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "zipwith:is_equal",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "zipwith:sorted_min",
        "success": true,
        "solution": "ZipWith ( lambda u1 , u2 : ( lambda v1 , v2 : Min ( v1 , v2 ) ) ( u1 , u2 ) , Sort ( x1 ) , Sort ( x2 ) )",
        "num_attempts": 57621,
        "elapsed_time": 12.411106872558594
    },
    {
        "name": "zipwith:add_outer_triples",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "zipwith:max_mirror_product",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "zipwith:double_or_nothing",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "scanl1:deepcoder_3",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "scanl1:running_max",
        "success": true,
        "solution": "Sort ( Scanl1 ( lambda u1 , u2 : ( lambda v1 , v2 : Max ( v1 , v2 ) ) ( u1 , u2 ) , x1 ) )",
        "num_attempts": 162,
        "elapsed_time": 2.3284271240234373
    },
    {
        "name": "scanl1:max_running_sum",
        "success": true,
        "solution": "Maximum ( Scanl1 ( lambda u1 , u2 : ( lambda v1 , v2 : Add ( v1 , v2 ) ) ( u1 , u2 ) , x1 ) )",
        "num_attempts": 11186,
        "elapsed_time": 4.262875366210937
    },
    {
        "name": "scanl1:running_sum_reverse",
        "success": true,
        "solution": "Scanl1 ( lambda u1 , u2 : ( lambda v1 , v2 : Add ( v1 , v2 ) ) ( u1 , u2 ) , Reverse ( x1 ) )",
        "num_attempts": 572,
        "elapsed_time": 2.400372314453125
    },
    {
        "name": "scanl1:running_sum_restart",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "scanl1:running_sum_extra",
        "success": true,
        "solution": "Scanl1 ( lambda u1 , u2 : ( lambda v1 , v2 : Add ( v1 , ( lambda v1 : Add ( x2 , v1 ) ) ( v2 ) ) ) ( u2 , u1 ) , x1 )",
        "num_attempts": 3287,
        "elapsed_time": 2.876789855957031
    },
    {
        "name": "scanl1:decay",
        "success": true,
        "solution": "Scanl1 ( lambda u1 , u2 : ( lambda v1 , v2 : Add ( v1 , ( lambda v1 : IntDivide ( v1 , 2 ) ) ( v2 ) ) ) ( u2 , u1 ) , x1 )",
        "num_attempts": 15428,
        "elapsed_time": 5.007244873046875
    },
    {
        "name": "scanl1:prefix_running_product",
        "success": true,
        "solution": "Scanl1 ( lambda u1 , u2 : ( lambda v1 , v2 : Multiply ( v1 , v2 ) ) ( u1 , u2 ) , Take ( x2 , x1 ) )",
        "num_attempts": 5429,
        "elapsed_time": 3.2526596069335936
    },
    {
        "name": "scanl1:product",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "scanl1:running_min_no_ends",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "scanl1:alternate_signs",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "scanl1:follow_cycle",
        "success": true,
        "solution": "Scanl1 ( lambda u1 , u2 : ( lambda v1 : Subtract ( ( lambda v1 : Access ( v1 , x1 ) ) ( v1 ) , Minimum ( x1 ) ) ) ( u1 ) , x1 )",
        "num_attempts": 11475,
        "elapsed_time": 4.313587951660156
    },
    {
        "name": "scanl1:make_strictly_increasing",
        "success": true,
        "solution": "Sort ( Scanl1 ( lambda u1 , u2 : ( lambda v1 , v2 : Max ( v1 , ( lambda v1 : Add ( 1 , v1 ) ) ( v2 ) ) ) ( u2 , u1 ) , x1 ) )",
        "num_attempts": 22144,
        "elapsed_time": 6.1857421875
    },
    {
        "name": "scanl1:closest_to_zero",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "multi:deepcoder_2",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "multi:deepcoder_7",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "multi:range_like",
        "success": true,
        "solution": "Scanl1 ( lambda u1 , u2 : ( lambda v1 : Subtract ( v1 , -1 ) ) ( u1 ) , Map ( lambda u1 : 0 , x1 ) )",
        "num_attempts": 411,
        "elapsed_time": 2.372120666503906
    },
    {
        "name": "multi:find_odd_products",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "multi:multiply_odds",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "multi:running_total",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "multi:add_from_index",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    },
    {
        "name": "multi:positive_differences",
        "success": false,
        "solution": null,
        "num_attempts": 65536,
        "elapsed_time": 13.8
    }
]