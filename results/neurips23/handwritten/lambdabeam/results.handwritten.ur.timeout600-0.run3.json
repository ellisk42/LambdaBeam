{
    "num_tasks": 100,
    "num_tasks_solved": 49,
    "results": [
        {
            "elapsed_time": 16.42838461510837,
            "num_unique_values": 2284,
            "solution": "Sum(Take(k, Sort(Filter(lambda u1: (lambda v1: Less(v1, Maximum(b)))(u1), b))))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 88.69497554468653,
                "explored_percent_lambda": 8.85949310804802,
                "explored_percent_none": 2.4455313472654514,
                "kept_percent_concrete": 85.04837291116975,
                "kept_percent_lambda": 14.951627088830255,
                "num_examples": 5,
                "num_explored_concrete": 7979,
                "num_explored_lambda": 797,
                "num_explored_none": 220,
                "num_inputs": 2,
                "num_kept_concrete": 1934,
                "num_kept_lambda": 340,
                "num_values_explored": 8996,
                "num_values_kept": 2274,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 46.373276164755225,
            "num_unique_values": 1151,
            "solution": "If(IsEven(x), IntDivide(x, 2), Subtract(Multiply(x, 3), -1))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 33.3834696797388,
                "explored_percent_lambda": 7.868960710224147,
                "explored_percent_none": 58.747569610037054,
                "kept_percent_concrete": 92.99474605954465,
                "kept_percent_lambda": 7.005253940455342,
                "num_examples": 5,
                "num_explored_concrete": 9100,
                "num_explored_lambda": 2145,
                "num_explored_none": 16014,
                "num_inputs": 1,
                "num_kept_concrete": 1062,
                "num_kept_lambda": 80,
                "num_values_explored": 27259,
                "num_values_kept": 1142,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 10.154541335999966,
            "num_unique_values": 336,
            "solution": "Subtract(x, Subtract(y, Multiply(x, Subtract(y, 2))))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 26.70857511283043,
                "explored_percent_lambda": 7.350096711798839,
                "explored_percent_none": 65.94132817537073,
                "kept_percent_concrete": 88.65030674846626,
                "kept_percent_lambda": 11.349693251533742,
                "num_examples": 5,
                "num_explored_concrete": 1657,
                "num_explored_lambda": 456,
                "num_explored_none": 4091,
                "num_inputs": 2,
                "num_kept_concrete": 289,
                "num_kept_lambda": 37,
                "num_values_explored": 6204,
                "num_values_kept": 326,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 25.148229207843542,
            "num_unique_values": 689,
            "solution": "Multiply(k, IntDivide(Min(Square(k), Add(x, k)), k))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 29.60190766377426,
                "explored_percent_lambda": 6.590713386765582,
                "explored_percent_none": 63.80737894946016,
                "kept_percent_concrete": 90.13254786450663,
                "kept_percent_lambda": 9.867452135493373,
                "num_examples": 5,
                "num_explored_concrete": 4469,
                "num_explored_lambda": 995,
                "num_explored_none": 9633,
                "num_inputs": 2,
                "num_kept_concrete": 612,
                "num_kept_lambda": 67,
                "num_values_explored": 15097,
                "num_values_kept": 679,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.600035773590207,
            "num_unique_values": 414,
            "solution": "Take(-1, Take(Subtract(1, n), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 48.974569319114025,
                "explored_percent_lambda": 31.419196062346185,
                "explored_percent_none": 19.606234618539787,
                "kept_percent_concrete": 57.92079207920792,
                "kept_percent_lambda": 42.07920792079208,
                "num_examples": 3,
                "num_explored_concrete": 597,
                "num_explored_lambda": 383,
                "num_explored_none": 239,
                "num_inputs": 2,
                "num_kept_concrete": 234,
                "num_kept_lambda": 170,
                "num_values_explored": 1219,
                "num_values_kept": 404,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.6018844228237867,
            "num_unique_values": 467,
            "solution": "Reverse(Sort(Drop(Multiply(n, -1), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 49.5480690221857,
                "explored_percent_lambda": 33.3607230895645,
                "explored_percent_none": 17.091207888249794,
                "kept_percent_concrete": 58.64332603938731,
                "kept_percent_lambda": 41.35667396061269,
                "num_examples": 3,
                "num_explored_concrete": 603,
                "num_explored_lambda": 406,
                "num_explored_none": 208,
                "num_inputs": 2,
                "num_kept_concrete": 268,
                "num_kept_lambda": 189,
                "num_values_explored": 1217,
                "num_values_kept": 457,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.0429909080266953,
            "num_unique_values": 155,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 9.269662921348315,
                "explored_percent_lambda": 73.59550561797752,
                "explored_percent_none": 17.134831460674157,
                "kept_percent_concrete": 17.123287671232877,
                "kept_percent_lambda": 82.87671232876713,
                "num_examples": 3,
                "num_explored_concrete": 33,
                "num_explored_lambda": 262,
                "num_explored_none": 61,
                "num_inputs": 1,
                "num_kept_concrete": 25,
                "num_kept_lambda": 121,
                "num_values_explored": 356,
                "num_values_kept": 146,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.8913100939244032,
            "num_unique_values": 157,
            "solution": "Drop(Subtract(i, j), Take(j, x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 25.0,
                "explored_percent_lambda": 51.578947368421055,
                "explored_percent_none": 23.42105263157895,
                "kept_percent_concrete": 40.41095890410959,
                "kept_percent_lambda": 59.58904109589041,
                "num_examples": 3,
                "num_explored_concrete": 95,
                "num_explored_lambda": 196,
                "num_explored_none": 89,
                "num_inputs": 3,
                "num_kept_concrete": 59,
                "num_kept_lambda": 87,
                "num_values_explored": 380,
                "num_values_kept": 146,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.186432464048266,
            "num_unique_values": 678,
            "solution": "Take(k, Reverse(Sort(Take(Head(x), x))))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 58.71975806451613,
                "explored_percent_lambda": 31.703629032258064,
                "explored_percent_none": 9.576612903225806,
                "kept_percent_concrete": 59.131736526946106,
                "kept_percent_lambda": 40.868263473053894,
                "num_examples": 3,
                "num_explored_concrete": 1165,
                "num_explored_lambda": 629,
                "num_explored_none": 190,
                "num_inputs": 2,
                "num_kept_concrete": 395,
                "num_kept_lambda": 273,
                "num_values_explored": 1984,
                "num_values_kept": 668,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.695548566058278,
            "num_unique_values": 335,
            "solution": "Max(Access(Min(k, 4), x), Minimum(Drop(1, Take(-1, x))))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 44.76067270375162,
                "explored_percent_lambda": 28.84864165588616,
                "explored_percent_none": 26.390685640362225,
                "kept_percent_concrete": 77.23076923076923,
                "kept_percent_lambda": 22.76923076923077,
                "num_examples": 5,
                "num_explored_concrete": 346,
                "num_explored_lambda": 223,
                "num_explored_none": 204,
                "num_inputs": 2,
                "num_kept_concrete": 251,
                "num_kept_lambda": 74,
                "num_values_explored": 773,
                "num_values_kept": 325,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0216240491718,
            "num_unique_values": 15381,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 84.51286745050405,
                "explored_percent_lambda": 5.322338509967623,
                "explored_percent_none": 10.16479403952833,
                "kept_percent_concrete": 91.71870934166016,
                "kept_percent_lambda": 8.281290658339838,
                "num_examples": 5,
                "num_explored_concrete": 197597,
                "num_explored_lambda": 12444,
                "num_explored_none": 23766,
                "num_inputs": 1,
                "num_kept_concrete": 14099,
                "num_kept_lambda": 1273,
                "num_values_explored": 233807,
                "num_values_kept": 15372,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.318709660321474,
            "num_unique_values": 338,
            "solution": "Max(Minimum(Drop(1, x)), Minimum(Take(-1, x)))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 33.75314861460957,
                "explored_percent_lambda": 43.45088161209068,
                "explored_percent_none": 22.79596977329975,
                "kept_percent_concrete": 50.45592705167173,
                "kept_percent_lambda": 49.54407294832827,
                "num_examples": 5,
                "num_explored_concrete": 268,
                "num_explored_lambda": 345,
                "num_explored_none": 181,
                "num_inputs": 1,
                "num_kept_concrete": 166,
                "num_kept_lambda": 163,
                "num_values_explored": 794,
                "num_values_kept": 329,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.207965141162276,
            "num_unique_values": 852,
            "solution": "Multiply(Minimum(ZipWith(lambda u1, u2: (lambda v1: Subtract(Minimum(x), v1))(u2), x, x)), -1)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 66.82267290691628,
                "explored_percent_lambda": 25.845033801352056,
                "explored_percent_none": 7.332293291731669,
                "kept_percent_concrete": 76.0379596678529,
                "kept_percent_lambda": 23.962040332147094,
                "num_examples": 5,
                "num_explored_concrete": 1285,
                "num_explored_lambda": 497,
                "num_explored_none": 141,
                "num_inputs": 1,
                "num_kept_concrete": 641,
                "num_kept_lambda": 202,
                "num_values_explored": 1923,
                "num_values_kept": 843,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0196028836071,
            "num_unique_values": 16939,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 88.2019851527661,
                "explored_percent_lambda": 2.822107818991033,
                "explored_percent_none": 8.975907028242874,
                "kept_percent_concrete": 95.49884813042708,
                "kept_percent_lambda": 4.501151869572922,
                "num_examples": 5,
                "num_explored_concrete": 202338,
                "num_explored_lambda": 6474,
                "num_explored_none": 20591,
                "num_inputs": 2,
                "num_kept_concrete": 16167,
                "num_kept_lambda": 762,
                "num_values_explored": 229403,
                "num_values_kept": 16929,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.2944574952126,
            "num_unique_values": 15685,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 85.4536548476359,
                "explored_percent_lambda": 2.5819397418489936,
                "explored_percent_none": 11.964405410515099,
                "kept_percent_concrete": 96.83572567783094,
                "kept_percent_lambda": 3.164274322169059,
                "num_examples": 5,
                "num_explored_concrete": 198878,
                "num_explored_lambda": 6009,
                "num_explored_none": 27845,
                "num_inputs": 2,
                "num_kept_concrete": 15179,
                "num_kept_lambda": 496,
                "num_values_explored": 232732,
                "num_values_kept": 15675,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.788846744224429,
            "num_unique_values": 529,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), x, Map(lambda u1: (lambda v1: Square(v1))(u1), x))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 47.37931034482759,
                "explored_percent_lambda": 37.310344827586206,
                "explored_percent_none": 15.310344827586206,
                "kept_percent_concrete": 50.19230769230769,
                "kept_percent_lambda": 49.80769230769231,
                "num_examples": 3,
                "num_explored_concrete": 687,
                "num_explored_lambda": 541,
                "num_explored_none": 222,
                "num_inputs": 1,
                "num_kept_concrete": 261,
                "num_kept_lambda": 259,
                "num_values_explored": 1450,
                "num_values_kept": 520,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map(lambda u1: Multiply(u1, Square(u1)), x)'\n)",
            "task_solution": "Map(lambda u1: Multiply(u1, Square(u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 24.853310657665133,
            "num_unique_values": 2069,
            "solution": "Map(lambda u1: (lambda v1: Max(v1, (lambda v1: IntDivide(v1, -1))(v1)))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 78.04646752015174,
                "explored_percent_lambda": 16.152995100363523,
                "explored_percent_none": 5.800537379484748,
                "kept_percent_concrete": 63.20388349514563,
                "kept_percent_lambda": 36.79611650485437,
                "num_examples": 3,
                "num_explored_concrete": 9876,
                "num_explored_lambda": 2044,
                "num_explored_none": 734,
                "num_inputs": 1,
                "num_kept_concrete": 1302,
                "num_kept_lambda": 758,
                "num_values_explored": 12654,
                "num_values_kept": 2060,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map(lambda u1: Max(u1, Subtract(0, u1)), x)'\n)",
            "task_solution": "Map(lambda u1: Max(u1, Subtract(0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.365386292338371,
            "num_unique_values": 810,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Subtract((lambda v1: Square(v1))(v1), v1))(u1), x, x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 62.164465274818916,
                "explored_percent_lambda": 30.03834682573498,
                "explored_percent_none": 7.797187899446102,
                "kept_percent_concrete": 48.18976279650437,
                "kept_percent_lambda": 51.81023720349563,
                "num_examples": 3,
                "num_explored_concrete": 1459,
                "num_explored_lambda": 705,
                "num_explored_none": 183,
                "num_inputs": 1,
                "num_kept_concrete": 386,
                "num_kept_lambda": 415,
                "num_values_explored": 2347,
                "num_values_kept": 801,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map(lambda u1: Subtract(Square(u1), u1), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(Square(u1), u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0255635362118,
            "num_unique_values": 12876,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.62688118240253,
                "explored_percent_lambda": 21.519571994919364,
                "explored_percent_none": 4.853546822678111,
                "kept_percent_concrete": 53.687728297194376,
                "kept_percent_lambda": 46.312271702805624,
                "num_examples": 3,
                "num_explored_concrete": 172161,
                "num_explored_lambda": 50319,
                "num_explored_none": 11349,
                "num_inputs": 1,
                "num_kept_concrete": 6908,
                "num_kept_lambda": 5959,
                "num_values_explored": 233829,
                "num_values_kept": 12867,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map(lambda u1: IntDivide(Add(Square(u1), u1), 2), x)'\n)",
            "task_solution": "Map(lambda u1: IntDivide(Add(Square(u1), u1), 2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.255722723901272,
            "num_unique_values": 498,
            "solution": "Map(lambda u1: (lambda v1: Add(b, (lambda v1: Multiply(a, v1))(v1)))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 58.80026367831246,
                "explored_percent_lambda": 23.928806855636125,
                "explored_percent_none": 17.270929466051417,
                "kept_percent_concrete": 66.11909650924025,
                "kept_percent_lambda": 33.880903490759756,
                "num_examples": 3,
                "num_explored_concrete": 892,
                "num_explored_lambda": 363,
                "num_explored_none": 262,
                "num_inputs": 3,
                "num_kept_concrete": 322,
                "num_kept_lambda": 165,
                "num_values_explored": 1517,
                "num_values_kept": 487,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map(lambda u1: Add(Multiply(a, u1), b), x)'\n)",
            "task_solution": "Map(lambda u1: Add(Multiply(a, u1), b), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 302.5127628762275,
            "num_unique_values": 9028,
            "solution": "Reverse(Map(lambda u1: (lambda v1: Subtract((lambda v1: Multiply(v1, 3))(v1), 4))(u1), Reverse(x)))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 72.11158688083856,
                "explored_percent_lambda": 22.56507850200503,
                "explored_percent_none": 5.323334617156408,
                "kept_percent_concrete": 58.23262002439295,
                "kept_percent_lambda": 41.76737997560705,
                "num_examples": 3,
                "num_explored_concrete": 95488,
                "num_explored_lambda": 29880,
                "num_explored_none": 7049,
                "num_inputs": 1,
                "num_kept_concrete": 5252,
                "num_kept_lambda": 3767,
                "num_values_explored": 132417,
                "num_values_kept": 9019,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map(lambda u1: Subtract(Multiply(u1, 3), 4), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(Multiply(u1, 3), 4), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.2148887999356,
            "num_unique_values": 13933,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.20083204317629,
                "explored_percent_lambda": 24.790908068743025,
                "explored_percent_none": 5.008259888080679,
                "kept_percent_concrete": 57.655846021258256,
                "kept_percent_lambda": 42.344153978741744,
                "num_examples": 3,
                "num_explored_concrete": 162331,
                "num_explored_lambda": 57326,
                "num_explored_none": 11581,
                "num_inputs": 1,
                "num_kept_concrete": 8028,
                "num_kept_lambda": 5896,
                "num_values_explored": 231238,
                "num_values_kept": 13924,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map(lambda u1: Multiply(u1, Add(u1, 2)), x)'\n)",
            "task_solution": "Map(lambda u1: Multiply(u1, Add(u1, 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.8557570949196815,
            "num_unique_values": 223,
            "solution": "Map(lambda u1: (lambda v1: Max(a, (lambda v1: Min(b, v1))(v1)))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 23.963133640552996,
                "explored_percent_lambda": 45.92933947772657,
                "explored_percent_none": 30.107526881720432,
                "kept_percent_concrete": 46.22641509433962,
                "kept_percent_lambda": 53.77358490566038,
                "num_examples": 3,
                "num_explored_concrete": 156,
                "num_explored_lambda": 299,
                "num_explored_none": 196,
                "num_inputs": 3,
                "num_kept_concrete": 98,
                "num_kept_lambda": 114,
                "num_values_explored": 651,
                "num_values_kept": 212,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map(lambda u1: Max(Min(u1, b), a), x)'\n)",
            "task_solution": "Map(lambda u1: Max(Min(u1, b), a), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0115538164973,
            "num_unique_values": 13826,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.84648799727239,
                "explored_percent_lambda": 23.90401185329859,
                "explored_percent_none": 6.2495001494290126,
                "kept_percent_concrete": 62.756025186364624,
                "kept_percent_lambda": 37.243974813635376,
                "num_examples": 3,
                "num_explored_concrete": 165935,
                "num_explored_lambda": 56789,
                "num_explored_none": 14847,
                "num_inputs": 1,
                "num_kept_concrete": 8671,
                "num_kept_lambda": 5146,
                "num_values_explored": 237571,
                "num_values_kept": 13817,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map(lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1)), x)'\n)",
            "task_solution": "Map(lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.32089720107615,
            "num_unique_values": 481,
            "solution": "Sort(Map(lambda u1: (lambda v1: Square(v1))(u1), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 48.63013698630137,
                "explored_percent_lambda": 39.117199391171994,
                "explored_percent_none": 12.252663622526637,
                "kept_percent_concrete": 43.220338983050844,
                "kept_percent_lambda": 56.779661016949156,
                "num_examples": 3,
                "num_explored_concrete": 639,
                "num_explored_lambda": 514,
                "num_explored_none": 161,
                "num_inputs": 1,
                "num_kept_concrete": 204,
                "num_kept_lambda": 268,
                "num_values_explored": 1314,
                "num_values_kept": 472,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map(lambda u1: Square(u1), x))'\n)",
            "task_solution": "Sort(Map(lambda u1: Square(u1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 21.731601044535637,
            "num_unique_values": 1985,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Subtract(v1, Minimum(x)))(u1), x, Sort(x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 66.55309483248155,
                "explored_percent_lambda": 27.76831345826235,
                "explored_percent_none": 5.6785917092561045,
                "kept_percent_concrete": 47.064777327935225,
                "kept_percent_lambda": 52.935222672064775,
                "num_examples": 3,
                "num_explored_concrete": 7032,
                "num_explored_lambda": 2934,
                "num_explored_none": 600,
                "num_inputs": 1,
                "num_kept_concrete": 930,
                "num_kept_lambda": 1046,
                "num_values_explored": 10566,
                "num_values_kept": 1976,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map(lambda u1: Subtract(u1, Minimum(x)), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(u1, Minimum(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 6.059621749445796,
            "num_unique_values": 767,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Subtract(v1, Access(i, x)))(u1), x, Reverse(x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 71.15694489203996,
                "explored_percent_lambda": 17.95037060908798,
                "explored_percent_none": 10.89268449887206,
                "kept_percent_concrete": 68.56010568031704,
                "kept_percent_lambda": 31.43989431968296,
                "num_examples": 3,
                "num_explored_concrete": 2208,
                "num_explored_lambda": 557,
                "num_explored_none": 338,
                "num_inputs": 2,
                "num_kept_concrete": 519,
                "num_kept_lambda": 238,
                "num_values_explored": 3103,
                "num_values_kept": 757,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map(lambda u1: Subtract(u1, Access(i, x)), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(u1, Access(i, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.020875107497,
            "num_unique_values": 11338,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.97923564227335,
                "explored_percent_lambda": 20.40735373243945,
                "explored_percent_none": 6.613410625287194,
                "kept_percent_concrete": 59.101341807909606,
                "kept_percent_lambda": 40.898658192090394,
                "num_examples": 3,
                "num_explored_concrete": 185819,
                "num_explored_lambda": 51961,
                "num_explored_none": 16839,
                "num_inputs": 2,
                "num_kept_concrete": 6695,
                "num_kept_lambda": 4633,
                "num_values_explored": 254619,
                "num_values_kept": 11328,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map(lambda u1: Add(u1, Subtract(t, Head(x))), x)'\n)",
            "task_solution": "Map(lambda u1: Add(u1, Subtract(t, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 13.038697993382812,
            "num_unique_values": 1549,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Head((lambda v1: Drop(v1, x))(v1)))(u2), i, i)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 73.65426022762227,
                "explored_percent_lambda": 23.531221162719163,
                "explored_percent_none": 2.814518609658567,
                "kept_percent_concrete": 54.3859649122807,
                "kept_percent_lambda": 45.6140350877193,
                "num_examples": 3,
                "num_explored_concrete": 4789,
                "num_explored_lambda": 1530,
                "num_explored_none": 183,
                "num_inputs": 2,
                "num_kept_concrete": 837,
                "num_kept_lambda": 702,
                "num_values_explored": 6502,
                "num_values_kept": 1539,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map(lambda u1: Access(u1, x), i)'\n)",
            "task_solution": "Map(lambda u1: Access(u1, x), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 10.822728164494038,
            "num_unique_values": 1777,
            "solution": "Maximum(ZipWith(lambda u1, u2: (lambda v1: Access(v1, x))(u2), i, Drop(1, i)))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 83.97088693297223,
                "explored_percent_lambda": 12.999322951929587,
                "explored_percent_none": 3.029790115098172,
                "kept_percent_concrete": 80.36219581211093,
                "kept_percent_lambda": 19.637804187889078,
                "num_examples": 5,
                "num_explored_concrete": 4961,
                "num_explored_lambda": 768,
                "num_explored_none": 179,
                "num_inputs": 2,
                "num_kept_concrete": 1420,
                "num_kept_lambda": 347,
                "num_values_explored": 5908,
                "num_values_kept": 1767,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map(lambda u1: Access(u1, x), i))'\n)",
            "task_solution": "Maximum(Map(lambda u1: Access(u1, x), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.3812877666205168,
            "num_unique_values": 254,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: If((lambda v1: IsEven(v1))(v2), v1, 0))(u1, u2), x, x)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 27.125506072874494,
                "explored_percent_lambda": 56.477732793522264,
                "explored_percent_none": 16.39676113360324,
                "kept_percent_concrete": 38.775510204081634,
                "kept_percent_lambda": 61.224489795918366,
                "num_examples": 3,
                "num_explored_concrete": 134,
                "num_explored_lambda": 279,
                "num_explored_none": 81,
                "num_inputs": 1,
                "num_kept_concrete": 95,
                "num_kept_lambda": 150,
                "num_values_explored": 494,
                "num_values_kept": 245,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map(lambda u1: If(IsOdd(u1), 0, u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(IsOdd(u1), 0, u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0126331951469,
            "num_unique_values": 12174,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.92456822261052,
                "explored_percent_lambda": 20.478867770527007,
                "explored_percent_none": 5.596564006862477,
                "kept_percent_concrete": 63.060100304201264,
                "kept_percent_lambda": 36.939899695798736,
                "num_examples": 3,
                "num_explored_concrete": 186576,
                "num_explored_lambda": 51686,
                "num_explored_none": 14125,
                "num_inputs": 3,
                "num_kept_concrete": 7670,
                "num_kept_lambda": 4493,
                "num_values_explored": 252387,
                "num_values_kept": 12163,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map(lambda u1: If(Equal(u1, f), r, u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(Equal(u1, f), r, u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.5230589602142572,
            "num_unique_values": 221,
            "solution": "Map(lambda u1: (lambda v1: If((lambda v1: Less(-1, v1))(v1), v1, y))(u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 27.560521415270017,
                "explored_percent_lambda": 49.34823091247672,
                "explored_percent_none": 23.09124767225326,
                "kept_percent_concrete": 49.28909952606635,
                "kept_percent_lambda": 50.71090047393365,
                "num_examples": 3,
                "num_explored_concrete": 148,
                "num_explored_lambda": 265,
                "num_explored_none": 124,
                "num_inputs": 2,
                "num_kept_concrete": 104,
                "num_kept_lambda": 107,
                "num_values_explored": 537,
                "num_values_kept": 211,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map(lambda u1: If(Less(u1, 0), y, u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(Less(u1, 0), y, u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.5064732395112514,
            "num_unique_values": 807,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Add(v1, Last(x)))(u1), x, Drop(1, x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 67.24074752656651,
                "explored_percent_lambda": 24.844265298644192,
                "explored_percent_none": 7.9149871747893,
                "kept_percent_concrete": 61.152882205513784,
                "kept_percent_lambda": 38.847117794486216,
                "num_examples": 3,
                "num_explored_concrete": 1835,
                "num_explored_lambda": 678,
                "num_explored_none": 216,
                "num_inputs": 1,
                "num_kept_concrete": 488,
                "num_kept_lambda": 310,
                "num_values_explored": 2729,
                "num_values_kept": 798,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map(lambda u1: Add(u1, Last(x)), x))'\n)",
            "task_solution": "Take(-1, Map(lambda u1: Add(u1, Last(x)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.3126089293509722,
            "num_unique_values": 222,
            "solution": "Map(lambda u1: Head(x), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 26.654411764705884,
                "explored_percent_lambda": 58.088235294117645,
                "explored_percent_none": 15.257352941176471,
                "kept_percent_concrete": 36.15023474178404,
                "kept_percent_lambda": 63.84976525821596,
                "num_examples": 3,
                "num_explored_concrete": 145,
                "num_explored_lambda": 316,
                "num_explored_none": 83,
                "num_inputs": 1,
                "num_kept_concrete": 77,
                "num_kept_lambda": 136,
                "num_values_explored": 544,
                "num_values_kept": 213,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map(lambda u1: Head(x), x)'\n)",
            "task_solution": "Map(lambda u1: Head(x), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.415918454527855,
            "num_unique_values": 483,
            "solution": "Sum(ZipWith(lambda u1, u2: 1, x, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 41.30232558139535,
                "explored_percent_lambda": 35.06976744186046,
                "explored_percent_none": 23.627906976744185,
                "kept_percent_concrete": 67.72151898734177,
                "kept_percent_lambda": 32.278481012658226,
                "num_examples": 5,
                "num_explored_concrete": 444,
                "num_explored_lambda": 377,
                "num_explored_none": 254,
                "num_inputs": 1,
                "num_kept_concrete": 321,
                "num_kept_lambda": 153,
                "num_values_explored": 1075,
                "num_values_kept": 474,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map(lambda u1: 1, x))'\n)",
            "task_solution": "Sum(Map(lambda u1: 1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 97.00519907660782,
            "num_unique_values": 5727,
            "solution": "Min(Last(Take(-1, x)), Maximum(Take(4, Sort(Drop(1, x)))))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 88.08435063079247,
                "explored_percent_lambda": 5.0728779651328955,
                "explored_percent_none": 6.842771404074633,
                "kept_percent_concrete": 88.70234347674013,
                "kept_percent_lambda": 11.297656523259882,
                "num_examples": 5,
                "num_explored_concrete": 43149,
                "num_explored_lambda": 2485,
                "num_explored_none": 3352,
                "num_inputs": 1,
                "num_kept_concrete": 5072,
                "num_kept_lambda": 646,
                "num_values_explored": 48986,
                "num_values_kept": 5718,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map(lambda u1: 1, x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map(lambda u1: 1, x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.1272632759064,
            "num_unique_values": 15387,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.38628282364559,
                "explored_percent_lambda": 24.9587471252918,
                "explored_percent_none": 4.654970051062613,
                "kept_percent_concrete": 50.28289003056513,
                "kept_percent_lambda": 49.71710996943487,
                "num_examples": 3,
                "num_explored_concrete": 162517,
                "num_explored_lambda": 57628,
                "num_explored_none": 10748,
                "num_inputs": 2,
                "num_kept_concrete": 7732,
                "num_kept_lambda": 7645,
                "num_values_explored": 230893,
                "num_values_kept": 15377,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map(lambda u1: If(Greater(u1, y), 1, 0), x)'\n)",
            "task_solution": "Map(lambda u1: If(Greater(u1, y), 1, 0), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.4042938593775,
            "num_unique_values": 12695,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.62908547723367,
                "explored_percent_lambda": 22.524164388577514,
                "explored_percent_none": 6.846750134188813,
                "kept_percent_concrete": 56.04603499921173,
                "kept_percent_lambda": 43.95396500078827,
                "num_examples": 3,
                "num_explored_concrete": 169745,
                "num_explored_lambda": 54133,
                "num_explored_none": 16455,
                "num_inputs": 1,
                "num_kept_concrete": 7110,
                "num_kept_lambda": 5576,
                "num_values_explored": 240333,
                "num_values_kept": 12686,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map(lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3035207167268,
            "num_unique_values": 13633,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.27833081950729,
                "explored_percent_lambda": 19.249069884364,
                "explored_percent_none": 4.472599296128708,
                "kept_percent_concrete": 66.5492182338692,
                "kept_percent_lambda": 33.45078176613081,
                "num_examples": 3,
                "num_explored_concrete": 189647,
                "num_explored_lambda": 47858,
                "num_explored_none": 11120,
                "num_inputs": 2,
                "num_kept_concrete": 9066,
                "num_kept_lambda": 4557,
                "num_values_explored": 248625,
                "num_values_kept": 13623,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map(lambda u1: If(IsOdd(u1), Multiply(u1, n), u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(IsOdd(u1), Multiply(u1, n), u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.7575451247394085,
            "num_unique_values": 228,
            "solution": "Filter(lambda u1: (lambda v1: Less(y, v1))(u1), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 31.240428790199083,
                "explored_percent_lambda": 41.19448698315467,
                "explored_percent_none": 27.56508422664625,
                "kept_percent_concrete": 60.55045871559633,
                "kept_percent_lambda": 39.44954128440367,
                "num_examples": 3,
                "num_explored_concrete": 204,
                "num_explored_lambda": 269,
                "num_explored_none": 180,
                "num_inputs": 2,
                "num_kept_concrete": 132,
                "num_kept_lambda": 86,
                "num_values_explored": 653,
                "num_values_kept": 218,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter(lambda u1: Greater(u1, y), x)'\n)",
            "task_solution": "Filter(lambda u1: Greater(u1, y), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.923043292015791,
            "num_unique_values": 219,
            "solution": "Filter(lambda u1: (lambda v1: IsEven(v1))(u1), Sort(x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 26.41509433962264,
                "explored_percent_lambda": 51.61725067385445,
                "explored_percent_none": 21.967654986522913,
                "kept_percent_concrete": 43.333333333333336,
                "kept_percent_lambda": 56.666666666666664,
                "num_examples": 3,
                "num_explored_concrete": 196,
                "num_explored_lambda": 383,
                "num_explored_none": 163,
                "num_inputs": 1,
                "num_kept_concrete": 91,
                "num_kept_lambda": 119,
                "num_values_explored": 742,
                "num_values_kept": 210,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter(lambda u1: IsEven(u1), Sort(x))'\n)",
            "task_solution": "Filter(lambda u1: IsEven(u1), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.8375459015369415,
            "num_unique_values": 410,
            "solution": "Last(Filter(lambda u1: (lambda v1: IsOdd(v1))(u1), Sort(x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 45.543345543345545,
                "explored_percent_lambda": 40.9035409035409,
                "explored_percent_none": 13.553113553113553,
                "kept_percent_concrete": 60.34912718204489,
                "kept_percent_lambda": 39.65087281795511,
                "num_examples": 5,
                "num_explored_concrete": 373,
                "num_explored_lambda": 335,
                "num_explored_none": 111,
                "num_inputs": 1,
                "num_kept_concrete": 242,
                "num_kept_lambda": 159,
                "num_values_explored": 819,
                "num_values_kept": 401,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter(lambda u1: IsOdd(u1), x))'\n)",
            "task_solution": "Maximum(Filter(lambda u1: IsOdd(u1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.793738752603531,
            "num_unique_values": 517,
            "solution": "Filter(lambda u1: (lambda v1: Greater(2, v1))(u1), Filter(lambda u1: (lambda v1: IsOdd(v1))(u1), x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 48.50686037126715,
                "explored_percent_lambda": 39.70944309927361,
                "explored_percent_none": 11.783696529459242,
                "kept_percent_concrete": 61.811023622047244,
                "kept_percent_lambda": 38.188976377952756,
                "num_examples": 3,
                "num_explored_concrete": 601,
                "num_explored_lambda": 492,
                "num_explored_none": 146,
                "num_inputs": 1,
                "num_kept_concrete": 314,
                "num_kept_lambda": 194,
                "num_values_explored": 1239,
                "num_values_kept": 508,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter(lambda u1: IsOdd(Min(u1, 0)), x)'\n)",
            "task_solution": "Filter(lambda u1: IsOdd(Min(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.990813160315156,
            "num_unique_values": 492,
            "solution": "Sum(Filter(lambda u1: (lambda v1: Less(-1, v1))(u1), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 53.49887133182844,
                "explored_percent_lambda": 37.020316027088036,
                "explored_percent_none": 9.48081264108352,
                "kept_percent_concrete": 62.732919254658384,
                "kept_percent_lambda": 37.267080745341616,
                "num_examples": 5,
                "num_explored_concrete": 474,
                "num_explored_lambda": 328,
                "num_explored_none": 84,
                "num_inputs": 1,
                "num_kept_concrete": 303,
                "num_kept_lambda": 180,
                "num_values_explored": 886,
                "num_values_kept": 483,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter(lambda u1: Greater(u1, 0), x))'\n)",
            "task_solution": "Sum(Filter(lambda u1: Greater(u1, 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.833485098555684,
            "num_unique_values": 738,
            "solution": "Reverse(Sort(Filter(lambda u1: (lambda v1: Less(v1, 0))(u1), x)))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 65.67470497691123,
                "explored_percent_lambda": 28.937916880451514,
                "explored_percent_none": 5.38737814263725,
                "kept_percent_concrete": 64.74622770919068,
                "kept_percent_lambda": 35.25377229080933,
                "num_examples": 3,
                "num_explored_concrete": 1280,
                "num_explored_lambda": 564,
                "num_explored_none": 105,
                "num_inputs": 1,
                "num_kept_concrete": 472,
                "num_kept_lambda": 257,
                "num_values_explored": 1949,
                "num_values_kept": 729,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter(lambda u1: Less(u1, 0), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter(lambda u1: Less(u1, 0), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 14.581328511238098,
            "num_unique_values": 1789,
            "solution": "Filter(lambda u1: (lambda v1: Less(v1, b))(u1), Filter(lambda u1: (lambda v1: Less(a, v1))(u1), x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 76.46333949476279,
                "explored_percent_lambda": 16.51263093037585,
                "explored_percent_none": 7.024029574861368,
                "kept_percent_concrete": 71.48481439820023,
                "kept_percent_lambda": 28.515185601799775,
                "num_examples": 3,
                "num_explored_concrete": 6205,
                "num_explored_lambda": 1340,
                "num_explored_none": 570,
                "num_inputs": 3,
                "num_kept_concrete": 1271,
                "num_kept_lambda": 507,
                "num_values_explored": 8115,
                "num_values_kept": 1778,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter(lambda u1: Less(u1, b), Filter(lambda u1: Greater(u1, a), x))'\n)",
            "task_solution": "Filter(lambda u1: Less(u1, b), Filter(lambda u1: Greater(u1, a), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0371096208692,
            "num_unique_values": 15922,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.29450459669914,
                "explored_percent_lambda": 21.304426560203492,
                "explored_percent_none": 5.401068843097371,
                "kept_percent_concrete": 64.41050779286073,
                "kept_percent_lambda": 35.589492207139266,
                "num_examples": 3,
                "num_explored_concrete": 174040,
                "num_explored_lambda": 50588,
                "num_explored_none": 12825,
                "num_inputs": 2,
                "num_kept_concrete": 10249,
                "num_kept_lambda": 5663,
                "num_values_explored": 237453,
                "num_values_kept": 15912,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter(lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n)), x)'\n)",
            "task_solution": "Filter(lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3624955527484,
            "num_unique_values": 15250,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.43760479243726,
                "explored_percent_lambda": 18.829357890923184,
                "explored_percent_none": 4.733037316639565,
                "kept_percent_concrete": 69.00918635170603,
                "kept_percent_lambda": 30.990813648293962,
                "num_examples": 3,
                "num_explored_concrete": 181443,
                "num_explored_lambda": 44696,
                "num_explored_none": 11235,
                "num_inputs": 2,
                "num_kept_concrete": 10517,
                "num_kept_lambda": 4723,
                "num_values_explored": 237374,
                "num_values_kept": 15240,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter(lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1)), x)'\n)",
            "task_solution": "Filter(lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3368631508201,
            "num_unique_values": 14742,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 79.89745021639527,
                "explored_percent_lambda": 16.61611097714206,
                "explored_percent_none": 3.486438806462667,
                "kept_percent_concrete": 60.92445530441865,
                "kept_percent_lambda": 39.07554469558135,
                "num_examples": 3,
                "num_explored_concrete": 188856,
                "num_explored_lambda": 39276,
                "num_explored_none": 8241,
                "num_inputs": 1,
                "num_kept_concrete": 8976,
                "num_kept_lambda": 5757,
                "num_values_explored": 236373,
                "num_values_kept": 14733,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter(lambda u1: Equal(u1, Access(u1, x)), x))'\n)",
            "task_solution": "Sort(Filter(lambda u1: Equal(u1, Access(u1, x)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3455892391503,
            "num_unique_values": 16135,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.58996258092787,
                "explored_percent_lambda": 17.882535904695214,
                "explored_percent_none": 6.527501514376914,
                "kept_percent_concrete": 70.11907715207144,
                "kept_percent_lambda": 29.880922847928552,
                "num_examples": 3,
                "num_explored_concrete": 175950,
                "num_explored_lambda": 41625,
                "num_explored_none": 15194,
                "num_inputs": 3,
                "num_kept_concrete": 11306,
                "num_kept_lambda": 4818,
                "num_values_explored": 232769,
                "num_values_kept": 16124,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter(lambda u1: Equal(Access(u1, x), y), i)'\n)",
            "task_solution": "Filter(lambda u1: Equal(Access(u1, x), y), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 103.88298517465591,
            "num_unique_values": 5260,
            "solution": "Count(lambda u1: (lambda v1: Equal(n, v1))(u1), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 89.91893989998376,
                "explored_percent_lambda": 3.1611633658897653,
                "explored_percent_none": 6.919896734126483,
                "kept_percent_concrete": 89.56190476190476,
                "kept_percent_lambda": 10.438095238095238,
                "num_examples": 5,
                "num_explored_concrete": 49807,
                "num_explored_lambda": 1751,
                "num_explored_none": 3833,
                "num_inputs": 2,
                "num_kept_concrete": 4702,
                "num_kept_lambda": 548,
                "num_values_explored": 55391,
                "num_values_kept": 5250,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count(lambda u1: Equal(u1, n), x)'\n)",
            "task_solution": "Count(lambda u1: Equal(u1, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.5644790064543486,
            "num_unique_values": 243,
            "solution": "Count(lambda u1: (lambda v1: Greater(q, v1))(u1), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 32.46153846153846,
                "explored_percent_lambda": 31.076923076923077,
                "explored_percent_none": 36.46153846153846,
                "kept_percent_concrete": 70.81545064377683,
                "kept_percent_lambda": 29.184549356223176,
                "num_examples": 5,
                "num_explored_concrete": 211,
                "num_explored_lambda": 202,
                "num_explored_none": 237,
                "num_inputs": 2,
                "num_kept_concrete": 165,
                "num_kept_lambda": 68,
                "num_values_explored": 650,
                "num_values_kept": 233,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count(lambda u1: Less(u1, q), x)'\n)",
            "task_solution": "Count(lambda u1: Less(u1, q), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 29.77624579705298,
            "num_unique_values": 3181,
            "solution": "Count(lambda u1: (lambda v1: Greater(Head(x), v1))(u1), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 86.46699266503667,
                "explored_percent_lambda": 8.00122249388753,
                "explored_percent_none": 5.531784841075795,
                "kept_percent_concrete": 83.82723833543506,
                "kept_percent_lambda": 16.172761664564945,
                "num_examples": 5,
                "num_explored_concrete": 14146,
                "num_explored_lambda": 1309,
                "num_explored_none": 905,
                "num_inputs": 1,
                "num_kept_concrete": 2659,
                "num_kept_lambda": 513,
                "num_values_explored": 16360,
                "num_values_kept": 3172,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count(lambda u1: Less(u1, Head(x)), x)'\n)",
            "task_solution": "Count(lambda u1: Less(u1, Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 15.881695041432977,
            "num_unique_values": 2360,
            "solution": "Subtract(Sum(Map(lambda u1: 1, x)), Count(lambda u1: (lambda v1: Less(-1, v1))(u1), x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 86.90124858115777,
                "explored_percent_lambda": 8.36549375709421,
                "explored_percent_none": 4.733257661748014,
                "kept_percent_concrete": 83.15610378562315,
                "kept_percent_lambda": 16.843896214376862,
                "num_examples": 5,
                "num_explored_concrete": 7656,
                "num_explored_lambda": 737,
                "num_explored_none": 417,
                "num_inputs": 1,
                "num_kept_concrete": 1955,
                "num_kept_lambda": 396,
                "num_values_explored": 8810,
                "num_values_kept": 2351,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count(lambda u1: Less(u1, 0), x)'\n)",
            "task_solution": "Count(lambda u1: Less(u1, 0), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 43.46173583343625,
            "num_unique_values": 3993,
            "solution": "Count(lambda u1: (lambda v1: Equal(v1, Last(x)))(u1), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 88.9073259769352,
                "explored_percent_lambda": 6.247407284493487,
                "explored_percent_none": 4.84526673857131,
                "kept_percent_concrete": 86.47088353413655,
                "kept_percent_lambda": 13.529116465863455,
                "num_examples": 5,
                "num_explored_concrete": 21432,
                "num_explored_lambda": 1506,
                "num_explored_none": 1168,
                "num_inputs": 1,
                "num_kept_concrete": 3445,
                "num_kept_lambda": 539,
                "num_values_explored": 24106,
                "num_values_kept": 3984,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count(lambda u1: Equal(u1, Last(x)), x)'\n)",
            "task_solution": "Count(lambda u1: Equal(u1, Last(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0704548917711,
            "num_unique_values": 17498,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 90.40055987814416,
                "explored_percent_lambda": 2.209871969042032,
                "explored_percent_none": 7.3895681528137995,
                "kept_percent_concrete": 93.38403476669717,
                "kept_percent_lambda": 6.615965233302836,
                "num_examples": 5,
                "num_explored_concrete": 219592,
                "num_explored_lambda": 5368,
                "num_explored_none": 17950,
                "num_inputs": 2,
                "num_kept_concrete": 16331,
                "num_kept_lambda": 1157,
                "num_values_explored": 242910,
                "num_values_kept": 17488,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count(lambda u1: Equal(u1, Access(i, x)), x)'\n)",
            "task_solution": "Count(lambda u1: Equal(u1, Access(i, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 10.31896105222404,
            "num_unique_values": 1565,
            "solution": "Count(lambda u1: (lambda v1: IsEven((lambda v1: Min(0, v1))(v1)))(u1), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 81.8469558741389,
                "explored_percent_lambda": 12.958480729845466,
                "explored_percent_none": 5.194563396015639,
                "kept_percent_concrete": 80.33419023136247,
                "kept_percent_lambda": 19.665809768637533,
                "num_examples": 5,
                "num_explored_concrete": 4396,
                "num_explored_lambda": 696,
                "num_explored_none": 279,
                "num_inputs": 1,
                "num_kept_concrete": 1250,
                "num_kept_lambda": 306,
                "num_values_explored": 5371,
                "num_values_kept": 1556,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count(lambda u1: IsEven(Min(u1, 0)), x)'\n)",
            "task_solution": "Count(lambda u1: IsEven(Min(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0354819912463,
            "num_unique_values": 20581,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 86.6782452950515,
                "explored_percent_lambda": 5.783886710357897,
                "explored_percent_none": 7.537867994590609,
                "kept_percent_concrete": 89.65047882942005,
                "kept_percent_lambda": 10.349521170579942,
                "num_examples": 5,
                "num_explored_concrete": 191643,
                "num_explored_lambda": 12788,
                "num_explored_none": 16666,
                "num_inputs": 2,
                "num_kept_concrete": 18442,
                "num_kept_lambda": 2129,
                "num_values_explored": 221097,
                "num_values_kept": 20571,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count(lambda u1: Equal(u1, 0), x), Count(lambda u1: Equal(u1, 0), y))'\n)",
            "task_solution": "Add(Count(lambda u1: Equal(u1, 0), x), Count(lambda u1: Equal(u1, 0), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.316082399338484,
            "num_unique_values": 425,
            "solution": "Take(Count(lambda u1: (lambda v1: Less(0, v1))(u1), r), Sort(c))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 39.24731182795699,
                "explored_percent_lambda": 51.74731182795699,
                "explored_percent_none": 9.005376344086022,
                "kept_percent_concrete": 44.57831325301205,
                "kept_percent_lambda": 55.42168674698795,
                "num_examples": 3,
                "num_explored_concrete": 292,
                "num_explored_lambda": 385,
                "num_explored_none": 67,
                "num_inputs": 2,
                "num_kept_concrete": 185,
                "num_kept_lambda": 230,
                "num_values_explored": 744,
                "num_values_kept": 415,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count(lambda u1: Greater(u1, 0), r), Sort(c))'\n)",
            "task_solution": "Take(Count(lambda u1: Greater(u1, 0), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.014411918819,
            "num_unique_values": 18423,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 94.22485928548761,
                "explored_percent_lambda": 2.4593723381156782,
                "explored_percent_none": 3.3157683763967065,
                "kept_percent_concrete": 95.95937652745343,
                "kept_percent_lambda": 4.04062347254657,
                "num_examples": 5,
                "num_explored_concrete": 225661,
                "num_explored_lambda": 5890,
                "num_explored_none": 7941,
                "num_inputs": 2,
                "num_kept_concrete": 17669,
                "num_kept_lambda": 744,
                "num_values_explored": 239492,
                "num_values_kept": 18413,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith(lambda u1, u2: Add(Multiply(u1, 3), u2), w, t))'\n)",
            "task_solution": "Maximum(ZipWith(lambda u1, u2: Add(Multiply(u1, 3), u2), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3305367454886,
            "num_unique_values": 18730,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 90.58921595042436,
                "explored_percent_lambda": 3.1367876869190354,
                "explored_percent_none": 6.273996362656608,
                "kept_percent_concrete": 96.02029914529915,
                "kept_percent_lambda": 3.9797008547008548,
                "num_examples": 5,
                "num_explored_concrete": 215182,
                "num_explored_lambda": 7451,
                "num_explored_none": 14903,
                "num_inputs": 2,
                "num_kept_concrete": 17975,
                "num_kept_lambda": 745,
                "num_values_explored": 237536,
                "num_values_kept": 18720,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3440310508013,
            "num_unique_values": 12330,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.29476575173057,
                "explored_percent_lambda": 27.63639721825161,
                "explored_percent_none": 3.0688370300178276,
                "kept_percent_concrete": 51.400048697345994,
                "kept_percent_lambda": 48.599951302654006,
                "num_examples": 3,
                "num_explored_concrete": 172580,
                "num_explored_lambda": 68829,
                "num_explored_none": 7643,
                "num_inputs": 1,
                "num_kept_concrete": 6333,
                "num_kept_lambda": 5988,
                "num_values_explored": 249052,
                "num_values_kept": 12321,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith(lambda u1, u2: Min(u1, u2), a, Reverse(a))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Min(u1, u2), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3130256123841,
            "num_unique_values": 18233,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 93.6972016062906,
                "explored_percent_lambda": 2.3270189012467672,
                "explored_percent_none": 3.9757794924626286,
                "kept_percent_concrete": 95.53311748888767,
                "kept_percent_lambda": 4.46688251111233,
                "num_examples": 5,
                "num_explored_concrete": 222826,
                "num_explored_lambda": 5534,
                "num_explored_none": 9455,
                "num_inputs": 2,
                "num_kept_concrete": 17409,
                "num_kept_lambda": 814,
                "num_values_explored": 237815,
                "num_values_kept": 18223,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith(lambda u1, u2: Add(u1, u2), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith(lambda u1, u2: Add(u1, u2), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3227234724909,
            "num_unique_values": 15708,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 93.88479133600971,
                "explored_percent_lambda": 3.9069952466582505,
                "explored_percent_none": 2.20821341733204,
                "kept_percent_concrete": 92.9294859545194,
                "kept_percent_lambda": 7.0705140454806035,
                "num_examples": 5,
                "num_explored_concrete": 231288,
                "num_explored_lambda": 9625,
                "num_explored_none": 5440,
                "num_inputs": 1,
                "num_kept_concrete": 14589,
                "num_kept_lambda": 1110,
                "num_values_explored": 246353,
                "num_values_kept": 15699,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith(lambda u1, u2: Max(Subtract(u1, u2), 0), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Max(Subtract(u1, u2), 0), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.2855612393469,
            "num_unique_values": 18898,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 91.64293476626763,
                "explored_percent_lambda": 2.5321186036622296,
                "explored_percent_none": 5.824946630070143,
                "kept_percent_concrete": 96.40512494705634,
                "kept_percent_lambda": 3.594875052943668,
                "num_examples": 5,
                "num_explored_concrete": 213353,
                "num_explored_lambda": 5895,
                "num_explored_none": 13561,
                "num_inputs": 2,
                "num_kept_concrete": 18209,
                "num_kept_lambda": 679,
                "num_values_explored": 232809,
                "num_values_kept": 18888,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, y))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3332521803677,
            "num_unique_values": 13206,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.76471762429752,
                "explored_percent_lambda": 23.371618094155945,
                "explored_percent_none": 3.8636642815465407,
                "kept_percent_concrete": 58.237344649893906,
                "kept_percent_lambda": 41.762655350106094,
                "num_examples": 3,
                "num_explored_concrete": 189555,
                "num_explored_lambda": 60884,
                "num_explored_none": 10065,
                "num_inputs": 2,
                "num_kept_concrete": 7685,
                "num_kept_lambda": 5511,
                "num_values_explored": 260504,
                "num_values_kept": 13196,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith(lambda u1, u2: IntDivide(Add(u1, u2), 2), x, y)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: IntDivide(Add(u1, u2), 2), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3288525901735,
            "num_unique_values": 12459,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.43588266983708,
                "explored_percent_lambda": 18.730842822908734,
                "explored_percent_none": 4.833274507254185,
                "kept_percent_concrete": 59.214331619537276,
                "kept_percent_lambda": 40.785668380462724,
                "num_examples": 3,
                "num_explored_concrete": 205731,
                "num_explored_lambda": 50415,
                "num_explored_none": 13009,
                "num_inputs": 3,
                "num_kept_concrete": 7371,
                "num_kept_lambda": 5077,
                "num_values_explored": 269155,
                "num_values_kept": 12448,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith(lambda u1, u2: Add(u1, u2), a, ZipWith(lambda u1, u2: Add(u1, u2), b, c))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Add(u1, u2), a, ZipWith(lambda u1, u2: Add(u1, u2), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 170.89265425130725,
            "num_unique_values": 6624,
            "solution": "Sort(ZipWith(lambda u1, u2: (lambda v1, v2: IntDivide(v1, v2))(u1, u2), m, n))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 78.28236629112004,
                "explored_percent_lambda": 19.19572038951866,
                "explored_percent_none": 2.5219133193613006,
                "kept_percent_concrete": 60.88599939522226,
                "kept_percent_lambda": 39.11400060477774,
                "num_examples": 3,
                "num_explored_concrete": 67607,
                "num_explored_lambda": 16578,
                "num_explored_none": 2178,
                "num_inputs": 2,
                "num_kept_concrete": 4027,
                "num_kept_lambda": 2587,
                "num_values_explored": 86363,
                "num_values_kept": 6614,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith(lambda u1, u2: IntDivide(u1, u2), m, n))'\n)",
            "task_solution": "Sort(ZipWith(lambda u1, u2: IntDivide(u1, u2), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 230.60120690613985,
            "num_unique_values": 8213,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Subtract(v2, v1))(u1, u2), x, Drop(1, x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 69.56948455164864,
                "explored_percent_lambda": 25.25338316063643,
                "explored_percent_none": 5.177132287714928,
                "kept_percent_concrete": 51.59678205753291,
                "kept_percent_lambda": 48.40321794246709,
                "num_examples": 3,
                "num_explored_concrete": 73720,
                "num_explored_lambda": 26760,
                "num_explored_none": 5486,
                "num_inputs": 1,
                "num_kept_concrete": 4233,
                "num_kept_lambda": 3971,
                "num_values_explored": 105966,
                "num_values_kept": 8204,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith(lambda u1, u2: Subtract(u2, u1), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Subtract(u2, u1), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.2119708396494,
            "num_unique_values": 19648,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 89.1138196362824,
                "explored_percent_lambda": 4.098589552463235,
                "explored_percent_none": 6.787590811254366,
                "kept_percent_concrete": 93.8231999185253,
                "kept_percent_lambda": 6.176800081474692,
                "num_examples": 5,
                "num_explored_concrete": 207424,
                "num_explored_lambda": 9540,
                "num_explored_none": 15799,
                "num_inputs": 2,
                "num_kept_concrete": 18425,
                "num_kept_lambda": 1213,
                "num_values_explored": 232763,
                "num_values_kept": 19638,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, m))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3567278459668,
            "num_unique_values": 14414,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.23630307009817,
                "explored_percent_lambda": 25.71747729856985,
                "explored_percent_none": 4.046219631331978,
                "kept_percent_concrete": 57.845043043599,
                "kept_percent_lambda": 42.154956956401,
                "num_examples": 3,
                "num_explored_concrete": 175425,
                "num_explored_lambda": 64233,
                "num_explored_none": 10106,
                "num_inputs": 2,
                "num_kept_concrete": 8332,
                "num_kept_lambda": 6072,
                "num_values_explored": 249764,
                "num_values_kept": 14404,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith(lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1)), x, y)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3708854373544,
            "num_unique_values": 16856,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 87.1616163666254,
                "explored_percent_lambda": 2.4708246230033892,
                "explored_percent_none": 10.367559010371211,
                "kept_percent_concrete": 96.80636352843405,
                "kept_percent_lambda": 3.1936364715659504,
                "num_examples": 5,
                "num_explored_concrete": 214727,
                "num_explored_lambda": 6087,
                "num_explored_none": 25541,
                "num_inputs": 2,
                "num_kept_concrete": 16308,
                "num_kept_lambda": 538,
                "num_values_explored": 246355,
                "num_values_kept": 16846,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith(lambda u1, u2: Square(Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Square(Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3153856676072,
            "num_unique_values": 14055,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.8547781264736,
                "explored_percent_lambda": 23.213792094180395,
                "explored_percent_none": 7.931429779346006,
                "kept_percent_concrete": 50.12459950160199,
                "kept_percent_lambda": 49.87540049839801,
                "num_examples": 3,
                "num_explored_concrete": 169380,
                "num_explored_lambda": 57105,
                "num_explored_none": 19511,
                "num_inputs": 2,
                "num_kept_concrete": 7040,
                "num_kept_lambda": 7005,
                "num_values_explored": 245996,
                "num_values_kept": 14045,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith(lambda u1, u2: If(Equal(u1, u2), 1, 0), x, y)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: If(Equal(u1, u2), 1, 0), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3608845323324,
            "num_unique_values": 12992,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.06521418383907,
                "explored_percent_lambda": 18.892365196402967,
                "explored_percent_none": 3.0424206197579533,
                "kept_percent_concrete": 63.41087659836697,
                "kept_percent_lambda": 36.58912340163303,
                "num_examples": 3,
                "num_explored_concrete": 206349,
                "num_explored_lambda": 49938,
                "num_explored_none": 8042,
                "num_inputs": 2,
                "num_kept_concrete": 8232,
                "num_kept_lambda": 4750,
                "num_values_explored": 264329,
                "num_values_kept": 12982,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith(lambda u1, u2: Min(u1, u2), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Min(u1, u2), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3303917516023,
            "num_unique_values": 12387,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.53505458519638,
                "explored_percent_lambda": 22.596316845426372,
                "explored_percent_none": 3.868628569377246,
                "kept_percent_concrete": 56.4711585070286,
                "kept_percent_lambda": 43.5288414929714,
                "num_examples": 3,
                "num_explored_concrete": 184359,
                "num_explored_lambda": 56651,
                "num_explored_none": 9699,
                "num_inputs": 1,
                "num_kept_concrete": 6990,
                "num_kept_lambda": 5388,
                "num_values_explored": 250709,
                "num_values_kept": 12378,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith(lambda u1, u2: Add(u1, u2), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Add(u1, u2), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3980919066817,
            "num_unique_values": 19755,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 91.98921015672025,
                "explored_percent_lambda": 2.5766324096573556,
                "explored_percent_none": 5.4341574336224,
                "kept_percent_concrete": 96.16631216448901,
                "kept_percent_lambda": 3.8336878355109896,
                "num_examples": 5,
                "num_explored_concrete": 206318,
                "num_explored_lambda": 5779,
                "num_explored_none": 12188,
                "num_inputs": 1,
                "num_kept_concrete": 18989,
                "num_kept_lambda": 757,
                "num_values_explored": 224285,
                "num_values_kept": 19746,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3831184580922,
            "num_unique_values": 12429,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.30514485690463,
                "explored_percent_lambda": 25.156287310292456,
                "explored_percent_none": 2.5385678328029155,
                "kept_percent_concrete": 52.55656655125211,
                "kept_percent_lambda": 47.44343344874789,
                "num_examples": 3,
                "num_explored_concrete": 184710,
                "num_explored_lambda": 64264,
                "num_explored_none": 6485,
                "num_inputs": 2,
                "num_kept_concrete": 6527,
                "num_kept_lambda": 5892,
                "num_values_explored": 255459,
                "num_values_kept": 12419,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith(lambda u1, u2: Multiply(u1, Add(1, u2)), p, w)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Multiply(u1, Add(1, u2)), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3491644319147,
            "num_unique_values": 17688,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 93.99824961521713,
                "explored_percent_lambda": 3.417561619149037,
                "explored_percent_none": 2.5841887656338245,
                "kept_percent_concrete": 92.22241076983993,
                "kept_percent_lambda": 7.777589230160077,
                "num_examples": 5,
                "num_explored_concrete": 218028,
                "num_explored_lambda": 7927,
                "num_explored_none": 5994,
                "num_inputs": 1,
                "num_kept_concrete": 16304,
                "num_kept_lambda": 1375,
                "num_values_explored": 231949,
                "num_values_kept": 17679,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1(lambda u1, u2: Min(u1, u2), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1(lambda u1, u2: Min(u1, u2), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3453372810036,
            "num_unique_values": 13080,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.2610871703031,
                "explored_percent_lambda": 23.19930922551708,
                "explored_percent_none": 4.539603604179825,
                "kept_percent_concrete": 53.34710427664295,
                "kept_percent_lambda": 46.65289572335705,
                "num_examples": 3,
                "num_explored_concrete": 180764,
                "num_explored_lambda": 58034,
                "num_explored_none": 11356,
                "num_inputs": 1,
                "num_kept_concrete": 6973,
                "num_kept_lambda": 6098,
                "num_values_explored": 250154,
                "num_values_kept": 13071,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1(lambda u1, u2: Max(u1, u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Max(u1, u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 446.66671732254326,
            "num_unique_values": 16644,
            "solution": "Maximum(Map(lambda u1: (lambda v1: Sum((lambda v1: Take(v1, x))(v1)))(u1), x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 92.90242963566787,
                "explored_percent_lambda": 3.9127776645608314,
                "explored_percent_none": 3.1847926997713016,
                "kept_percent_concrete": 91.81845506462278,
                "kept_percent_lambda": 8.181544935377216,
                "num_examples": 5,
                "num_explored_concrete": 164114,
                "num_explored_lambda": 6912,
                "num_explored_none": 5626,
                "num_inputs": 1,
                "num_kept_concrete": 15274,
                "num_kept_lambda": 1361,
                "num_values_explored": 176652,
                "num_values_kept": 16635,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1(lambda u1, u2: Add(u1, u2), x))'\n)",
            "task_solution": "Maximum(Scanl1(lambda u1, u2: Add(u1, u2), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3341250196099,
            "num_unique_values": 12750,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.78284890215912,
                "explored_percent_lambda": 27.398695996587655,
                "explored_percent_none": 5.818455101253225,
                "kept_percent_concrete": 52.69602072050859,
                "kept_percent_lambda": 47.30397927949141,
                "num_examples": 3,
                "num_explored_concrete": 164396,
                "num_explored_lambda": 67446,
                "num_explored_none": 14323,
                "num_inputs": 1,
                "num_kept_concrete": 6714,
                "num_kept_lambda": 6027,
                "num_values_explored": 246165,
                "num_values_kept": 12741,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1(lambda u1, u2: Add(u1, u2), Reverse(x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(u1, u2), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3547425530851,
            "num_unique_values": 14970,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.12924660970255,
                "explored_percent_lambda": 22.82951059647853,
                "explored_percent_none": 5.041242793818927,
                "kept_percent_concrete": 58.06430051467148,
                "kept_percent_lambda": 41.93569948532852,
                "num_examples": 3,
                "num_explored_concrete": 175414,
                "num_explored_lambda": 55520,
                "num_explored_none": 12260,
                "num_inputs": 1,
                "num_kept_concrete": 8687,
                "num_kept_lambda": 6274,
                "num_values_explored": 243194,
                "num_values_kept": 14961,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1(lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2)), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3952997047454,
            "num_unique_values": 15418,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.02818942729547,
                "explored_percent_lambda": 18.260087431608138,
                "explored_percent_none": 4.711723141096391,
                "kept_percent_concrete": 66.58229491173417,
                "kept_percent_lambda": 33.41770508826583,
                "num_examples": 3,
                "num_explored_concrete": 196113,
                "num_explored_lambda": 46490,
                "num_explored_none": 11996,
                "num_inputs": 2,
                "num_kept_concrete": 10259,
                "num_kept_lambda": 5149,
                "num_values_explored": 254599,
                "num_values_kept": 15408,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1(lambda u1, u2: Add(Add(u1, u2), n), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(Add(u1, u2), n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.4017617627978,
            "num_unique_values": 13035,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.18639955355337,
                "explored_percent_lambda": 24.604708717840882,
                "explored_percent_none": 4.208891728605744,
                "kept_percent_concrete": 52.66390296330416,
                "kept_percent_lambda": 47.33609703669584,
                "num_examples": 3,
                "num_explored_concrete": 176034,
                "num_explored_lambda": 60844,
                "num_explored_none": 10408,
                "num_inputs": 1,
                "num_kept_concrete": 6860,
                "num_kept_lambda": 6166,
                "num_values_explored": 247286,
                "num_values_kept": 13026,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1(lambda u1, u2: Add(IntDivide(u1, 2), u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(IntDivide(u1, 2), u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3662172015756,
            "num_unique_values": 12132,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.44310784309933,
                "explored_percent_lambda": 22.875996487875824,
                "explored_percent_none": 2.680895669024844,
                "kept_percent_concrete": 56.48407853489523,
                "kept_percent_lambda": 43.51592146510477,
                "num_examples": 3,
                "num_explored_concrete": 192460,
                "num_explored_lambda": 59142,
                "num_explored_none": 6931,
                "num_inputs": 2,
                "num_kept_concrete": 6847,
                "num_kept_lambda": 5275,
                "num_values_explored": 258533,
                "num_values_kept": 12122,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1(lambda u1, u2: Multiply(u1, u2), Take(n, x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Multiply(u1, u2), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 10.151333896443248,
            "num_unique_values": 1385,
            "solution": "Last(Scanl1(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), Sort(x)))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 83.88791593695271,
                "explored_percent_lambda": 11.986767853668029,
                "explored_percent_none": 4.125316209379257,
                "kept_percent_concrete": 83.43023255813954,
                "kept_percent_lambda": 16.569767441860463,
                "num_examples": 5,
                "num_explored_concrete": 4311,
                "num_explored_lambda": 616,
                "num_explored_none": 212,
                "num_inputs": 1,
                "num_kept_concrete": 1148,
                "num_kept_lambda": 228,
                "num_values_explored": 5139,
                "num_values_kept": 1376,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1(lambda u1, u2: Multiply(u1, u2), x))'\n)",
            "task_solution": "Last(Scanl1(lambda u1, u2: Multiply(u1, u2), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0377659648657,
            "num_unique_values": 11166,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.23940444004417,
                "explored_percent_lambda": 23.330413921785155,
                "explored_percent_none": 3.430181638170671,
                "kept_percent_concrete": 42.69965044366765,
                "kept_percent_lambda": 57.30034955633235,
                "num_examples": 3,
                "num_explored_concrete": 192334,
                "num_explored_lambda": 61268,
                "num_explored_none": 9008,
                "num_inputs": 1,
                "num_kept_concrete": 4764,
                "num_kept_lambda": 6393,
                "num_values_explored": 262610,
                "num_values_kept": 11157,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1(lambda u1, u2: Min(u1, u2), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Min(u1, u2), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3093687277287,
            "num_unique_values": 13269,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.01037514398926,
                "explored_percent_lambda": 21.99443439433464,
                "explored_percent_none": 4.995190461676095,
                "kept_percent_concrete": 59.20814479638009,
                "kept_percent_lambda": 40.79185520361991,
                "num_examples": 3,
                "num_explored_concrete": 184441,
                "num_explored_lambda": 55563,
                "num_explored_none": 12619,
                "num_inputs": 1,
                "num_kept_concrete": 7851,
                "num_kept_lambda": 5409,
                "num_values_explored": 252623,
                "num_values_kept": 13260,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1(lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.847006931900978,
            "num_unique_values": 266,
            "solution": "Scanl1(lambda u1, u2: (lambda v1: Access((lambda v1: Max(0, v1))(v1), x))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 28.6,
                "explored_percent_lambda": 56.4,
                "explored_percent_none": 15.0,
                "kept_percent_concrete": 40.07782101167315,
                "kept_percent_lambda": 59.92217898832685,
                "num_examples": 3,
                "num_explored_concrete": 143,
                "num_explored_lambda": 282,
                "num_explored_none": 75,
                "num_inputs": 1,
                "num_kept_concrete": 103,
                "num_kept_lambda": 154,
                "num_values_explored": 500,
                "num_values_kept": 257,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1(lambda u1, u2: Access(u1, x), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Access(u1, x), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0105340760201,
            "num_unique_values": 13396,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.52356809553018,
                "explored_percent_lambda": 16.453022974137596,
                "explored_percent_none": 5.023408930332228,
                "kept_percent_concrete": 60.5214013595279,
                "kept_percent_lambda": 39.4785986404721,
                "num_examples": 3,
                "num_explored_concrete": 202272,
                "num_explored_lambda": 42382,
                "num_explored_none": 12940,
                "num_inputs": 1,
                "num_kept_concrete": 8102,
                "num_kept_lambda": 5285,
                "num_values_explored": 257594,
                "num_values_kept": 13387,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1(lambda u1, u2: Max(Add(u1, 1), u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Max(Add(u1, 1), u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3334166370332,
            "num_unique_values": 14594,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.90447210397683,
                "explored_percent_lambda": 24.934852629364066,
                "explored_percent_none": 6.160675266659113,
                "kept_percent_concrete": 54.65889612615701,
                "kept_percent_lambda": 45.34110387384299,
                "num_examples": 3,
                "num_explored_concrete": 170285,
                "num_explored_lambda": 61622,
                "num_explored_none": 15225,
                "num_inputs": 1,
                "num_kept_concrete": 7972,
                "num_kept_lambda": 6613,
                "num_values_explored": 247132,
                "num_values_kept": 14585,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1(lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3773049917072,
            "num_unique_values": 18095,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 90.11897804124573,
                "explored_percent_lambda": 5.429573348918761,
                "explored_percent_none": 4.451448609835518,
                "kept_percent_concrete": 86.90627591927012,
                "kept_percent_lambda": 13.093724080729887,
                "num_examples": 5,
                "num_explored_concrete": 215871,
                "num_explored_lambda": 13006,
                "num_explored_none": 10663,
                "num_inputs": 2,
                "num_kept_concrete": 15717,
                "num_kept_lambda": 2368,
                "num_values_explored": 239540,
                "num_values_kept": 18085,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count(lambda u1: Greater(u1, 0), ZipWith(lambda u1, u2: Subtract(u1, u2), a, b))'\n)",
            "task_solution": "Count(lambda u1: Greater(u1, 0), ZipWith(lambda u1, u2: Subtract(u1, u2), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3470943979919,
            "num_unique_values": 18368,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 90.54834539379796,
                "explored_percent_lambda": 3.855291214049462,
                "explored_percent_none": 5.5963633921525835,
                "kept_percent_concrete": 95.19555507135854,
                "kept_percent_lambda": 4.804444928641464,
                "num_examples": 5,
                "num_explored_concrete": 215726,
                "num_explored_lambda": 9185,
                "num_explored_none": 13333,
                "num_inputs": 2,
                "num_kept_concrete": 17476,
                "num_kept_lambda": 882,
                "num_values_explored": 238244,
                "num_values_kept": 18358,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), s, Scanl1(lambda u1, u2: Add(u1, u2), p)))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), s, Scanl1(lambda u1, u2: Add(u1, u2), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.191171243786812,
            "num_unique_values": 253,
            "solution": "Scanl1(lambda u1, u2: (lambda v1: Subtract(v1, -1))(u1), Map(lambda u1: 0, x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 24.35158501440922,
                "explored_percent_lambda": 53.89048991354467,
                "explored_percent_none": 21.75792507204611,
                "kept_percent_concrete": 41.39344262295082,
                "kept_percent_lambda": 58.60655737704918,
                "num_examples": 3,
                "num_explored_concrete": 169,
                "num_explored_lambda": 374,
                "num_explored_none": 151,
                "num_inputs": 1,
                "num_kept_concrete": 101,
                "num_kept_lambda": 143,
                "num_values_explored": 694,
                "num_values_kept": 244,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1(lambda u1, u2: Add(u1, 1), Map(lambda u1: 0, x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(u1, 1), Map(lambda u1: 0, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0125840809196,
            "num_unique_values": 17181,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.26636566834566,
                "explored_percent_lambda": 21.997564055089832,
                "explored_percent_none": 5.736070276564514,
                "kept_percent_concrete": 65.74656417423714,
                "kept_percent_lambda": 34.25343582576287,
                "num_examples": 3,
                "num_explored_concrete": 161980,
                "num_explored_lambda": 49306,
                "num_explored_none": 12857,
                "num_inputs": 1,
                "num_kept_concrete": 11290,
                "num_kept_lambda": 5882,
                "num_values_explored": 224143,
                "num_values_kept": 17172,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter(lambda u1: IsOdd(u1), ZipWith(lambda u1, u2: Multiply(u2, u1), x, Drop(1, x)))'\n)",
            "task_solution": "Filter(lambda u1: IsOdd(u1), ZipWith(lambda u1, u2: Multiply(u2, u1), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3907590005547,
            "num_unique_values": 14892,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.31708749758747,
                "explored_percent_lambda": 19.27053176581158,
                "explored_percent_none": 3.4123807366009618,
                "kept_percent_concrete": 61.43922596250756,
                "kept_percent_lambda": 38.56077403749244,
                "num_examples": 3,
                "num_explored_concrete": 184276,
                "num_explored_lambda": 45929,
                "num_explored_none": 8133,
                "num_inputs": 1,
                "num_kept_concrete": 9144,
                "num_kept_lambda": 5739,
                "num_values_explored": 238338,
                "num_values_kept": 14883,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1(lambda u1, u2: Multiply(u1, u2), Filter(lambda u1: IsOdd(u1), x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Multiply(u1, u2), Filter(lambda u1: IsOdd(u1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.360247714445,
            "num_unique_values": 13875,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.15560285099639,
                "explored_percent_lambda": 20.983226280613376,
                "explored_percent_none": 3.861170868390228,
                "kept_percent_concrete": 63.19509556437072,
                "kept_percent_lambda": 36.80490443562928,
                "num_examples": 3,
                "num_explored_concrete": 196338,
                "num_explored_lambda": 54817,
                "num_explored_none": 10087,
                "num_inputs": 2,
                "num_kept_concrete": 8762,
                "num_kept_lambda": 5103,
                "num_values_explored": 261242,
                "num_values_kept": 13865,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1(lambda u1, u2: Add(u1, u2), ZipWith(lambda u1, u2: Add(u1, u2), x, y))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(u1, u2), ZipWith(lambda u1, u2: Add(u1, u2), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3292485456914,
            "num_unique_values": 12938,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.04989943784419,
                "explored_percent_lambda": 20.98257049846008,
                "explored_percent_none": 3.967530063695726,
                "kept_percent_concrete": 64.0829272066218,
                "kept_percent_lambda": 35.9170727933782,
                "num_examples": 3,
                "num_explored_concrete": 196651,
                "num_explored_lambda": 54980,
                "num_explored_none": 10396,
                "num_inputs": 3,
                "num_kept_concrete": 8284,
                "num_kept_lambda": 4643,
                "num_values_explored": 262027,
                "num_values_kept": 12927,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith(lambda u1, u2: Add(u1, u2), x, Map(lambda u1: Access(u1, y), i))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Add(u1, u2), x, Map(lambda u1: Access(u1, y), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3079569879919,
            "num_unique_values": 16575,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.56051947822007,
                "explored_percent_lambda": 23.20964593504752,
                "explored_percent_none": 4.229834586732413,
                "kept_percent_concrete": 71.1801992152128,
                "kept_percent_lambda": 28.8198007847872,
                "num_examples": 3,
                "num_explored_concrete": 163928,
                "num_explored_lambda": 52435,
                "num_explored_none": 9556,
                "num_inputs": 2,
                "num_kept_concrete": 11791,
                "num_kept_lambda": 4774,
                "num_values_explored": 225919,
                "num_values_kept": 16565,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter(lambda u1: Greater(u1, -1), ZipWith(lambda u1, u2: Subtract(u1, u2), x, y))'\n)",
            "task_solution": "Filter(lambda u1: Greater(u1, -1), ZipWith(lambda u1, u2: Subtract(u1, u2), x, y))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.49
}