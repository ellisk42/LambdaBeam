{
    "num_tasks": 100,
    "num_tasks_solved": 64,
    "results": [
        {
            "elapsed_time": 8.098699001595378,
            "num_unique_values": 492,
            "solution": "Sum(Reverse(Take(k, Sort(b))))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 59.1044776119403,
                "explored_percent_lambda": 24.577114427860696,
                "explored_percent_none": 16.318407960199004,
                "kept_percent_concrete": 76.55601659751038,
                "kept_percent_lambda": 23.443983402489625,
                "num_examples": 5,
                "num_explored_concrete": 594,
                "num_explored_lambda": 247,
                "num_explored_none": 164,
                "num_inputs": 2,
                "num_kept_concrete": 369,
                "num_kept_lambda": 113,
                "num_values_explored": 1005,
                "num_values_kept": 482,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3965
            },
            "success": true,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 34.10832420922816,
            "num_unique_values": 226,
            "solution": "If(IsEven(x), IntDivide(x, 2), Subtract(Multiply(x, 3), -1))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 37.85084202085004,
                "explored_percent_lambda": 9.903769045709703,
                "explored_percent_none": 52.24538893344025,
                "kept_percent_concrete": 87.09677419354838,
                "kept_percent_lambda": 12.903225806451612,
                "num_examples": 5,
                "num_explored_concrete": 944,
                "num_explored_lambda": 247,
                "num_explored_none": 1303,
                "num_inputs": 1,
                "num_kept_concrete": 189,
                "num_kept_lambda": 28,
                "num_values_explored": 2494,
                "num_values_kept": 217,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 21157
            },
            "success": true,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 99.2503107059747,
            "num_unique_values": 150,
            "solution": "Subtract(Multiply(x, Add(y, -1)), y)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 21.136950904392766,
                "explored_percent_lambda": 10.69767441860465,
                "explored_percent_none": 68.16537467700259,
                "kept_percent_concrete": 87.85714285714286,
                "kept_percent_lambda": 12.142857142857142,
                "num_examples": 5,
                "num_explored_concrete": 409,
                "num_explored_lambda": 207,
                "num_explored_none": 1319,
                "num_inputs": 2,
                "num_kept_concrete": 123,
                "num_kept_lambda": 17,
                "num_values_explored": 1935,
                "num_values_kept": 140,
                "temperature": 1.0,
                "total_num_restarts": 17,
                "total_num_values_explored": 63858
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 15.007003432139754,
            "num_unique_values": 152,
            "solution": "Multiply(k, IntDivide(Add(k, x), k))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 21.54639175257732,
                "explored_percent_lambda": 9.175257731958762,
                "explored_percent_none": 69.27835051546391,
                "kept_percent_concrete": 91.54929577464789,
                "kept_percent_lambda": 8.450704225352112,
                "num_examples": 5,
                "num_explored_concrete": 418,
                "num_explored_lambda": 178,
                "num_explored_none": 1344,
                "num_inputs": 2,
                "num_kept_concrete": 130,
                "num_kept_lambda": 12,
                "num_values_explored": 1940,
                "num_values_kept": 142,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 9766
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.570748172700405,
            "num_unique_values": 468,
            "solution": "Reverse(Drop(n, Reverse(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 58.04299481097109,
                "explored_percent_lambda": 27.724240177909564,
                "explored_percent_none": 14.232765011119348,
                "kept_percent_concrete": 59.60698689956332,
                "kept_percent_lambda": 40.39301310043668,
                "num_examples": 3,
                "num_explored_concrete": 783,
                "num_explored_lambda": 374,
                "num_explored_none": 192,
                "num_inputs": 2,
                "num_kept_concrete": 273,
                "num_kept_lambda": 185,
                "num_values_explored": 1349,
                "num_values_kept": 458,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1349
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.5569047201424837,
            "num_unique_values": 469,
            "solution": "Reverse(Sort(Drop(Multiply(n, -1), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 49.366085578446906,
                "explored_percent_lambda": 35.182250396196515,
                "explored_percent_none": 15.451664025356576,
                "kept_percent_concrete": 57.9520697167756,
                "kept_percent_lambda": 42.0479302832244,
                "num_examples": 3,
                "num_explored_concrete": 623,
                "num_explored_lambda": 444,
                "num_explored_none": 195,
                "num_inputs": 2,
                "num_kept_concrete": 266,
                "num_kept_lambda": 193,
                "num_values_explored": 1262,
                "num_values_kept": 459,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1262
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.9438892956823111,
            "num_unique_values": 156,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 11.977715877437326,
                "explored_percent_lambda": 69.08077994428969,
                "explored_percent_none": 18.941504178272982,
                "kept_percent_concrete": 19.727891156462587,
                "kept_percent_lambda": 80.27210884353741,
                "num_examples": 3,
                "num_explored_concrete": 43,
                "num_explored_lambda": 248,
                "num_explored_none": 68,
                "num_inputs": 1,
                "num_kept_concrete": 29,
                "num_kept_lambda": 118,
                "num_values_explored": 359,
                "num_values_kept": 147,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 359
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.8778192959725857,
            "num_unique_values": 158,
            "solution": "Drop(i, Take(j, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 27.577319587628867,
                "explored_percent_lambda": 47.422680412371136,
                "explored_percent_none": 25.0,
                "kept_percent_concrete": 43.53741496598639,
                "kept_percent_lambda": 56.46258503401361,
                "num_examples": 3,
                "num_explored_concrete": 107,
                "num_explored_lambda": 184,
                "num_explored_none": 97,
                "num_inputs": 3,
                "num_kept_concrete": 64,
                "num_kept_lambda": 83,
                "num_values_explored": 388,
                "num_values_kept": 147,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 388
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.950685042887926,
            "num_unique_values": 671,
            "solution": "Take(k, Reverse(Sort(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 58.82056451612903,
                "explored_percent_lambda": 32.10685483870968,
                "explored_percent_none": 9.07258064516129,
                "kept_percent_concrete": 59.001512859304086,
                "kept_percent_lambda": 40.998487140695914,
                "num_examples": 3,
                "num_explored_concrete": 1167,
                "num_explored_lambda": 637,
                "num_explored_none": 180,
                "num_inputs": 2,
                "num_kept_concrete": 390,
                "num_kept_lambda": 271,
                "num_values_explored": 1984,
                "num_values_kept": 661,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1984
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.5177621226757765,
            "num_unique_values": 332,
            "solution": "Max(Access(Max(k, 1), x), Subtract(2, k))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 48.467966573816156,
                "explored_percent_lambda": 24.930362116991642,
                "explored_percent_none": 26.601671309192202,
                "kept_percent_concrete": 77.32919254658385,
                "kept_percent_lambda": 22.67080745341615,
                "num_examples": 5,
                "num_explored_concrete": 348,
                "num_explored_lambda": 179,
                "num_explored_none": 191,
                "num_inputs": 2,
                "num_kept_concrete": 249,
                "num_kept_lambda": 73,
                "num_values_explored": 718,
                "num_values_kept": 322,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 718
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 43.77006817795336,
            "num_unique_values": 298,
            "solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 35.89364844903988,
                "explored_percent_lambda": 44.31314623338257,
                "explored_percent_none": 19.79320531757755,
                "kept_percent_concrete": 58.13148788927336,
                "kept_percent_lambda": 41.86851211072664,
                "num_examples": 5,
                "num_explored_concrete": 243,
                "num_explored_lambda": 300,
                "num_explored_none": 134,
                "num_inputs": 1,
                "num_kept_concrete": 168,
                "num_kept_lambda": 121,
                "num_values_explored": 677,
                "num_values_kept": 289,
                "temperature": 1.0,
                "total_num_restarts": 8,
                "total_num_values_explored": 22178
            },
            "success": true,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.0997052304446697,
            "num_unique_values": 337,
            "solution": "Max(Minimum(Drop(1, x)), Min(Add(3, 4), Head(x)))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 29.72027972027972,
                "explored_percent_lambda": 46.386946386946384,
                "explored_percent_none": 23.892773892773892,
                "kept_percent_concrete": 50.0,
                "kept_percent_lambda": 50.0,
                "num_examples": 5,
                "num_explored_concrete": 255,
                "num_explored_lambda": 398,
                "num_explored_none": 205,
                "num_inputs": 1,
                "num_kept_concrete": 164,
                "num_kept_lambda": 164,
                "num_values_explored": 858,
                "num_values_kept": 328,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 858
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.89849540963769,
            "num_unique_values": 1121,
            "solution": "IntDivide(Last(ZipWith(lambda u1, u2: (lambda v1: Subtract(Minimum(x), v1))(u2), x, Sort(x))), -1)",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 76.02739726027397,
                "explored_percent_lambda": 19.34931506849315,
                "explored_percent_none": 4.623287671232877,
                "kept_percent_concrete": 78.41726618705036,
                "kept_percent_lambda": 21.58273381294964,
                "num_examples": 5,
                "num_explored_concrete": 2220,
                "num_explored_lambda": 565,
                "num_explored_none": 135,
                "num_inputs": 1,
                "num_kept_concrete": 872,
                "num_kept_lambda": 240,
                "num_values_explored": 2920,
                "num_values_kept": 1112,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 2920
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.4901571627706,
            "num_unique_values": 1100,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.88454137267479,
                "explored_percent_lambda": 17.190506735086593,
                "explored_percent_none": 12.924951892238614,
                "kept_percent_concrete": 77.79816513761467,
                "kept_percent_lambda": 22.201834862385322,
                "num_examples": 5,
                "num_explored_concrete": 2179,
                "num_explored_lambda": 536,
                "num_explored_none": 403,
                "num_inputs": 2,
                "num_kept_concrete": 848,
                "num_kept_lambda": 242,
                "num_values_explored": 3118,
                "num_values_kept": 1090,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 315876
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.402069080621,
            "num_unique_values": 944,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.49403487304986,
                "explored_percent_lambda": 16.365861119608443,
                "explored_percent_none": 18.140104007341694,
                "kept_percent_concrete": 75.16059957173448,
                "kept_percent_lambda": 24.839400428265524,
                "num_examples": 5,
                "num_explored_concrete": 2141,
                "num_explored_lambda": 535,
                "num_explored_none": 593,
                "num_inputs": 2,
                "num_kept_concrete": 702,
                "num_kept_lambda": 232,
                "num_values_explored": 3269,
                "num_values_kept": 934,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 323767
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.6277047619223595,
            "num_unique_values": 248,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), x, Map(lambda u1: (lambda v1: Square(v1))(u1), x))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 18.939393939393938,
                "explored_percent_lambda": 60.15151515151515,
                "explored_percent_none": 20.90909090909091,
                "kept_percent_concrete": 35.14644351464435,
                "kept_percent_lambda": 64.85355648535565,
                "num_examples": 3,
                "num_explored_concrete": 125,
                "num_explored_lambda": 397,
                "num_explored_none": 138,
                "num_inputs": 1,
                "num_kept_concrete": 84,
                "num_kept_lambda": 155,
                "num_values_explored": 660,
                "num_values_kept": 239,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 660
            },
            "success": true,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map(lambda u1: Multiply(u1, Square(u1)), x)'\n)",
            "task_solution": "Map(lambda u1: Multiply(u1, Square(u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 398.8482923861593,
            "num_unique_values": 217,
            "solution": "Map(lambda u1: (lambda v1: Max(v1, (lambda v1: Subtract(0, v1))(v1)))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 23.21981424148607,
                "explored_percent_lambda": 57.585139318885446,
                "explored_percent_none": 19.195046439628484,
                "kept_percent_concrete": 41.34615384615385,
                "kept_percent_lambda": 58.65384615384615,
                "num_examples": 3,
                "num_explored_concrete": 150,
                "num_explored_lambda": 372,
                "num_explored_none": 124,
                "num_inputs": 1,
                "num_kept_concrete": 86,
                "num_kept_lambda": 122,
                "num_values_explored": 646,
                "num_values_kept": 208,
                "temperature": 1.0,
                "total_num_restarts": 67,
                "total_num_values_explored": 204140
            },
            "success": true,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map(lambda u1: Max(u1, Subtract(0, u1)), x)'\n)",
            "task_solution": "Map(lambda u1: Max(u1, Subtract(0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.843228532001376,
            "num_unique_values": 531,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Subtract((lambda v1: Square(v1))(v2), v1))(u1, u2), x, x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 51.0219530658592,
                "explored_percent_lambda": 38.53141559424678,
                "explored_percent_none": 10.44663133989402,
                "kept_percent_concrete": 47.509578544061306,
                "kept_percent_lambda": 52.490421455938694,
                "num_examples": 3,
                "num_explored_concrete": 674,
                "num_explored_lambda": 509,
                "num_explored_none": 138,
                "num_inputs": 1,
                "num_kept_concrete": 248,
                "num_kept_lambda": 274,
                "num_values_explored": 1321,
                "num_values_kept": 522,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1321
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map(lambda u1: Subtract(Square(u1), u1), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(Square(u1), u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.4639840833843,
            "num_unique_values": 900,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.81353591160222,
                "explored_percent_lambda": 30.31767955801105,
                "explored_percent_none": 4.8687845303867405,
                "kept_percent_concrete": 47.250280583613915,
                "kept_percent_lambda": 52.749719416386085,
                "num_examples": 3,
                "num_explored_concrete": 1877,
                "num_explored_lambda": 878,
                "num_explored_none": 141,
                "num_inputs": 1,
                "num_kept_concrete": 421,
                "num_kept_lambda": 470,
                "num_values_explored": 2896,
                "num_values_kept": 891,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 293461
            },
            "success": false,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map(lambda u1: IntDivide(Add(Square(u1), u1), 2), x)'\n)",
            "task_solution": "Map(lambda u1: IntDivide(Add(Square(u1), u1), 2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 51.113638032227755,
            "num_unique_values": 496,
            "solution": "Map(lambda u1: (lambda v1: Add(b, (lambda v1: Multiply(a, v1))(v1)))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 61.896024464831804,
                "explored_percent_lambda": 21.345565749235472,
                "explored_percent_none": 16.75840978593272,
                "kept_percent_concrete": 67.62886597938144,
                "kept_percent_lambda": 32.371134020618555,
                "num_examples": 3,
                "num_explored_concrete": 1012,
                "num_explored_lambda": 349,
                "num_explored_none": 274,
                "num_inputs": 3,
                "num_kept_concrete": 328,
                "num_kept_lambda": 157,
                "num_values_explored": 1635,
                "num_values_kept": 485,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 28472
            },
            "success": true,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map(lambda u1: Add(Multiply(a, u1), b), x)'\n)",
            "task_solution": "Map(lambda u1: Add(Multiply(a, u1), b), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 141.41708512231708,
            "num_unique_values": 501,
            "solution": "Map(lambda u1: (lambda v1: Subtract((lambda v1: Multiply(3, v1))(v1), 4))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 52.95315682281059,
                "explored_percent_lambda": 34.48744059742023,
                "explored_percent_none": 12.559402579769179,
                "kept_percent_concrete": 53.2520325203252,
                "kept_percent_lambda": 46.7479674796748,
                "num_examples": 3,
                "num_explored_concrete": 780,
                "num_explored_lambda": 508,
                "num_explored_none": 185,
                "num_inputs": 1,
                "num_kept_concrete": 262,
                "num_kept_lambda": 230,
                "num_values_explored": 1473,
                "num_values_kept": 492,
                "temperature": 1.0,
                "total_num_restarts": 24,
                "total_num_values_explored": 71801
            },
            "success": true,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map(lambda u1: Subtract(Multiply(u1, 3), 4), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(Multiply(u1, 3), 4), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 25.229121536016464,
            "num_unique_values": 229,
            "solution": "Map(lambda u1: (lambda v1: Multiply(v1, (lambda v1: Add(2, v1))(v1)))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 22.767857142857142,
                "explored_percent_lambda": 58.25892857142857,
                "explored_percent_none": 18.973214285714285,
                "kept_percent_concrete": 37.72727272727273,
                "kept_percent_lambda": 62.27272727272727,
                "num_examples": 3,
                "num_explored_concrete": 102,
                "num_explored_lambda": 261,
                "num_explored_none": 85,
                "num_inputs": 1,
                "num_kept_concrete": 83,
                "num_kept_lambda": 137,
                "num_values_explored": 448,
                "num_values_kept": 220,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 11732
            },
            "success": true,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map(lambda u1: Multiply(u1, Add(u1, 2)), x)'\n)",
            "task_solution": "Map(lambda u1: Multiply(u1, Add(u1, 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.3841175977140665,
            "num_unique_values": 228,
            "solution": "Map(lambda u1: (lambda v1: Max(a, (lambda v1: Min(b, v1))(v1)))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 24.074074074074073,
                "explored_percent_lambda": 45.21604938271605,
                "explored_percent_none": 30.709876543209877,
                "kept_percent_concrete": 47.004608294930875,
                "kept_percent_lambda": 52.995391705069125,
                "num_examples": 3,
                "num_explored_concrete": 156,
                "num_explored_lambda": 293,
                "num_explored_none": 199,
                "num_inputs": 3,
                "num_kept_concrete": 102,
                "num_kept_lambda": 115,
                "num_values_explored": 648,
                "num_values_kept": 217,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 648
            },
            "success": true,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map(lambda u1: Max(Min(u1, b), a), x)'\n)",
            "task_solution": "Map(lambda u1: Max(Min(u1, b), a), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.2401293292642,
            "num_unique_values": 872,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.31446540880503,
                "explored_percent_lambda": 23.30188679245283,
                "explored_percent_none": 6.383647798742138,
                "kept_percent_concrete": 57.8215527230591,
                "kept_percent_lambda": 42.1784472769409,
                "num_examples": 3,
                "num_explored_concrete": 2236,
                "num_explored_lambda": 741,
                "num_explored_none": 203,
                "num_inputs": 1,
                "num_kept_concrete": 499,
                "num_kept_lambda": 364,
                "num_values_explored": 3180,
                "num_values_kept": 863,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 316947
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map(lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1)), x)'\n)",
            "task_solution": "Map(lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.8781811110675335,
            "num_unique_values": 479,
            "solution": "Sort(ZipWith(lambda u1, u2: (lambda v1: Square(v1))(u1), Sort(x), x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 47.67616191904048,
                "explored_percent_lambda": 39.6551724137931,
                "explored_percent_none": 12.668665667166417,
                "kept_percent_concrete": 45.1063829787234,
                "kept_percent_lambda": 54.8936170212766,
                "num_examples": 3,
                "num_explored_concrete": 636,
                "num_explored_lambda": 529,
                "num_explored_none": 169,
                "num_inputs": 1,
                "num_kept_concrete": 212,
                "num_kept_lambda": 258,
                "num_values_explored": 1334,
                "num_values_kept": 470,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1334
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map(lambda u1: Square(u1), x))'\n)",
            "task_solution": "Sort(Map(lambda u1: Square(u1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 123.49623506888747,
            "num_unique_values": 538,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Subtract(v1, Minimum(x)))(u1), x, Reverse(Scanl1(lambda u1, u2: 3, x)))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 52.48397435897436,
                "explored_percent_lambda": 38.782051282051285,
                "explored_percent_none": 8.73397435897436,
                "kept_percent_concrete": 44.99054820415879,
                "kept_percent_lambda": 55.00945179584121,
                "num_examples": 3,
                "num_explored_concrete": 655,
                "num_explored_lambda": 484,
                "num_explored_none": 109,
                "num_inputs": 1,
                "num_kept_concrete": 238,
                "num_kept_lambda": 291,
                "num_values_explored": 1248,
                "num_values_kept": 529,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 57365
            },
            "success": true,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map(lambda u1: Subtract(u1, Minimum(x)), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(u1, Minimum(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 8.920284312218428,
            "num_unique_values": 497,
            "solution": "Map(lambda u1: (lambda v1: Subtract(v1, Access(i, x)))(u1), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 62.21349050425671,
                "explored_percent_lambda": 23.248199083169613,
                "explored_percent_none": 14.538310412573674,
                "kept_percent_concrete": 65.91375770020534,
                "kept_percent_lambda": 34.08624229979466,
                "num_examples": 3,
                "num_explored_concrete": 950,
                "num_explored_lambda": 355,
                "num_explored_none": 222,
                "num_inputs": 2,
                "num_kept_concrete": 321,
                "num_kept_lambda": 166,
                "num_values_explored": 1527,
                "num_values_kept": 487,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4829
            },
            "success": true,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map(lambda u1: Subtract(u1, Access(i, x)), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(u1, Access(i, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.1071867886931,
            "num_unique_values": 862,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.05952380952381,
                "explored_percent_lambda": 19.553571428571427,
                "explored_percent_none": 10.386904761904763,
                "kept_percent_concrete": 65.14084507042253,
                "kept_percent_lambda": 34.859154929577464,
                "num_examples": 3,
                "num_explored_concrete": 2354,
                "num_explored_lambda": 657,
                "num_explored_none": 349,
                "num_inputs": 2,
                "num_kept_concrete": 555,
                "num_kept_lambda": 297,
                "num_values_explored": 3360,
                "num_values_kept": 852,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 334309
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map(lambda u1: Add(u1, Subtract(t, Head(x))), x)'\n)",
            "task_solution": "Map(lambda u1: Add(u1, Subtract(t, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 50.80530638061464,
            "num_unique_values": 510,
            "solution": "Map(lambda u1: (lambda v1: Access((lambda v1: Subtract(-1, v1))(v1), Reverse(x)))(u1), i)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 49.37984496124031,
                "explored_percent_lambda": 36.89922480620155,
                "explored_percent_none": 13.720930232558139,
                "kept_percent_concrete": 54.0,
                "kept_percent_lambda": 46.0,
                "num_examples": 3,
                "num_explored_concrete": 637,
                "num_explored_lambda": 476,
                "num_explored_none": 177,
                "num_inputs": 2,
                "num_kept_concrete": 270,
                "num_kept_lambda": 230,
                "num_values_explored": 1290,
                "num_values_kept": 500,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 25914
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map(lambda u1: Access(u1, x), i)'\n)",
            "task_solution": "Map(lambda u1: Access(u1, x), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 13.837291922420263,
            "num_unique_values": 465,
            "solution": "Maximum(ZipWith(lambda u1, u2: (lambda v1: Access(v1, x))(u2), x, i))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 49.935483870967744,
                "explored_percent_lambda": 39.354838709677416,
                "explored_percent_none": 10.709677419354838,
                "kept_percent_concrete": 63.2967032967033,
                "kept_percent_lambda": 36.7032967032967,
                "num_examples": 5,
                "num_explored_concrete": 387,
                "num_explored_lambda": 305,
                "num_explored_none": 83,
                "num_inputs": 2,
                "num_kept_concrete": 288,
                "num_kept_lambda": 167,
                "num_values_explored": 775,
                "num_values_kept": 455,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 7214
            },
            "success": true,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map(lambda u1: Access(u1, x), i))'\n)",
            "task_solution": "Maximum(Map(lambda u1: Access(u1, x), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.2808014675974846,
            "num_unique_values": 254,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: If((lambda v1: IsEven(v1))(v1), v1, 0))(u1), x, x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 28.45691382765531,
                "explored_percent_lambda": 54.10821643286573,
                "explored_percent_none": 17.43486973947896,
                "kept_percent_concrete": 40.40816326530612,
                "kept_percent_lambda": 59.59183673469388,
                "num_examples": 3,
                "num_explored_concrete": 142,
                "num_explored_lambda": 270,
                "num_explored_none": 87,
                "num_inputs": 1,
                "num_kept_concrete": 99,
                "num_kept_lambda": 146,
                "num_values_explored": 499,
                "num_values_kept": 245,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 499
            },
            "success": true,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map(lambda u1: If(IsOdd(u1), 0, u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(IsOdd(u1), 0, u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 429.1441028919071,
            "num_unique_values": 218,
            "solution": "Map(lambda u1: (lambda v1: If((lambda v1: Equal(f, v1))(v1), r, v1))(u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 40.0,
                "explored_percent_lambda": 28.674698795180724,
                "explored_percent_none": 31.325301204819276,
                "kept_percent_concrete": 67.6328502415459,
                "kept_percent_lambda": 32.367149758454104,
                "num_examples": 3,
                "num_explored_concrete": 332,
                "num_explored_lambda": 238,
                "num_explored_none": 260,
                "num_inputs": 3,
                "num_kept_concrete": 140,
                "num_kept_lambda": 67,
                "num_values_explored": 830,
                "num_values_kept": 207,
                "temperature": 1.0,
                "total_num_restarts": 72,
                "total_num_values_explored": 233784
            },
            "success": true,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map(lambda u1: If(Equal(u1, f), r, u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(Equal(u1, f), r, u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 49.319477058947086,
            "num_unique_values": 222,
            "solution": "Map(lambda u1: (lambda v1: If((lambda v1: Greater(1, v1))(v1), y, v1))(u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 27.34082397003745,
                "explored_percent_lambda": 47.56554307116105,
                "explored_percent_none": 25.093632958801496,
                "kept_percent_concrete": 50.943396226415096,
                "kept_percent_lambda": 49.056603773584904,
                "num_examples": 3,
                "num_explored_concrete": 146,
                "num_explored_lambda": 254,
                "num_explored_none": 134,
                "num_inputs": 2,
                "num_kept_concrete": 108,
                "num_kept_lambda": 104,
                "num_values_explored": 534,
                "num_values_kept": 212,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 22823
            },
            "success": true,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map(lambda u1: If(Less(u1, 0), y, u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(Less(u1, 0), y, u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 8.972541082650423,
            "num_unique_values": 536,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Add(v1, Last(x)))(u1), x, Take(-1, x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 60.41222459132907,
                "explored_percent_lambda": 30.774697938877043,
                "explored_percent_none": 8.813077469793887,
                "kept_percent_concrete": 59.96204933586338,
                "kept_percent_lambda": 40.03795066413662,
                "num_examples": 3,
                "num_explored_concrete": 850,
                "num_explored_lambda": 433,
                "num_explored_none": 124,
                "num_inputs": 1,
                "num_kept_concrete": 316,
                "num_kept_lambda": 211,
                "num_values_explored": 1407,
                "num_values_kept": 527,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4638
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map(lambda u1: Add(u1, Last(x)), x))'\n)",
            "task_solution": "Take(-1, Map(lambda u1: Add(u1, Last(x)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.4115330521017313,
            "num_unique_values": 214,
            "solution": "Map(lambda u1: Head(x), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 24.32,
                "explored_percent_lambda": 63.52,
                "explored_percent_none": 12.16,
                "kept_percent_concrete": 38.048780487804876,
                "kept_percent_lambda": 61.951219512195124,
                "num_examples": 3,
                "num_explored_concrete": 152,
                "num_explored_lambda": 397,
                "num_explored_none": 76,
                "num_inputs": 1,
                "num_kept_concrete": 78,
                "num_kept_lambda": 127,
                "num_values_explored": 625,
                "num_values_kept": 205,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 625
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map(lambda u1: Head(x), x)'\n)",
            "task_solution": "Map(lambda u1: Head(x), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.351154940202832,
            "num_unique_values": 483,
            "solution": "Sum(Map(lambda u1: 1, x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 42.06349206349206,
                "explored_percent_lambda": 33.597883597883595,
                "explored_percent_none": 24.33862433862434,
                "kept_percent_concrete": 67.29957805907173,
                "kept_percent_lambda": 32.70042194092827,
                "num_examples": 5,
                "num_explored_concrete": 477,
                "num_explored_lambda": 381,
                "num_explored_none": 276,
                "num_inputs": 1,
                "num_kept_concrete": 319,
                "num_kept_lambda": 155,
                "num_values_explored": 1134,
                "num_values_kept": 474,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1134
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map(lambda u1: 1, x))'\n)",
            "task_solution": "Sum(Map(lambda u1: 1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 98.98354130797088,
            "num_unique_values": 600,
            "solution": "Min(Last(Take(-1, x)), Maximum(Take(4, Sort(Drop(1, x)))))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 57.75933609958506,
                "explored_percent_lambda": 29.87551867219917,
                "explored_percent_none": 12.365145228215768,
                "kept_percent_concrete": 70.55837563451777,
                "kept_percent_lambda": 29.441624365482234,
                "num_examples": 5,
                "num_explored_concrete": 696,
                "num_explored_lambda": 360,
                "num_explored_none": 149,
                "num_inputs": 1,
                "num_kept_concrete": 417,
                "num_kept_lambda": 174,
                "num_values_explored": 1205,
                "num_values_kept": 591,
                "temperature": 1.0,
                "total_num_restarts": 17,
                "total_num_values_explored": 52259
            },
            "success": true,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map(lambda u1: 1, x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map(lambda u1: 1, x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.1570551209151745,
            "num_unique_values": 221,
            "solution": "Map(lambda u1: (lambda v1: If((lambda v1: Greater(v1, y))(v1), 1, 0))(u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 33.04042179261863,
                "explored_percent_lambda": 38.13708260105448,
                "explored_percent_none": 28.82249560632689,
                "kept_percent_concrete": 60.18957345971564,
                "kept_percent_lambda": 39.81042654028436,
                "num_examples": 3,
                "num_explored_concrete": 188,
                "num_explored_lambda": 217,
                "num_explored_none": 164,
                "num_inputs": 2,
                "num_kept_concrete": 127,
                "num_kept_lambda": 84,
                "num_values_explored": 569,
                "num_values_kept": 211,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 569
            },
            "success": true,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map(lambda u1: If(Greater(u1, y), 1, 0), x)'\n)",
            "task_solution": "Map(lambda u1: If(Greater(u1, y), 1, 0), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 297.98456879891455,
            "num_unique_values": 500,
            "solution": "Map(lambda u1: (lambda v1: If((lambda v1: IsOdd(v1))(v1), v1, (lambda v1: IntDivide(v1, 2))(v1)))(u1), x)",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 56.28664495114006,
                "explored_percent_lambda": 31.85667752442997,
                "explored_percent_none": 11.856677524429967,
                "kept_percent_concrete": 59.063136456211815,
                "kept_percent_lambda": 40.936863543788185,
                "num_examples": 3,
                "num_explored_concrete": 864,
                "num_explored_lambda": 489,
                "num_explored_none": 182,
                "num_inputs": 1,
                "num_kept_concrete": 290,
                "num_kept_lambda": 201,
                "num_values_explored": 1535,
                "num_values_kept": 491,
                "temperature": 1.0,
                "total_num_restarts": 50,
                "total_num_values_explored": 157694
            },
            "success": true,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map(lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.2724216803908,
            "num_unique_values": 866,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.36363636363636,
                "explored_percent_lambda": 16.304023845007453,
                "explored_percent_none": 7.332339791356185,
                "kept_percent_concrete": 66.35514018691589,
                "kept_percent_lambda": 33.64485981308411,
                "num_examples": 3,
                "num_explored_concrete": 2562,
                "num_explored_lambda": 547,
                "num_explored_none": 246,
                "num_inputs": 2,
                "num_kept_concrete": 568,
                "num_kept_lambda": 288,
                "num_values_explored": 3355,
                "num_values_kept": 856,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 337102
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map(lambda u1: If(IsOdd(u1), Multiply(u1, n), u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(IsOdd(u1), Multiply(u1, n), u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.806962238624692,
            "num_unique_values": 507,
            "solution": "Filter(lambda u1: (lambda v1: Greater(v1, y))(u1), Scanl1(lambda u1, u2: (lambda v1: Max(y, v1))(u2), x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 57.88722341184868,
                "explored_percent_lambda": 26.837972876516773,
                "explored_percent_none": 15.274803711634547,
                "kept_percent_concrete": 67.00201207243461,
                "kept_percent_lambda": 32.99798792756539,
                "num_examples": 3,
                "num_explored_concrete": 811,
                "num_explored_lambda": 376,
                "num_explored_none": 214,
                "num_inputs": 2,
                "num_kept_concrete": 333,
                "num_kept_lambda": 164,
                "num_values_explored": 1401,
                "num_values_kept": 497,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1401
            },
            "success": true,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter(lambda u1: Greater(u1, y), x)'\n)",
            "task_solution": "Filter(lambda u1: Greater(u1, y), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.6241883058100939,
            "num_unique_values": 221,
            "solution": "Filter(lambda u1: (lambda v1: IsEven(v1))(u1), Sort(x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 26.034712950600802,
                "explored_percent_lambda": 55.14018691588785,
                "explored_percent_none": 18.82510013351135,
                "kept_percent_concrete": 40.56603773584906,
                "kept_percent_lambda": 59.43396226415094,
                "num_examples": 3,
                "num_explored_concrete": 195,
                "num_explored_lambda": 413,
                "num_explored_none": 141,
                "num_inputs": 1,
                "num_kept_concrete": 86,
                "num_kept_lambda": 126,
                "num_values_explored": 749,
                "num_values_kept": 212,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 749
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter(lambda u1: IsEven(u1), Sort(x))'\n)",
            "task_solution": "Filter(lambda u1: IsEven(u1), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.158022264018655,
            "num_unique_values": 456,
            "solution": "Maximum(Filter(lambda u1: (lambda v1: IsOdd(v1))(u1), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 47.752247752247754,
                "explored_percent_lambda": 36.863136863136866,
                "explored_percent_none": 15.384615384615385,
                "kept_percent_concrete": 66.44295302013423,
                "kept_percent_lambda": 33.557046979865774,
                "num_examples": 5,
                "num_explored_concrete": 478,
                "num_explored_lambda": 369,
                "num_explored_none": 154,
                "num_inputs": 1,
                "num_kept_concrete": 297,
                "num_kept_lambda": 150,
                "num_values_explored": 1001,
                "num_values_kept": 447,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1001
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter(lambda u1: IsOdd(u1), x))'\n)",
            "task_solution": "Maximum(Filter(lambda u1: IsOdd(u1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.759776309132576,
            "num_unique_values": 516,
            "solution": "Filter(lambda u1: (lambda v1: Less(v1, 0))(u1), Filter(lambda u1: (lambda v1: IsOdd(v1))(u1), x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 47.66429136975455,
                "explored_percent_lambda": 38.79651623119557,
                "explored_percent_none": 13.539192399049881,
                "kept_percent_concrete": 61.93293885601578,
                "kept_percent_lambda": 38.06706114398422,
                "num_examples": 3,
                "num_explored_concrete": 602,
                "num_explored_lambda": 490,
                "num_explored_none": 171,
                "num_inputs": 1,
                "num_kept_concrete": 314,
                "num_kept_lambda": 193,
                "num_values_explored": 1263,
                "num_values_kept": 507,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1263
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter(lambda u1: IsOdd(Min(u1, 0)), x)'\n)",
            "task_solution": "Filter(lambda u1: IsOdd(Min(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.9363183919340372,
            "num_unique_values": 492,
            "solution": "Sum(Filter(lambda u1: (lambda v1: Greater(v1, 0))(u1), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 53.52272727272727,
                "explored_percent_lambda": 38.06818181818182,
                "explored_percent_none": 8.409090909090908,
                "kept_percent_concrete": 64.80331262939958,
                "kept_percent_lambda": 35.196687370600415,
                "num_examples": 5,
                "num_explored_concrete": 471,
                "num_explored_lambda": 335,
                "num_explored_none": 74,
                "num_inputs": 1,
                "num_kept_concrete": 313,
                "num_kept_lambda": 170,
                "num_values_explored": 880,
                "num_values_kept": 483,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 880
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter(lambda u1: Greater(u1, 0), x))'\n)",
            "task_solution": "Sum(Filter(lambda u1: Greater(u1, 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.264405420050025,
            "num_unique_values": 468,
            "solution": "Reverse(Take(-1, Filter(lambda u1: (lambda v1: Greater(4, v1))(u1), Sort(x))))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 50.67829457364341,
                "explored_percent_lambda": 40.213178294573645,
                "explored_percent_none": 9.108527131782946,
                "kept_percent_concrete": 61.87363834422658,
                "kept_percent_lambda": 38.12636165577342,
                "num_examples": 3,
                "num_explored_concrete": 523,
                "num_explored_lambda": 415,
                "num_explored_none": 94,
                "num_inputs": 1,
                "num_kept_concrete": 284,
                "num_kept_lambda": 175,
                "num_values_explored": 1032,
                "num_values_kept": 459,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1032
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter(lambda u1: Less(u1, 0), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter(lambda u1: Less(u1, 0), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 64.74721276760101,
            "num_unique_values": 771,
            "solution": "Filter(lambda u1: (lambda v1: Greater(b, v1))(u1), Filter(lambda u1: (lambda v1: Greater(v1, a))(u1), x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 66.51911468812877,
                "explored_percent_lambda": 20.482897384305836,
                "explored_percent_none": 12.997987927565392,
                "kept_percent_concrete": 70.92105263157895,
                "kept_percent_lambda": 29.07894736842105,
                "num_examples": 3,
                "num_explored_concrete": 1653,
                "num_explored_lambda": 509,
                "num_explored_none": 323,
                "num_inputs": 3,
                "num_kept_concrete": 539,
                "num_kept_lambda": 221,
                "num_values_explored": 2485,
                "num_values_kept": 760,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 34085
            },
            "success": true,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter(lambda u1: Less(u1, b), Filter(lambda u1: Greater(u1, a), x))'\n)",
            "task_solution": "Filter(lambda u1: Less(u1, b), Filter(lambda u1: Greater(u1, a), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.5353295169771,
            "num_unique_values": 983,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.26984126984127,
                "explored_percent_lambda": 22.666666666666668,
                "explored_percent_none": 8.063492063492063,
                "kept_percent_concrete": 64.74820143884892,
                "kept_percent_lambda": 35.25179856115108,
                "num_examples": 3,
                "num_explored_concrete": 2182,
                "num_explored_lambda": 714,
                "num_explored_none": 254,
                "num_inputs": 2,
                "num_kept_concrete": 630,
                "num_kept_lambda": 343,
                "num_values_explored": 3150,
                "num_values_kept": 973,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 316406
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter(lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n)), x)'\n)",
            "task_solution": "Filter(lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.768695153296,
            "num_unique_values": 981,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.30151415404872,
                "explored_percent_lambda": 23.765635286372614,
                "explored_percent_none": 7.93285055957867,
                "kept_percent_concrete": 64.36663233779609,
                "kept_percent_lambda": 35.633367662203916,
                "num_examples": 3,
                "num_explored_concrete": 2075,
                "num_explored_lambda": 722,
                "num_explored_none": 241,
                "num_inputs": 2,
                "num_kept_concrete": 625,
                "num_kept_lambda": 346,
                "num_values_explored": 3038,
                "num_values_kept": 971,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 304644
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter(lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1)), x)'\n)",
            "task_solution": "Filter(lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.6429264042526,
            "num_unique_values": 952,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.06140640475404,
                "explored_percent_lambda": 29.877847474413997,
                "explored_percent_none": 4.060746120831958,
                "kept_percent_concrete": 58.21845174973489,
                "kept_percent_lambda": 41.78154825026511,
                "num_examples": 3,
                "num_explored_concrete": 2001,
                "num_explored_lambda": 905,
                "num_explored_none": 123,
                "num_inputs": 1,
                "num_kept_concrete": 549,
                "num_kept_lambda": 394,
                "num_values_explored": 3029,
                "num_values_kept": 943,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 305236
            },
            "success": false,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter(lambda u1: Equal(u1, Access(u1, x)), x))'\n)",
            "task_solution": "Sort(Filter(lambda u1: Equal(u1, Access(u1, x)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.6706672441214,
            "num_unique_values": 997,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.66666666666667,
                "explored_percent_lambda": 21.833333333333332,
                "explored_percent_none": 11.5,
                "kept_percent_concrete": 66.63286004056795,
                "kept_percent_lambda": 33.36713995943205,
                "num_examples": 3,
                "num_explored_concrete": 2000,
                "num_explored_lambda": 655,
                "num_explored_none": 345,
                "num_inputs": 3,
                "num_kept_concrete": 657,
                "num_kept_lambda": 329,
                "num_values_explored": 3000,
                "num_values_kept": 986,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 303786
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter(lambda u1: Equal(Access(u1, x), y), i)'\n)",
            "task_solution": "Filter(lambda u1: Equal(Access(u1, x), y), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 164.16459139622748,
            "num_unique_values": 232,
            "solution": "Count(lambda u1: (lambda v1: Equal(n, v1))(u1), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 32.45729303547963,
                "explored_percent_lambda": 32.06307490144547,
                "explored_percent_none": 35.4796320630749,
                "kept_percent_concrete": 63.06306306306306,
                "kept_percent_lambda": 36.93693693693694,
                "num_examples": 5,
                "num_explored_concrete": 247,
                "num_explored_lambda": 244,
                "num_explored_none": 270,
                "num_inputs": 2,
                "num_kept_concrete": 140,
                "num_kept_lambda": 82,
                "num_values_explored": 761,
                "num_values_kept": 222,
                "temperature": 1.0,
                "total_num_restarts": 28,
                "total_num_values_explored": 97047
            },
            "success": true,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count(lambda u1: Equal(u1, n), x)'\n)",
            "task_solution": "Count(lambda u1: Equal(u1, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.265636757016182,
            "num_unique_values": 243,
            "solution": "Count(lambda u1: (lambda v1: Less(v1, q))(u1), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 45.6828885400314,
                "explored_percent_lambda": 24.175824175824175,
                "explored_percent_none": 30.141287284144425,
                "kept_percent_concrete": 76.39484978540773,
                "kept_percent_lambda": 23.605150214592275,
                "num_examples": 5,
                "num_explored_concrete": 291,
                "num_explored_lambda": 154,
                "num_explored_none": 192,
                "num_inputs": 2,
                "num_kept_concrete": 178,
                "num_kept_lambda": 55,
                "num_values_explored": 637,
                "num_values_kept": 233,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 637
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count(lambda u1: Less(u1, q), x)'\n)",
            "task_solution": "Count(lambda u1: Less(u1, q), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 23.82782067731023,
            "num_unique_values": 1046,
            "solution": "Count(lambda u1: (lambda v1: Greater(Head(x), v1))(u1), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 73.02089930335656,
                "explored_percent_lambda": 17.764407853071564,
                "explored_percent_none": 9.21469284357188,
                "kept_percent_concrete": 77.72420443587271,
                "kept_percent_lambda": 22.27579556412729,
                "num_examples": 5,
                "num_explored_concrete": 2306,
                "num_explored_lambda": 561,
                "num_explored_none": 291,
                "num_inputs": 1,
                "num_kept_concrete": 806,
                "num_kept_lambda": 231,
                "num_values_explored": 3158,
                "num_values_kept": 1037,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 12634
            },
            "success": true,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count(lambda u1: Less(u1, Head(x)), x)'\n)",
            "task_solution": "Count(lambda u1: Less(u1, Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 14.447565417736769,
            "num_unique_values": 602,
            "solution": "Min(Maximum(Drop(4, x)), Count(lambda u1: (lambda v1: Less(v1, 1))(u1), x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 62.21153846153846,
                "explored_percent_lambda": 27.78846153846154,
                "explored_percent_none": 10.0,
                "kept_percent_concrete": 74.36762225969646,
                "kept_percent_lambda": 25.632377740303543,
                "num_examples": 5,
                "num_explored_concrete": 647,
                "num_explored_lambda": 289,
                "num_explored_none": 104,
                "num_inputs": 1,
                "num_kept_concrete": 441,
                "num_kept_lambda": 152,
                "num_values_explored": 1040,
                "num_values_kept": 593,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 7176
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count(lambda u1: Less(u1, 0), x)'\n)",
            "task_solution": "Count(lambda u1: Less(u1, 0), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 172.32837717607617,
            "num_unique_values": 800,
            "solution": "Count(lambda u1: (lambda v1: Equal(v1, Last(x)))(u1), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 62.81321184510251,
                "explored_percent_lambda": 25.22779043280182,
                "explored_percent_none": 11.958997722095672,
                "kept_percent_concrete": 74.58912768647282,
                "kept_percent_lambda": 25.410872313527182,
                "num_examples": 5,
                "num_explored_concrete": 1103,
                "num_explored_lambda": 443,
                "num_explored_none": 210,
                "num_inputs": 1,
                "num_kept_concrete": 590,
                "num_kept_lambda": 201,
                "num_values_explored": 1756,
                "num_values_kept": 791,
                "temperature": 1.0,
                "total_num_restarts": 29,
                "total_num_values_explored": 89156
            },
            "success": true,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count(lambda u1: Equal(u1, Last(x)), x)'\n)",
            "task_solution": "Count(lambda u1: Equal(u1, Last(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.6269256807864,
            "num_unique_values": 1149,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 84.05373831775701,
                "explored_percent_lambda": 9.667056074766355,
                "explored_percent_none": 6.279205607476635,
                "kept_percent_concrete": 83.9332748024583,
                "kept_percent_lambda": 16.066725197541704,
                "num_examples": 5,
                "num_explored_concrete": 2878,
                "num_explored_lambda": 331,
                "num_explored_none": 215,
                "num_inputs": 2,
                "num_kept_concrete": 956,
                "num_kept_lambda": 183,
                "num_values_explored": 3424,
                "num_values_kept": 1139,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 347779
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count(lambda u1: Equal(u1, Access(i, x)), x)'\n)",
            "task_solution": "Count(lambda u1: Equal(u1, Access(i, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 61.68308755196631,
            "num_unique_values": 238,
            "solution": "Count(lambda u1: (lambda v1: IsEven((lambda v1: Min(2, v1))(v1)))(u1), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 23.34384858044164,
                "explored_percent_lambda": 52.05047318611987,
                "explored_percent_none": 24.605678233438486,
                "kept_percent_concrete": 49.34497816593886,
                "kept_percent_lambda": 50.65502183406114,
                "num_examples": 5,
                "num_explored_concrete": 148,
                "num_explored_lambda": 330,
                "num_explored_none": 156,
                "num_inputs": 1,
                "num_kept_concrete": 113,
                "num_kept_lambda": 116,
                "num_values_explored": 634,
                "num_values_kept": 229,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 32473
            },
            "success": true,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count(lambda u1: IsEven(Min(u1, 0)), x)'\n)",
            "task_solution": "Count(lambda u1: IsEven(Min(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.8308020252734,
            "num_unique_values": 1289,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 79.19483712354025,
                "explored_percent_lambda": 15.580823601720958,
                "explored_percent_none": 5.224339274738783,
                "kept_percent_concrete": 78.34245504300235,
                "kept_percent_lambda": 21.657544956997654,
                "num_examples": 5,
                "num_explored_concrete": 2577,
                "num_explored_lambda": 507,
                "num_explored_none": 170,
                "num_inputs": 2,
                "num_kept_concrete": 1002,
                "num_kept_lambda": 277,
                "num_values_explored": 3254,
                "num_values_kept": 1279,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 322855
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count(lambda u1: Equal(u1, 0), x), Count(lambda u1: Equal(u1, 0), y))'\n)",
            "task_solution": "Add(Count(lambda u1: Equal(u1, 0), x), Count(lambda u1: Equal(u1, 0), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.140687186270952,
            "num_unique_values": 973,
            "solution": "Take(Count(lambda u1: (lambda v1: Less(0, v1))(u1), r), Sort(c))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 68.37606837606837,
                "explored_percent_lambda": 28.53072853072853,
                "explored_percent_none": 3.093203093203093,
                "kept_percent_concrete": 61.78608515057113,
                "kept_percent_lambda": 38.21391484942887,
                "num_examples": 3,
                "num_explored_concrete": 1680,
                "num_explored_lambda": 701,
                "num_explored_none": 76,
                "num_inputs": 2,
                "num_kept_concrete": 595,
                "num_kept_lambda": 368,
                "num_values_explored": 2457,
                "num_values_kept": 963,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 2457
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count(lambda u1: Greater(u1, 0), r), Sort(c))'\n)",
            "task_solution": "Take(Count(lambda u1: Greater(u1, 0), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 603.0336210355163,
            "num_unique_values": 1194,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.52107399313144,
                "explored_percent_lambda": 18.326568841710895,
                "explored_percent_none": 4.152357165157665,
                "kept_percent_concrete": 75.92905405405405,
                "kept_percent_lambda": 24.070945945945947,
                "num_examples": 5,
                "num_explored_concrete": 2483,
                "num_explored_lambda": 587,
                "num_explored_none": 133,
                "num_inputs": 2,
                "num_kept_concrete": 899,
                "num_kept_lambda": 285,
                "num_values_explored": 3203,
                "num_values_kept": 1184,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 313310
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith(lambda u1, u2: Add(Multiply(u1, 3), u2), w, t))'\n)",
            "task_solution": "Maximum(ZipWith(lambda u1, u2: Add(Multiply(u1, 3), u2), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.8659292310476,
            "num_unique_values": 1139,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 80.82018927444796,
                "explored_percent_lambda": 16.15141955835962,
                "explored_percent_none": 3.028391167192429,
                "kept_percent_concrete": 78.7422497785651,
                "kept_percent_lambda": 21.257750221434897,
                "num_examples": 5,
                "num_explored_concrete": 2562,
                "num_explored_lambda": 512,
                "num_explored_none": 96,
                "num_inputs": 2,
                "num_kept_concrete": 889,
                "num_kept_lambda": 240,
                "num_values_explored": 3170,
                "num_values_kept": 1129,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 321233
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.2746672928333282,
            "num_unique_values": 252,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Min(v1, v2))(u1, u2), a, Reverse(a))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 30.12295081967213,
                "explored_percent_lambda": 56.76229508196721,
                "explored_percent_none": 13.114754098360656,
                "kept_percent_concrete": 43.62139917695473,
                "kept_percent_lambda": 56.37860082304527,
                "num_examples": 3,
                "num_explored_concrete": 147,
                "num_explored_lambda": 277,
                "num_explored_none": 64,
                "num_inputs": 1,
                "num_kept_concrete": 106,
                "num_kept_lambda": 137,
                "num_values_explored": 488,
                "num_values_kept": 243,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 488
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith(lambda u1, u2: Min(u1, u2), a, Reverse(a))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Min(u1, u2), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 219.19032248482108,
            "num_unique_values": 567,
            "solution": "Subtract(Minimum(ZipWith(lambda u1, u2: (lambda v1, v2: Add(v1, v2))(u1, u2), p, t)), 2)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 57.818930041152264,
                "explored_percent_lambda": 32.818930041152264,
                "explored_percent_none": 9.362139917695472,
                "kept_percent_concrete": 68.76122082585279,
                "kept_percent_lambda": 31.23877917414722,
                "num_examples": 5,
                "num_explored_concrete": 562,
                "num_explored_lambda": 319,
                "num_explored_none": 91,
                "num_inputs": 2,
                "num_kept_concrete": 383,
                "num_kept_lambda": 174,
                "num_values_explored": 972,
                "num_values_kept": 557,
                "temperature": 1.0,
                "total_num_restarts": 37,
                "total_num_values_explored": 115920
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith(lambda u1, u2: Add(u1, u2), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith(lambda u1, u2: Add(u1, u2), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.4716337639838,
            "num_unique_values": 973,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.81396680022897,
                "explored_percent_lambda": 18.431597023468804,
                "explored_percent_none": 6.7544361763022325,
                "kept_percent_concrete": 74.1701244813278,
                "kept_percent_lambda": 25.8298755186722,
                "num_examples": 5,
                "num_explored_concrete": 2614,
                "num_explored_lambda": 644,
                "num_explored_none": 236,
                "num_inputs": 1,
                "num_kept_concrete": 715,
                "num_kept_lambda": 249,
                "num_values_explored": 3494,
                "num_values_kept": 964,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 347568
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith(lambda u1, u2: Max(Subtract(u1, u2), 0), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Max(Subtract(u1, u2), 0), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 13.978229492902756,
            "num_unique_values": 495,
            "solution": "Sum(ZipWith(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), x, y))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 51.31729667812142,
                "explored_percent_lambda": 34.936998854524624,
                "explored_percent_none": 13.745704467353951,
                "kept_percent_concrete": 64.5360824742268,
                "kept_percent_lambda": 35.4639175257732,
                "num_examples": 5,
                "num_explored_concrete": 448,
                "num_explored_lambda": 305,
                "num_explored_none": 120,
                "num_inputs": 2,
                "num_kept_concrete": 313,
                "num_kept_lambda": 172,
                "num_values_explored": 873,
                "num_values_kept": 485,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 7211
            },
            "success": true,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, y))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.9012550078332,
            "num_unique_values": 953,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.78467975539105,
                "explored_percent_lambda": 28.484068233022207,
                "explored_percent_none": 4.73125201158674,
                "kept_percent_concrete": 43.16012725344645,
                "kept_percent_lambda": 56.83987274655355,
                "num_examples": 3,
                "num_explored_concrete": 2075,
                "num_explored_lambda": 885,
                "num_explored_none": 147,
                "num_inputs": 2,
                "num_kept_concrete": 407,
                "num_kept_lambda": 536,
                "num_values_explored": 3107,
                "num_values_kept": 943,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 311278
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith(lambda u1, u2: IntDivide(Add(u1, u2), 2), x, y)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: IntDivide(Add(u1, u2), 2), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.6272479221225,
            "num_unique_values": 855,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.54669911773654,
                "explored_percent_lambda": 20.20079099482811,
                "explored_percent_none": 10.252509887435352,
                "kept_percent_concrete": 56.872037914691944,
                "kept_percent_lambda": 43.127962085308056,
                "num_examples": 3,
                "num_explored_concrete": 2286,
                "num_explored_lambda": 664,
                "num_explored_none": 337,
                "num_inputs": 3,
                "num_kept_concrete": 480,
                "num_kept_lambda": 364,
                "num_values_explored": 3287,
                "num_values_kept": 844,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 332731
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith(lambda u1, u2: Add(u1, u2), a, ZipWith(lambda u1, u2: Add(u1, u2), b, c))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Add(u1, u2), a, ZipWith(lambda u1, u2: Add(u1, u2), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.368737820535898,
            "num_unique_values": 485,
            "solution": "Sort(ZipWith(lambda u1, u2: (lambda v1, v2: IntDivide(v1, v2))(u1, u2), m, n))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 60.28547439126784,
                "explored_percent_lambda": 27.875734676742233,
                "explored_percent_none": 11.838790931989925,
                "kept_percent_concrete": 54.73684210526316,
                "kept_percent_lambda": 45.26315789473684,
                "num_examples": 3,
                "num_explored_concrete": 718,
                "num_explored_lambda": 332,
                "num_explored_none": 141,
                "num_inputs": 2,
                "num_kept_concrete": 260,
                "num_kept_lambda": 215,
                "num_values_explored": 1191,
                "num_values_kept": 475,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1191
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith(lambda u1, u2: IntDivide(u1, u2), m, n))'\n)",
            "task_solution": "Sort(ZipWith(lambda u1, u2: IntDivide(u1, u2), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 7.373194409534335,
            "num_unique_values": 255,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Subtract(v1, v2))(u2, u1), x, Drop(1, x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 33.65758754863813,
                "explored_percent_lambda": 50.38910505836576,
                "explored_percent_none": 15.95330739299611,
                "kept_percent_concrete": 47.15447154471545,
                "kept_percent_lambda": 52.84552845528455,
                "num_examples": 3,
                "num_explored_concrete": 173,
                "num_explored_lambda": 259,
                "num_explored_none": 82,
                "num_inputs": 1,
                "num_kept_concrete": 116,
                "num_kept_lambda": 130,
                "num_values_explored": 514,
                "num_values_kept": 246,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3660
            },
            "success": true,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith(lambda u1, u2: Subtract(u2, u1), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Subtract(u2, u1), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.5652042720467,
            "num_unique_values": 1183,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.17241379310344,
                "explored_percent_lambda": 18.808777429467085,
                "explored_percent_none": 6.018808777429467,
                "kept_percent_concrete": 78.60187553282182,
                "kept_percent_lambda": 21.398124467178175,
                "num_examples": 5,
                "num_explored_concrete": 2398,
                "num_explored_lambda": 600,
                "num_explored_none": 192,
                "num_inputs": 2,
                "num_kept_concrete": 922,
                "num_kept_lambda": 251,
                "num_values_explored": 3190,
                "num_values_kept": 1173,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 316520
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, m))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 603.0610801856965,
            "num_unique_values": 948,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.137799375216936,
                "explored_percent_lambda": 32.10690732384589,
                "explored_percent_none": 4.755293300937175,
                "kept_percent_concrete": 45.09594882729211,
                "kept_percent_lambda": 54.90405117270789,
                "num_examples": 3,
                "num_explored_concrete": 1819,
                "num_explored_lambda": 925,
                "num_explored_none": 137,
                "num_inputs": 2,
                "num_kept_concrete": 423,
                "num_kept_lambda": 515,
                "num_values_explored": 2881,
                "num_values_kept": 938,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 296906
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith(lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1)), x, y)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.8656612560153,
            "num_unique_values": 1051,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.76980661260137,
                "explored_percent_lambda": 18.558951965065503,
                "explored_percent_none": 8.671241422333125,
                "kept_percent_concrete": 76.94524495677233,
                "kept_percent_lambda": 23.054755043227665,
                "num_examples": 5,
                "num_explored_concrete": 2333,
                "num_explored_lambda": 595,
                "num_explored_none": 278,
                "num_inputs": 2,
                "num_kept_concrete": 801,
                "num_kept_lambda": 240,
                "num_values_explored": 3206,
                "num_values_kept": 1041,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 326165
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith(lambda u1, u2: Square(Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Square(Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 603.1006176397204,
            "num_unique_values": 909,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 47.302231237322516,
                "explored_percent_lambda": 35.05070993914807,
                "explored_percent_none": 17.647058823529413,
                "kept_percent_concrete": 45.272525027808676,
                "kept_percent_lambda": 54.727474972191324,
                "num_examples": 3,
                "num_explored_concrete": 1166,
                "num_explored_lambda": 864,
                "num_explored_none": 435,
                "num_inputs": 2,
                "num_kept_concrete": 407,
                "num_kept_lambda": 492,
                "num_values_explored": 2465,
                "num_values_kept": 899,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 261634
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith(lambda u1, u2: If(Equal(u1, u2), 1, 0), x, y)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: If(Equal(u1, u2), 1, 0), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 26.801422733813524,
            "num_unique_values": 537,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Min(v1, v2))(u1, u2), Sort(x), Sort(y))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 56.74822415153907,
                "explored_percent_lambda": 31.886345698500396,
                "explored_percent_none": 11.365430149960536,
                "kept_percent_concrete": 60.15180265654649,
                "kept_percent_lambda": 39.84819734345351,
                "num_examples": 3,
                "num_explored_concrete": 719,
                "num_explored_lambda": 404,
                "num_explored_none": 144,
                "num_inputs": 2,
                "num_kept_concrete": 317,
                "num_kept_lambda": 210,
                "num_values_explored": 1267,
                "num_values_kept": 527,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 14444
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith(lambda u1, u2: Min(u1, u2), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Min(u1, u2), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 97.93759422190487,
            "num_unique_values": 257,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Add(v1, v2))(u1, u2), x, Drop(Multiply(-1, 3), x))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 25.34562211981567,
                "explored_percent_lambda": 55.4531490015361,
                "explored_percent_none": 19.201228878648234,
                "kept_percent_concrete": 48.79032258064516,
                "kept_percent_lambda": 51.20967741935484,
                "num_examples": 3,
                "num_explored_concrete": 165,
                "num_explored_lambda": 361,
                "num_explored_none": 125,
                "num_inputs": 1,
                "num_kept_concrete": 121,
                "num_kept_lambda": 127,
                "num_values_explored": 651,
                "num_values_kept": 248,
                "temperature": 1.0,
                "total_num_restarts": 17,
                "total_num_values_explored": 50496
            },
            "success": true,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith(lambda u1, u2: Add(u1, u2), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Add(u1, u2), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 38.06882191635668,
            "num_unique_values": 462,
            "solution": "Maximum(ZipWith(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), x, Reverse(x)))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 52.4390243902439,
                "explored_percent_lambda": 38.90243902439025,
                "explored_percent_none": 8.658536585365853,
                "kept_percent_concrete": 64.23841059602648,
                "kept_percent_lambda": 35.76158940397351,
                "num_examples": 5,
                "num_explored_concrete": 430,
                "num_explored_lambda": 319,
                "num_explored_none": 71,
                "num_inputs": 1,
                "num_kept_concrete": 291,
                "num_kept_lambda": 162,
                "num_values_explored": 820,
                "num_values_kept": 453,
                "temperature": 1.0,
                "total_num_restarts": 7,
                "total_num_values_explored": 20020
            },
            "success": true,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.9461064748466,
            "num_unique_values": 896,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.43000773395205,
                "explored_percent_lambda": 36.07888631090487,
                "explored_percent_none": 5.4911059551430785,
                "kept_percent_concrete": 38.1489841986456,
                "kept_percent_lambda": 61.8510158013544,
                "num_examples": 3,
                "num_explored_concrete": 1511,
                "num_explored_lambda": 933,
                "num_explored_none": 142,
                "num_inputs": 2,
                "num_kept_concrete": 338,
                "num_kept_lambda": 548,
                "num_values_explored": 2586,
                "num_values_kept": 886,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 269519
            },
            "success": false,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith(lambda u1, u2: Multiply(u1, Add(1, u2)), p, w)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Multiply(u1, Add(1, u2)), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.9368166122586,
            "num_unique_values": 1171,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 79.84756097560975,
                "explored_percent_lambda": 16.676829268292682,
                "explored_percent_none": 3.475609756097561,
                "kept_percent_concrete": 78.91566265060241,
                "kept_percent_lambda": 21.08433734939759,
                "num_examples": 5,
                "num_explored_concrete": 2619,
                "num_explored_lambda": 547,
                "num_explored_none": 114,
                "num_inputs": 1,
                "num_kept_concrete": 917,
                "num_kept_lambda": 245,
                "num_values_explored": 3280,
                "num_values_kept": 1162,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 323294
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1(lambda u1, u2: Min(u1, u2), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1(lambda u1, u2: Min(u1, u2), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 327.02197400666773,
            "num_unique_values": 267,
            "solution": "Scanl1(lambda u1, u2: (lambda v1, v2: Max(v1, v2))(u2, u1), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 31.782945736434108,
                "explored_percent_lambda": 53.87596899224806,
                "explored_percent_none": 14.34108527131783,
                "kept_percent_concrete": 44.18604651162791,
                "kept_percent_lambda": 55.81395348837209,
                "num_examples": 3,
                "num_explored_concrete": 164,
                "num_explored_lambda": 278,
                "num_explored_none": 74,
                "num_inputs": 1,
                "num_kept_concrete": 114,
                "num_kept_lambda": 144,
                "num_values_explored": 516,
                "num_values_kept": 258,
                "temperature": 1.0,
                "total_num_restarts": 55,
                "total_num_values_explored": 146390
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1(lambda u1, u2: Max(u1, u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Max(u1, u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 22.774686058983207,
            "num_unique_values": 1010,
            "solution": "Maximum(ZipWith(lambda u1, u2: (lambda v1: Sum((lambda v1: Take(v1, x))(v1)))(u2), x, Reverse(x)))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 76.19795758051846,
                "explored_percent_lambda": 19.442262372348782,
                "explored_percent_none": 4.359780047132757,
                "kept_percent_concrete": 74.72527472527473,
                "kept_percent_lambda": 25.274725274725274,
                "num_examples": 5,
                "num_explored_concrete": 1940,
                "num_explored_lambda": 495,
                "num_explored_none": 111,
                "num_inputs": 1,
                "num_kept_concrete": 748,
                "num_kept_lambda": 253,
                "num_values_explored": 2546,
                "num_values_kept": 1001,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 12399
            },
            "success": true,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1(lambda u1, u2: Add(u1, u2), x))'\n)",
            "task_solution": "Maximum(Scanl1(lambda u1, u2: Add(u1, u2), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 73.87376032210886,
            "num_unique_values": 267,
            "solution": "Scanl1(lambda u1, u2: (lambda v1, v2: Add(v1, v2))(u1, u2), Reverse(x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 24.701873935264054,
                "explored_percent_lambda": 55.5366269165247,
                "explored_percent_none": 19.761499148211243,
                "kept_percent_concrete": 41.86046511627907,
                "kept_percent_lambda": 58.13953488372093,
                "num_examples": 3,
                "num_explored_concrete": 145,
                "num_explored_lambda": 326,
                "num_explored_none": 116,
                "num_inputs": 1,
                "num_kept_concrete": 108,
                "num_kept_lambda": 150,
                "num_values_explored": 587,
                "num_values_kept": 258,
                "temperature": 1.0,
                "total_num_restarts": 13,
                "total_num_values_explored": 33038
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1(lambda u1, u2: Add(u1, u2), Reverse(x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(u1, u2), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.5939998999238,
            "num_unique_values": 917,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.30894028305143,
                "explored_percent_lambda": 30.10010355540214,
                "explored_percent_none": 4.590956161546427,
                "kept_percent_concrete": 49.669603524229075,
                "kept_percent_lambda": 50.330396475770925,
                "num_examples": 3,
                "num_explored_concrete": 1892,
                "num_explored_lambda": 872,
                "num_explored_none": 133,
                "num_inputs": 1,
                "num_kept_concrete": 451,
                "num_kept_lambda": 457,
                "num_values_explored": 2897,
                "num_values_kept": 908,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 289972
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1(lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2)), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.6383092962205,
            "num_unique_values": 883,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.25149700598803,
                "explored_percent_lambda": 17.335329341317365,
                "explored_percent_none": 8.41317365269461,
                "kept_percent_concrete": 67.12485681557847,
                "kept_percent_lambda": 32.87514318442153,
                "num_examples": 3,
                "num_explored_concrete": 2480,
                "num_explored_lambda": 579,
                "num_explored_none": 281,
                "num_inputs": 2,
                "num_kept_concrete": 586,
                "num_kept_lambda": 287,
                "num_values_explored": 3340,
                "num_values_kept": 873,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 338740
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1(lambda u1, u2: Add(Add(u1, u2), n), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(Add(u1, u2), n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.8220361154526,
            "num_unique_values": 927,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.89443115818244,
                "explored_percent_lambda": 29.313290058079946,
                "explored_percent_none": 3.7922787837376153,
                "kept_percent_concrete": 49.891067538126364,
                "kept_percent_lambda": 50.108932461873636,
                "num_examples": 3,
                "num_explored_concrete": 1958,
                "num_explored_lambda": 858,
                "num_explored_none": 111,
                "num_inputs": 1,
                "num_kept_concrete": 458,
                "num_kept_lambda": 460,
                "num_values_explored": 2927,
                "num_values_kept": 918,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 286512
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1(lambda u1, u2: Add(IntDivide(u1, 2), u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(IntDivide(u1, 2), u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.8242311067879,
            "num_unique_values": 882,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.88015978695073,
                "explored_percent_lambda": 28.395472703062584,
                "explored_percent_none": 6.724367509986684,
                "kept_percent_concrete": 54.12844036697248,
                "kept_percent_lambda": 45.87155963302752,
                "num_examples": 3,
                "num_explored_concrete": 1949,
                "num_explored_lambda": 853,
                "num_explored_none": 202,
                "num_inputs": 2,
                "num_kept_concrete": 472,
                "num_kept_lambda": 400,
                "num_values_explored": 3004,
                "num_values_kept": 872,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 313931
            },
            "success": false,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1(lambda u1, u2: Multiply(u1, u2), Take(n, x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Multiply(u1, u2), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.9655465818941593,
            "num_unique_values": 410,
            "solution": "Last(Scanl1(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 47.350620067643746,
                "explored_percent_lambda": 39.00789177001128,
                "explored_percent_none": 13.641488162344983,
                "kept_percent_concrete": 63.84039900249377,
                "kept_percent_lambda": 36.15960099750623,
                "num_examples": 5,
                "num_explored_concrete": 420,
                "num_explored_lambda": 346,
                "num_explored_none": 121,
                "num_inputs": 1,
                "num_kept_concrete": 256,
                "num_kept_lambda": 145,
                "num_values_explored": 887,
                "num_values_kept": 401,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 887
            },
            "success": true,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1(lambda u1, u2: Multiply(u1, u2), x))'\n)",
            "task_solution": "Last(Scanl1(lambda u1, u2: Multiply(u1, u2), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.5856717303395,
            "num_unique_values": 929,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.762953367875646,
                "explored_percent_lambda": 32.25388601036269,
                "explored_percent_none": 3.983160621761658,
                "kept_percent_concrete": 52.17391304347826,
                "kept_percent_lambda": 47.82608695652174,
                "num_examples": 3,
                "num_explored_concrete": 1969,
                "num_explored_lambda": 996,
                "num_explored_none": 123,
                "num_inputs": 1,
                "num_kept_concrete": 480,
                "num_kept_lambda": 440,
                "num_values_explored": 3088,
                "num_values_kept": 920,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 306800
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1(lambda u1, u2: Min(u1, u2), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Min(u1, u2), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.9503643680364,
            "num_unique_values": 943,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.16693265240983,
                "explored_percent_lambda": 26.268751994893073,
                "explored_percent_none": 4.564315352697095,
                "kept_percent_concrete": 51.71306209850107,
                "kept_percent_lambda": 48.28693790149893,
                "num_examples": 3,
                "num_explored_concrete": 2167,
                "num_explored_lambda": 823,
                "num_explored_none": 143,
                "num_inputs": 1,
                "num_kept_concrete": 483,
                "num_kept_lambda": 451,
                "num_values_explored": 3133,
                "num_values_kept": 934,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 309582
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1(lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 43.61154986359179,
            "num_unique_values": 266,
            "solution": "Scanl1(lambda u1, u2: (lambda v1: Access(v1, x))(u1), Map(lambda u1: Head(x), x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 29.82456140350877,
                "explored_percent_lambda": 54.97076023391813,
                "explored_percent_none": 15.2046783625731,
                "kept_percent_concrete": 40.07782101167315,
                "kept_percent_lambda": 59.92217898832685,
                "num_examples": 3,
                "num_explored_concrete": 153,
                "num_explored_lambda": 282,
                "num_explored_none": 78,
                "num_inputs": 1,
                "num_kept_concrete": 103,
                "num_kept_lambda": 154,
                "num_values_explored": 513,
                "num_values_kept": 257,
                "temperature": 1.0,
                "total_num_restarts": 8,
                "total_num_values_explored": 18649
            },
            "success": true,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1(lambda u1, u2: Access(u1, x), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Access(u1, x), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 399.0210363138467,
            "num_unique_values": 257,
            "solution": "Scanl1(lambda u1, u2: (lambda v1, v2: Max(v1, (lambda v1: Subtract(v1, -1))(v2)))(u2, u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 30.1994301994302,
                "explored_percent_lambda": 50.85470085470085,
                "explored_percent_none": 18.945868945868945,
                "kept_percent_concrete": 51.20967741935484,
                "kept_percent_lambda": 48.79032258064516,
                "num_examples": 3,
                "num_explored_concrete": 212,
                "num_explored_lambda": 357,
                "num_explored_none": 133,
                "num_inputs": 1,
                "num_kept_concrete": 127,
                "num_kept_lambda": 121,
                "num_values_explored": 702,
                "num_values_kept": 248,
                "temperature": 1.0,
                "total_num_restarts": 67,
                "total_num_values_explored": 216197
            },
            "success": true,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1(lambda u1, u2: Max(Add(u1, 1), u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Max(Add(u1, 1), u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.8674774244428,
            "num_unique_values": 958,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.04576825281511,
                "explored_percent_lambda": 34.94369778423538,
                "explored_percent_none": 7.01053396294951,
                "kept_percent_concrete": 45.521601685985246,
                "kept_percent_lambda": 54.478398314014754,
                "num_examples": 3,
                "num_explored_concrete": 1598,
                "num_explored_lambda": 962,
                "num_explored_none": 193,
                "num_inputs": 1,
                "num_kept_concrete": 432,
                "num_kept_lambda": 517,
                "num_values_explored": 2753,
                "num_values_kept": 949,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 283722
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1(lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 603.0412941724062,
            "num_unique_values": 1174,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.42424242424242,
                "explored_percent_lambda": 14.636363636363637,
                "explored_percent_none": 6.9393939393939394,
                "kept_percent_concrete": 78.6082474226804,
                "kept_percent_lambda": 21.391752577319586,
                "num_examples": 5,
                "num_explored_concrete": 2588,
                "num_explored_lambda": 483,
                "num_explored_none": 229,
                "num_inputs": 2,
                "num_kept_concrete": 915,
                "num_kept_lambda": 249,
                "num_values_explored": 3300,
                "num_values_kept": 1164,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 330917
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count(lambda u1: Greater(u1, 0), ZipWith(lambda u1, u2: Subtract(u1, u2), a, b))'\n)",
            "task_solution": "Count(lambda u1: Greater(u1, 0), ZipWith(lambda u1, u2: Subtract(u1, u2), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.8294532038271,
            "num_unique_values": 1115,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 81.70695314831394,
                "explored_percent_lambda": 15.189495672933452,
                "explored_percent_none": 3.1035511787526113,
                "kept_percent_concrete": 79.81900452488688,
                "kept_percent_lambda": 20.18099547511312,
                "num_examples": 5,
                "num_explored_concrete": 2738,
                "num_explored_lambda": 509,
                "num_explored_none": 104,
                "num_inputs": 2,
                "num_kept_concrete": 882,
                "num_kept_lambda": 223,
                "num_values_explored": 3351,
                "num_values_kept": 1105,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 336326
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), s, Scanl1(lambda u1, u2: Add(u1, u2), p)))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), s, Scanl1(lambda u1, u2: Add(u1, u2), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.6463885381817818,
            "num_unique_values": 253,
            "solution": "Scanl1(lambda u1, u2: (lambda v1: Subtract(v1, -1))(u1), Map(lambda u1: 0, x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 25.28735632183908,
                "explored_percent_lambda": 51.58045977011494,
                "explored_percent_none": 23.132183908045977,
                "kept_percent_concrete": 43.442622950819676,
                "kept_percent_lambda": 56.557377049180324,
                "num_examples": 3,
                "num_explored_concrete": 176,
                "num_explored_lambda": 359,
                "num_explored_none": 161,
                "num_inputs": 1,
                "num_kept_concrete": 106,
                "num_kept_lambda": 138,
                "num_values_explored": 696,
                "num_values_kept": 244,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 696
            },
            "success": true,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1(lambda u1, u2: Add(u1, 1), Map(lambda u1: 0, x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(u1, 1), Map(lambda u1: 0, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.5755341686308,
            "num_unique_values": 969,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.97581980788341,
                "explored_percent_lambda": 27.393176548526004,
                "explored_percent_none": 5.631003643590593,
                "kept_percent_concrete": 61.145833333333336,
                "kept_percent_lambda": 38.854166666666664,
                "num_examples": 3,
                "num_explored_concrete": 2022,
                "num_explored_lambda": 827,
                "num_explored_none": 170,
                "num_inputs": 1,
                "num_kept_concrete": 587,
                "num_kept_lambda": 373,
                "num_values_explored": 3019,
                "num_values_kept": 960,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 312986
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter(lambda u1: IsOdd(u1), ZipWith(lambda u1, u2: Multiply(u2, u1), x, Drop(1, x)))'\n)",
            "task_solution": "Filter(lambda u1: IsOdd(u1), ZipWith(lambda u1, u2: Multiply(u2, u1), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 99.28140101209283,
            "num_unique_values": 549,
            "solution": "Scanl1(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), Filter(lambda u1: (lambda v1: IsOdd(v1))(u1), x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 54.94252873563219,
                "explored_percent_lambda": 37.241379310344826,
                "explored_percent_none": 7.816091954022989,
                "kept_percent_concrete": 55.0,
                "kept_percent_lambda": 45.0,
                "num_examples": 3,
                "num_explored_concrete": 717,
                "num_explored_lambda": 486,
                "num_explored_none": 102,
                "num_inputs": 1,
                "num_kept_concrete": 297,
                "num_kept_lambda": 243,
                "num_values_explored": 1305,
                "num_values_kept": 540,
                "temperature": 1.0,
                "total_num_restarts": 17,
                "total_num_values_explored": 49013
            },
            "success": true,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1(lambda u1, u2: Multiply(u1, u2), Filter(lambda u1: IsOdd(u1), x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Multiply(u1, u2), Filter(lambda u1: IsOdd(u1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.5741219352931,
            "num_unique_values": 905,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.23667252489749,
                "explored_percent_lambda": 17.60398359695372,
                "explored_percent_none": 4.159343878148799,
                "kept_percent_concrete": 61.340782122905026,
                "kept_percent_lambda": 38.659217877094974,
                "num_examples": 3,
                "num_explored_concrete": 2671,
                "num_explored_lambda": 601,
                "num_explored_none": 142,
                "num_inputs": 2,
                "num_kept_concrete": 549,
                "num_kept_lambda": 346,
                "num_values_explored": 3414,
                "num_values_kept": 895,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 339795
            },
            "success": false,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1(lambda u1, u2: Add(u1, u2), ZipWith(lambda u1, u2: Add(u1, u2), x, y))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(u1, u2), ZipWith(lambda u1, u2: Add(u1, u2), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.7785421051085,
            "num_unique_values": 898,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.91863995142684,
                "explored_percent_lambda": 19.429265330904673,
                "explored_percent_none": 8.652094717668488,
                "kept_percent_concrete": 60.76662908680947,
                "kept_percent_lambda": 39.23337091319053,
                "num_examples": 3,
                "num_explored_concrete": 2369,
                "num_explored_lambda": 640,
                "num_explored_none": 285,
                "num_inputs": 3,
                "num_kept_concrete": 539,
                "num_kept_lambda": 348,
                "num_values_explored": 3294,
                "num_values_kept": 887,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 329789
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith(lambda u1, u2: Add(u1, u2), x, Map(lambda u1: Access(u1, y), i))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Add(u1, u2), x, Map(lambda u1: Access(u1, y), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 603.0682403091341,
            "num_unique_values": 1081,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.46081909061593,
                "explored_percent_lambda": 25.28216704288939,
                "explored_percent_none": 3.2570138664946793,
                "kept_percent_concrete": 65.26610644257703,
                "kept_percent_lambda": 34.73389355742297,
                "num_examples": 3,
                "num_explored_concrete": 2216,
                "num_explored_lambda": 784,
                "num_explored_none": 101,
                "num_inputs": 2,
                "num_kept_concrete": 699,
                "num_kept_lambda": 372,
                "num_values_explored": 3101,
                "num_values_kept": 1071,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 305232
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter(lambda u1: Greater(u1, -1), ZipWith(lambda u1, u2: Subtract(u1, u2), x, y))'\n)",
            "task_solution": "Filter(lambda u1: Greater(u1, -1), ZipWith(lambda u1, u2: Subtract(u1, u2), x, y))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.64
}