{
    "num_tasks": 100,
    "num_tasks_solved": 67,
    "results": [
        {
            "elapsed_time": 8.210230730473995,
            "num_unique_values": 492,
            "solution": "Sum(Reverse(Take(k, Sort(b))))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 59.61538461538461,
                "explored_percent_lambda": 23.365384615384617,
                "explored_percent_none": 17.01923076923077,
                "kept_percent_concrete": 77.17842323651452,
                "kept_percent_lambda": 22.821576763485478,
                "num_examples": 5,
                "num_explored_concrete": 620,
                "num_explored_lambda": 243,
                "num_explored_none": 177,
                "num_inputs": 2,
                "num_kept_concrete": 372,
                "num_kept_lambda": 110,
                "num_values_explored": 1040,
                "num_values_kept": 482,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4005
            },
            "success": true,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.315748032182455,
            "num_unique_values": 223,
            "solution": "If(IsEven(x), IntDivide(x, 2), Subtract(Multiply(x, 3), -1))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 39.08313908313908,
                "explored_percent_lambda": 10.45066045066045,
                "explored_percent_none": 50.46620046620047,
                "kept_percent_concrete": 85.04672897196262,
                "kept_percent_lambda": 14.953271028037383,
                "num_examples": 5,
                "num_explored_concrete": 1006,
                "num_explored_lambda": 269,
                "num_explored_none": 1299,
                "num_inputs": 1,
                "num_kept_concrete": 182,
                "num_kept_lambda": 32,
                "num_values_explored": 2574,
                "num_values_kept": 214,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 2574
            },
            "success": true,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 81.34092439338565,
            "num_unique_values": 155,
            "solution": "Subtract(Multiply(x, Add(y, -1)), y)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 22.391857506361323,
                "explored_percent_lambda": 9.974554707379134,
                "explored_percent_none": 67.63358778625954,
                "kept_percent_concrete": 88.96551724137932,
                "kept_percent_lambda": 11.03448275862069,
                "num_examples": 5,
                "num_explored_concrete": 440,
                "num_explored_lambda": 196,
                "num_explored_none": 1329,
                "num_inputs": 2,
                "num_kept_concrete": 129,
                "num_kept_lambda": 16,
                "num_values_explored": 1965,
                "num_values_kept": 145,
                "temperature": 1.0,
                "total_num_restarts": 14,
                "total_num_values_explored": 50542
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.214152216911316,
            "num_unique_values": 156,
            "solution": "Multiply(k, IntDivide(Add(k, x), k))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 21.535291087068522,
                "explored_percent_lambda": 9.222050489438434,
                "explored_percent_none": 69.24265842349304,
                "kept_percent_concrete": 91.78082191780823,
                "kept_percent_lambda": 8.219178082191782,
                "num_examples": 5,
                "num_explored_concrete": 418,
                "num_explored_lambda": 179,
                "num_explored_none": 1344,
                "num_inputs": 2,
                "num_kept_concrete": 134,
                "num_kept_lambda": 12,
                "num_values_explored": 1941,
                "num_values_kept": 146,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1941
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.6549207251518965,
            "num_unique_values": 417,
            "solution": "Take(Multiply(n, -1), x)",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 47.99357945425361,
                "explored_percent_lambda": 32.90529695024077,
                "explored_percent_none": 19.10112359550562,
                "kept_percent_concrete": 55.03685503685504,
                "kept_percent_lambda": 44.96314496314496,
                "num_examples": 3,
                "num_explored_concrete": 598,
                "num_explored_lambda": 410,
                "num_explored_none": 238,
                "num_inputs": 2,
                "num_kept_concrete": 224,
                "num_kept_lambda": 183,
                "num_values_explored": 1246,
                "num_values_kept": 407,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1246
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.5831538792699575,
            "num_unique_values": 470,
            "solution": "Reverse(Sort(Drop(Multiply(n, -1), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 48.2098251457119,
                "explored_percent_lambda": 35.97002497918401,
                "explored_percent_none": 15.82014987510408,
                "kept_percent_concrete": 57.82608695652174,
                "kept_percent_lambda": 42.17391304347826,
                "num_examples": 3,
                "num_explored_concrete": 579,
                "num_explored_lambda": 432,
                "num_explored_none": 190,
                "num_inputs": 2,
                "num_kept_concrete": 266,
                "num_kept_lambda": 194,
                "num_values_explored": 1201,
                "num_values_kept": 460,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1201
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.0165146309882402,
            "num_unique_values": 157,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 10.674157303370787,
                "explored_percent_lambda": 69.9438202247191,
                "explored_percent_none": 19.382022471910112,
                "kept_percent_concrete": 19.594594594594593,
                "kept_percent_lambda": 80.4054054054054,
                "num_examples": 3,
                "num_explored_concrete": 38,
                "num_explored_lambda": 249,
                "num_explored_none": 69,
                "num_inputs": 1,
                "num_kept_concrete": 29,
                "num_kept_lambda": 119,
                "num_values_explored": 356,
                "num_values_kept": 148,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 356
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.9008821919560432,
            "num_unique_values": 159,
            "solution": "Drop(i, Take(j, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 24.739583333333332,
                "explored_percent_lambda": 51.302083333333336,
                "explored_percent_none": 23.958333333333332,
                "kept_percent_concrete": 38.513513513513516,
                "kept_percent_lambda": 61.486486486486484,
                "num_examples": 3,
                "num_explored_concrete": 95,
                "num_explored_lambda": 197,
                "num_explored_none": 92,
                "num_inputs": 3,
                "num_kept_concrete": 57,
                "num_kept_lambda": 91,
                "num_values_explored": 384,
                "num_values_kept": 148,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 384
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.6720827501267195,
            "num_unique_values": 466,
            "solution": "Reverse(Drop(Multiply(k, -1), Sort(Take(Square(k), x))))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 52.72585669781932,
                "explored_percent_lambda": 35.74766355140187,
                "explored_percent_none": 11.526479750778817,
                "kept_percent_concrete": 58.771929824561404,
                "kept_percent_lambda": 41.228070175438596,
                "num_examples": 3,
                "num_explored_concrete": 677,
                "num_explored_lambda": 459,
                "num_explored_none": 148,
                "num_inputs": 2,
                "num_kept_concrete": 268,
                "num_kept_lambda": 188,
                "num_values_explored": 1284,
                "num_values_kept": 456,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1284
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 8.143682157620788,
            "num_unique_values": 452,
            "solution": "Minimum(Drop(Subtract(-1, k), Sort(x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 54.989384288747345,
                "explored_percent_lambda": 25.05307855626327,
                "explored_percent_none": 19.957537154989385,
                "kept_percent_concrete": 76.01809954751131,
                "kept_percent_lambda": 23.981900452488688,
                "num_examples": 5,
                "num_explored_concrete": 518,
                "num_explored_lambda": 236,
                "num_explored_none": 188,
                "num_inputs": 2,
                "num_kept_concrete": 336,
                "num_kept_lambda": 106,
                "num_values_explored": 942,
                "num_values_kept": 442,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4319
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 32.04019228182733,
            "num_unique_values": 292,
            "solution": "IntDivide(Add(Last(x), Head(x)), 2)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 30.37037037037037,
                "explored_percent_lambda": 44.5679012345679,
                "explored_percent_none": 25.061728395061728,
                "kept_percent_concrete": 57.59717314487632,
                "kept_percent_lambda": 42.40282685512368,
                "num_examples": 5,
                "num_explored_concrete": 246,
                "num_explored_lambda": 361,
                "num_explored_none": 203,
                "num_inputs": 1,
                "num_kept_concrete": 163,
                "num_kept_lambda": 120,
                "num_values_explored": 810,
                "num_values_kept": 283,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 15946
            },
            "success": true,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.561028962954879,
            "num_unique_values": 462,
            "solution": "Maximum(Take(2, Sort(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 41.77339901477833,
                "explored_percent_lambda": 40.09852216748769,
                "explored_percent_none": 18.12807881773399,
                "kept_percent_concrete": 54.746136865342166,
                "kept_percent_lambda": 45.253863134657834,
                "num_examples": 5,
                "num_explored_concrete": 424,
                "num_explored_lambda": 407,
                "num_explored_none": 184,
                "num_inputs": 1,
                "num_kept_concrete": 248,
                "num_kept_lambda": 205,
                "num_values_explored": 1015,
                "num_values_kept": 453,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1015
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.190527070313692,
            "num_unique_values": 682,
            "solution": "Head(ZipWith(lambda u1, u2: (lambda v1: Subtract(Maximum(x), v1))(u2), x, Sort(x)))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 64.33408577878104,
                "explored_percent_lambda": 29.345372460496613,
                "explored_percent_none": 6.320541760722348,
                "kept_percent_concrete": 70.28231797919763,
                "kept_percent_lambda": 29.71768202080238,
                "num_examples": 5,
                "num_explored_concrete": 855,
                "num_explored_lambda": 390,
                "num_explored_none": 84,
                "num_inputs": 1,
                "num_kept_concrete": 473,
                "num_kept_lambda": 200,
                "num_values_explored": 1329,
                "num_values_kept": 673,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1329
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.4087954778224,
            "num_unique_values": 1031,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.74797800064704,
                "explored_percent_lambda": 17.76124231640246,
                "explored_percent_none": 13.490779682950501,
                "kept_percent_concrete": 76.98334965719883,
                "kept_percent_lambda": 23.016650342801174,
                "num_examples": 5,
                "num_explored_concrete": 2125,
                "num_explored_lambda": 549,
                "num_explored_none": 417,
                "num_inputs": 2,
                "num_kept_concrete": 786,
                "num_kept_lambda": 235,
                "num_values_explored": 3091,
                "num_values_kept": 1021,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 301850
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.3830669503659,
            "num_unique_values": 897,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.71278458844133,
                "explored_percent_lambda": 18.739054290718038,
                "explored_percent_none": 17.548161120840632,
                "kept_percent_concrete": 75.08455467869221,
                "kept_percent_lambda": 24.91544532130778,
                "num_examples": 5,
                "num_explored_concrete": 1819,
                "num_explored_lambda": 535,
                "num_explored_none": 501,
                "num_inputs": 2,
                "num_kept_concrete": 666,
                "num_kept_lambda": 221,
                "num_values_explored": 2855,
                "num_values_kept": 887,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 287103
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.2574651800096035,
            "num_unique_values": 496,
            "solution": "Map(lambda u1: (lambda v1: Multiply(v1, (lambda v1: Square(v1))(v1)))(u1), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 45.52023121387283,
                "explored_percent_lambda": 40.39017341040462,
                "explored_percent_none": 14.089595375722544,
                "kept_percent_concrete": 44.35318275154004,
                "kept_percent_lambda": 55.64681724845996,
                "num_examples": 3,
                "num_explored_concrete": 630,
                "num_explored_lambda": 559,
                "num_explored_none": 195,
                "num_inputs": 1,
                "num_kept_concrete": 216,
                "num_kept_lambda": 271,
                "num_values_explored": 1384,
                "num_values_kept": 487,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1384
            },
            "success": true,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map(lambda u1: Multiply(u1, Square(u1)), x)'\n)",
            "task_solution": "Map(lambda u1: Multiply(u1, Square(u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 164.45674676820636,
            "num_unique_values": 250,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Max(v1, (lambda v1: IntDivide(v1, -1))(v2)))(u1, u2), x, x)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 25.693430656934307,
                "explored_percent_lambda": 52.99270072992701,
                "explored_percent_none": 21.313868613138688,
                "kept_percent_concrete": 43.56846473029046,
                "kept_percent_lambda": 56.43153526970954,
                "num_examples": 3,
                "num_explored_concrete": 176,
                "num_explored_lambda": 363,
                "num_explored_none": 146,
                "num_inputs": 1,
                "num_kept_concrete": 105,
                "num_kept_lambda": 136,
                "num_values_explored": 685,
                "num_values_kept": 241,
                "temperature": 1.0,
                "total_num_restarts": 28,
                "total_num_values_explored": 77977
            },
            "success": true,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map(lambda u1: Max(u1, Subtract(0, u1)), x)'\n)",
            "task_solution": "Map(lambda u1: Max(u1, Subtract(0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 9.012292733415961,
            "num_unique_values": 533,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Subtract((lambda v1: Square(v1))(v1), v1))(u2), x, x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 51.699029126213595,
                "explored_percent_lambda": 37.702265372168284,
                "explored_percent_none": 10.598705501618124,
                "kept_percent_concrete": 45.80152671755725,
                "kept_percent_lambda": 54.19847328244275,
                "num_examples": 3,
                "num_explored_concrete": 639,
                "num_explored_lambda": 466,
                "num_explored_none": 131,
                "num_inputs": 1,
                "num_kept_concrete": 240,
                "num_kept_lambda": 284,
                "num_values_explored": 1236,
                "num_values_kept": 524,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3889
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map(lambda u1: Subtract(Square(u1), u1), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(Square(u1), u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.39803272672,
            "num_unique_values": 845,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.05707674508291,
                "explored_percent_lambda": 29.81102969533359,
                "explored_percent_none": 6.131893559583494,
                "kept_percent_concrete": 49.16267942583732,
                "kept_percent_lambda": 50.83732057416268,
                "num_examples": 3,
                "num_explored_concrete": 1661,
                "num_explored_lambda": 773,
                "num_explored_none": 159,
                "num_inputs": 1,
                "num_kept_concrete": 411,
                "num_kept_lambda": 425,
                "num_values_explored": 2593,
                "num_values_kept": 836,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 260262
            },
            "success": false,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map(lambda u1: IntDivide(Add(Square(u1), u1), 2), x)'\n)",
            "task_solution": "Map(lambda u1: IntDivide(Add(Square(u1), u1), 2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 69.36623742617667,
            "num_unique_values": 498,
            "solution": "Map(lambda u1: (lambda v1: Add(b, (lambda v1: Multiply(a, v1))(v1)))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 59.356913183279744,
                "explored_percent_lambda": 23.086816720257236,
                "explored_percent_none": 17.556270096463024,
                "kept_percent_concrete": 66.52977412731006,
                "kept_percent_lambda": 33.47022587268994,
                "num_examples": 3,
                "num_explored_concrete": 923,
                "num_explored_lambda": 359,
                "num_explored_none": 273,
                "num_inputs": 3,
                "num_kept_concrete": 324,
                "num_kept_lambda": 163,
                "num_values_explored": 1555,
                "num_values_kept": 487,
                "temperature": 1.0,
                "total_num_restarts": 12,
                "total_num_values_explored": 35523
            },
            "success": true,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map(lambda u1: Add(Multiply(a, u1), b), x)'\n)",
            "task_solution": "Map(lambda u1: Add(Multiply(a, u1), b), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 39.49138769507408,
            "num_unique_values": 535,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Subtract((lambda v1: Multiply(3, v1))(v1), 4))(u1), x, x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 57.67377838953888,
                "explored_percent_lambda": 32.14039917412251,
                "explored_percent_none": 10.18582243633861,
                "kept_percent_concrete": 54.94296577946768,
                "kept_percent_lambda": 45.05703422053232,
                "num_examples": 3,
                "num_explored_concrete": 838,
                "num_explored_lambda": 467,
                "num_explored_none": 148,
                "num_inputs": 1,
                "num_kept_concrete": 289,
                "num_kept_lambda": 237,
                "num_values_explored": 1453,
                "num_values_kept": 526,
                "temperature": 1.0,
                "total_num_restarts": 7,
                "total_num_values_explored": 18363
            },
            "success": true,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map(lambda u1: Subtract(Multiply(u1, 3), 4), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(Multiply(u1, 3), 4), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.7715179920196533,
            "num_unique_values": 505,
            "solution": "Map(lambda u1: (lambda v1: Multiply(v1, (lambda v1: Add(2, v1))(v1)))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 49.187725631768956,
                "explored_percent_lambda": 42.59927797833935,
                "explored_percent_none": 8.212996389891696,
                "kept_percent_concrete": 42.33870967741935,
                "kept_percent_lambda": 57.66129032258065,
                "num_examples": 3,
                "num_explored_concrete": 545,
                "num_explored_lambda": 472,
                "num_explored_none": 91,
                "num_inputs": 1,
                "num_kept_concrete": 210,
                "num_kept_lambda": 286,
                "num_values_explored": 1108,
                "num_values_kept": 496,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1108
            },
            "success": true,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map(lambda u1: Multiply(u1, Add(u1, 2)), x)'\n)",
            "task_solution": "Map(lambda u1: Multiply(u1, Add(u1, 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.6696316599845886,
            "num_unique_values": 253,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Max(a, (lambda v1: Min(b, v1))(v1)))(u1), x, x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 24.444444444444443,
                "explored_percent_lambda": 46.370370370370374,
                "explored_percent_none": 29.185185185185187,
                "kept_percent_concrete": 46.69421487603306,
                "kept_percent_lambda": 53.30578512396694,
                "num_examples": 3,
                "num_explored_concrete": 165,
                "num_explored_lambda": 313,
                "num_explored_none": 197,
                "num_inputs": 3,
                "num_kept_concrete": 113,
                "num_kept_lambda": 129,
                "num_values_explored": 675,
                "num_values_kept": 242,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 675
            },
            "success": true,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map(lambda u1: Max(Min(u1, b), a), x)'\n)",
            "task_solution": "Map(lambda u1: Max(Min(u1, b), a), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.4470348656178,
            "num_unique_values": 782,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.87662782727895,
                "explored_percent_lambda": 22.858122001370802,
                "explored_percent_none": 7.26525017135024,
                "kept_percent_concrete": 60.284605433376456,
                "kept_percent_lambda": 39.715394566623544,
                "num_examples": 3,
                "num_explored_concrete": 2039,
                "num_explored_lambda": 667,
                "num_explored_none": 212,
                "num_inputs": 1,
                "num_kept_concrete": 466,
                "num_kept_lambda": 307,
                "num_values_explored": 2918,
                "num_values_kept": 773,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 288480
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map(lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1)), x)'\n)",
            "task_solution": "Map(lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.223734652623534,
            "num_unique_values": 479,
            "solution": "Sort(Reverse(Map(lambda u1: (lambda v1: Square(v1))(u1), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 46.14825581395349,
                "explored_percent_lambda": 40.770348837209305,
                "explored_percent_none": 13.081395348837209,
                "kept_percent_concrete": 45.319148936170215,
                "kept_percent_lambda": 54.680851063829785,
                "num_examples": 3,
                "num_explored_concrete": 635,
                "num_explored_lambda": 561,
                "num_explored_none": 180,
                "num_inputs": 1,
                "num_kept_concrete": 213,
                "num_kept_lambda": 257,
                "num_values_explored": 1376,
                "num_values_kept": 470,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1376
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map(lambda u1: Square(u1), x))'\n)",
            "task_solution": "Sort(Map(lambda u1: Square(u1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 35.573736011981964,
            "num_unique_values": 820,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Subtract(v1, Minimum(x)))(u1), x, Reverse(Sort(x)))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 60.97770154373928,
                "explored_percent_lambda": 31.86106346483705,
                "explored_percent_none": 7.161234991423671,
                "kept_percent_concrete": 46.60912453760789,
                "kept_percent_lambda": 53.39087546239211,
                "num_examples": 3,
                "num_explored_concrete": 1422,
                "num_explored_lambda": 743,
                "num_explored_none": 167,
                "num_inputs": 1,
                "num_kept_concrete": 378,
                "num_kept_lambda": 433,
                "num_values_explored": 2332,
                "num_values_kept": 811,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 14731
            },
            "success": true,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map(lambda u1: Subtract(u1, Minimum(x)), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(u1, Minimum(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.662713086232543,
            "num_unique_values": 533,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Subtract(v1, Access(i, x)))(u1), x, x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 62.30182031708749,
                "explored_percent_lambda": 22.900763358778626,
                "explored_percent_none": 14.79741632413388,
                "kept_percent_concrete": 67.30401529636711,
                "kept_percent_lambda": 32.69598470363289,
                "num_examples": 3,
                "num_explored_concrete": 1061,
                "num_explored_lambda": 390,
                "num_explored_none": 252,
                "num_inputs": 2,
                "num_kept_concrete": 352,
                "num_kept_lambda": 171,
                "num_values_explored": 1703,
                "num_values_kept": 523,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1703
            },
            "success": true,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map(lambda u1: Subtract(u1, Access(i, x)), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(u1, Access(i, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.3777157664299,
            "num_unique_values": 864,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.06715701950752,
                "explored_percent_lambda": 20.562839782539175,
                "explored_percent_none": 9.37000319795331,
                "kept_percent_concrete": 64.75409836065573,
                "kept_percent_lambda": 35.24590163934426,
                "num_examples": 3,
                "num_explored_concrete": 2191,
                "num_explored_lambda": 643,
                "num_explored_none": 293,
                "num_inputs": 2,
                "num_kept_concrete": 553,
                "num_kept_lambda": 301,
                "num_values_explored": 3127,
                "num_values_kept": 854,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 307924
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map(lambda u1: Add(u1, Subtract(t, Head(x))), x)'\n)",
            "task_solution": "Map(lambda u1: Add(u1, Subtract(t, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 34.25075747072697,
            "num_unique_values": 751,
            "solution": "Reverse(Map(lambda u1: (lambda v1: Head((lambda v1: Drop(v1, x))(v1)))(u1), Reverse(i)))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 62.81299946723495,
                "explored_percent_lambda": 32.55194459243474,
                "explored_percent_none": 4.635055940330314,
                "kept_percent_concrete": 49.797570850202426,
                "kept_percent_lambda": 50.202429149797574,
                "num_examples": 3,
                "num_explored_concrete": 1179,
                "num_explored_lambda": 611,
                "num_explored_none": 87,
                "num_inputs": 2,
                "num_kept_concrete": 369,
                "num_kept_lambda": 372,
                "num_values_explored": 1877,
                "num_values_kept": 741,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 16000
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map(lambda u1: Access(u1, x), i)'\n)",
            "task_solution": "Map(lambda u1: Access(u1, x), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 26.03061769157648,
            "num_unique_values": 465,
            "solution": "Maximum(ZipWith(lambda u1, u2: (lambda v1: Access(v1, x))(u2), x, i))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 49.2772667542707,
                "explored_percent_lambda": 39.02759526938239,
                "explored_percent_none": 11.695137976346912,
                "kept_percent_concrete": 65.05494505494505,
                "kept_percent_lambda": 34.94505494505494,
                "num_examples": 5,
                "num_explored_concrete": 375,
                "num_explored_lambda": 297,
                "num_explored_none": 89,
                "num_inputs": 2,
                "num_kept_concrete": 296,
                "num_kept_lambda": 159,
                "num_values_explored": 761,
                "num_values_kept": 455,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 12798
            },
            "success": true,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map(lambda u1: Access(u1, x), i))'\n)",
            "task_solution": "Maximum(Map(lambda u1: Access(u1, x), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.2921507321298122,
            "num_unique_values": 252,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: If((lambda v1: IsEven(v1))(v2), v1, 0))(u1, u2), x, x)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 26.91511387163561,
                "explored_percent_lambda": 57.142857142857146,
                "explored_percent_none": 15.942028985507246,
                "kept_percent_concrete": 40.32921810699588,
                "kept_percent_lambda": 59.67078189300412,
                "num_examples": 3,
                "num_explored_concrete": 130,
                "num_explored_lambda": 276,
                "num_explored_none": 77,
                "num_inputs": 1,
                "num_kept_concrete": 98,
                "num_kept_lambda": 145,
                "num_values_explored": 483,
                "num_values_kept": 243,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 483
            },
            "success": true,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map(lambda u1: If(IsOdd(u1), 0, u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(IsOdd(u1), 0, u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 200.24273053742945,
            "num_unique_values": 216,
            "solution": "Map(lambda u1: (lambda v1: If((lambda v1: Equal(f, v1))(v1), r, v1))(u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 45.20856820744081,
                "explored_percent_lambda": 23.900789177001126,
                "explored_percent_none": 30.89064261555806,
                "kept_percent_concrete": 74.14634146341463,
                "kept_percent_lambda": 25.853658536585368,
                "num_examples": 3,
                "num_explored_concrete": 401,
                "num_explored_lambda": 212,
                "num_explored_none": 274,
                "num_inputs": 3,
                "num_kept_concrete": 152,
                "num_kept_lambda": 53,
                "num_values_explored": 887,
                "num_values_kept": 205,
                "temperature": 1.0,
                "total_num_restarts": 34,
                "total_num_values_explored": 104811
            },
            "success": true,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map(lambda u1: If(Equal(u1, f), r, u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(Equal(u1, f), r, u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.8792686592787504,
            "num_unique_values": 507,
            "solution": "Map(lambda u1: (lambda v1: If((lambda v1: Greater(2, v1))(v1), y, v1))(u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 50.1195219123506,
                "explored_percent_lambda": 37.37051792828685,
                "explored_percent_none": 12.50996015936255,
                "kept_percent_concrete": 48.89336016096579,
                "kept_percent_lambda": 51.10663983903421,
                "num_examples": 3,
                "num_explored_concrete": 629,
                "num_explored_lambda": 469,
                "num_explored_none": 157,
                "num_inputs": 2,
                "num_kept_concrete": 243,
                "num_kept_lambda": 254,
                "num_values_explored": 1255,
                "num_values_kept": 497,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1255
            },
            "success": true,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map(lambda u1: If(Less(u1, 0), y, u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(Less(u1, 0), y, u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.376136843115091,
            "num_unique_values": 797,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Add(v1, Last(x)))(u1), x, Drop(1, x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 70.11537030145143,
                "explored_percent_lambda": 22.813546706363976,
                "explored_percent_none": 7.071082992184593,
                "kept_percent_concrete": 60.40609137055838,
                "kept_percent_lambda": 39.59390862944162,
                "num_examples": 3,
                "num_explored_concrete": 1884,
                "num_explored_lambda": 613,
                "num_explored_none": 190,
                "num_inputs": 1,
                "num_kept_concrete": 476,
                "num_kept_lambda": 312,
                "num_values_explored": 2687,
                "num_values_kept": 788,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 2687
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map(lambda u1: Add(u1, Last(x)), x))'\n)",
            "task_solution": "Take(-1, Map(lambda u1: Add(u1, Last(x)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.5588504653424025,
            "num_unique_values": 217,
            "solution": "Map(lambda u1: Head(x), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 24.363057324840764,
                "explored_percent_lambda": 64.49044585987261,
                "explored_percent_none": 11.146496815286625,
                "kept_percent_concrete": 36.53846153846154,
                "kept_percent_lambda": 63.46153846153846,
                "num_examples": 3,
                "num_explored_concrete": 153,
                "num_explored_lambda": 405,
                "num_explored_none": 70,
                "num_inputs": 1,
                "num_kept_concrete": 76,
                "num_kept_lambda": 132,
                "num_values_explored": 628,
                "num_values_kept": 208,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 628
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map(lambda u1: Head(x), x)'\n)",
            "task_solution": "Map(lambda u1: Head(x), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.5080080218613148,
            "num_unique_values": 484,
            "solution": "Sum(Map(lambda u1: 1, x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 40.07123775601069,
                "explored_percent_lambda": 33.48174532502226,
                "explored_percent_none": 26.44701691896705,
                "kept_percent_concrete": 68.0,
                "kept_percent_lambda": 32.0,
                "num_examples": 5,
                "num_explored_concrete": 450,
                "num_explored_lambda": 376,
                "num_explored_none": 297,
                "num_inputs": 1,
                "num_kept_concrete": 323,
                "num_kept_lambda": 152,
                "num_values_explored": 1123,
                "num_values_kept": 475,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1123
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map(lambda u1: 1, x))'\n)",
            "task_solution": "Sum(Map(lambda u1: 1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 69.09915944747627,
            "num_unique_values": 600,
            "solution": "Min(Last(Take(-1, x)), Maximum(Take(4, Sort(Drop(1, x)))))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 55.251921434671225,
                "explored_percent_lambda": 32.450896669513234,
                "explored_percent_none": 12.297181895815543,
                "kept_percent_concrete": 70.55837563451777,
                "kept_percent_lambda": 29.441624365482234,
                "num_examples": 5,
                "num_explored_concrete": 647,
                "num_explored_lambda": 380,
                "num_explored_none": 144,
                "num_inputs": 1,
                "num_kept_concrete": 417,
                "num_kept_lambda": 174,
                "num_values_explored": 1171,
                "num_values_kept": 591,
                "temperature": 1.0,
                "total_num_restarts": 12,
                "total_num_values_explored": 35141
            },
            "success": true,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map(lambda u1: 1, x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map(lambda u1: 1, x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.413918500766158,
            "num_unique_values": 222,
            "solution": "Map(lambda u1: (lambda v1: If((lambda v1: Less(y, v1))(v1), 1, 0))(u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 28.376327769347498,
                "explored_percent_lambda": 37.93626707132018,
                "explored_percent_none": 33.68740515933232,
                "kept_percent_concrete": 59.43396226415094,
                "kept_percent_lambda": 40.56603773584906,
                "num_examples": 3,
                "num_explored_concrete": 187,
                "num_explored_lambda": 250,
                "num_explored_none": 222,
                "num_inputs": 2,
                "num_kept_concrete": 126,
                "num_kept_lambda": 86,
                "num_values_explored": 659,
                "num_values_kept": 212,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 659
            },
            "success": true,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map(lambda u1: If(Greater(u1, y), 1, 0), x)'\n)",
            "task_solution": "Map(lambda u1: If(Greater(u1, y), 1, 0), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.2965240217745,
            "num_unique_values": 811,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.9407894736842,
                "explored_percent_lambda": 23.848684210526315,
                "explored_percent_none": 9.210526315789474,
                "kept_percent_concrete": 62.219451371571076,
                "kept_percent_lambda": 37.780548628428924,
                "num_examples": 3,
                "num_explored_concrete": 2035,
                "num_explored_lambda": 725,
                "num_explored_none": 280,
                "num_inputs": 1,
                "num_kept_concrete": 499,
                "num_kept_lambda": 303,
                "num_values_explored": 3040,
                "num_values_kept": 802,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 301680
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map(lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.3514723964036,
            "num_unique_values": 864,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.0852428964253,
                "explored_percent_lambda": 16.43751909563092,
                "explored_percent_none": 6.477238007943782,
                "kept_percent_concrete": 68.61826697892272,
                "kept_percent_lambda": 31.381733021077284,
                "num_examples": 3,
                "num_explored_concrete": 2523,
                "num_explored_lambda": 538,
                "num_explored_none": 212,
                "num_inputs": 2,
                "num_kept_concrete": 586,
                "num_kept_lambda": 268,
                "num_values_explored": 3273,
                "num_values_kept": 854,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 328947
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map(lambda u1: If(IsOdd(u1), Multiply(u1, n), u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(IsOdd(u1), Multiply(u1, n), u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.2660749033093452,
            "num_unique_values": 237,
            "solution": "Filter(lambda u1: (lambda v1: Less(y, v1))(u1), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 35.628227194492254,
                "explored_percent_lambda": 41.480206540447504,
                "explored_percent_none": 22.89156626506024,
                "kept_percent_concrete": 60.79295154185022,
                "kept_percent_lambda": 39.20704845814978,
                "num_examples": 3,
                "num_explored_concrete": 207,
                "num_explored_lambda": 241,
                "num_explored_none": 133,
                "num_inputs": 2,
                "num_kept_concrete": 138,
                "num_kept_lambda": 89,
                "num_values_explored": 581,
                "num_values_kept": 227,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 581
            },
            "success": true,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter(lambda u1: Greater(u1, y), x)'\n)",
            "task_solution": "Filter(lambda u1: Greater(u1, y), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.5072928983718157,
            "num_unique_values": 225,
            "solution": "Filter(lambda u1: (lambda v1: IsEven(v1))(u1), Sort(x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 27.43362831858407,
                "explored_percent_lambda": 50.73746312684366,
                "explored_percent_none": 21.828908554572273,
                "kept_percent_concrete": 42.129629629629626,
                "kept_percent_lambda": 57.870370370370374,
                "num_examples": 3,
                "num_explored_concrete": 186,
                "num_explored_lambda": 344,
                "num_explored_none": 148,
                "num_inputs": 1,
                "num_kept_concrete": 91,
                "num_kept_lambda": 125,
                "num_values_explored": 678,
                "num_values_kept": 216,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 678
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter(lambda u1: IsEven(u1), Sort(x))'\n)",
            "task_solution": "Filter(lambda u1: IsEven(u1), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.255412044003606,
            "num_unique_values": 459,
            "solution": "Maximum(Filter(lambda u1: (lambda v1: IsOdd(v1))(u1), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 44.702320887991924,
                "explored_percent_lambda": 40.16145307769929,
                "explored_percent_none": 15.136226034308779,
                "kept_percent_concrete": 63.55555555555556,
                "kept_percent_lambda": 36.44444444444444,
                "num_examples": 5,
                "num_explored_concrete": 443,
                "num_explored_lambda": 398,
                "num_explored_none": 150,
                "num_inputs": 1,
                "num_kept_concrete": 286,
                "num_kept_lambda": 164,
                "num_values_explored": 991,
                "num_values_kept": 450,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 991
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter(lambda u1: IsOdd(u1), x))'\n)",
            "task_solution": "Maximum(Filter(lambda u1: IsOdd(u1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.654483646154404,
            "num_unique_values": 772,
            "solution": "Filter(lambda u1: (lambda v1: Greater(3, v1))(u1), Filter(lambda u1: (lambda v1: IsOdd(v1))(u1), x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 63.94148020654045,
                "explored_percent_lambda": 28.012048192771083,
                "explored_percent_none": 8.046471600688468,
                "kept_percent_concrete": 63.82699868938401,
                "kept_percent_lambda": 36.17300131061599,
                "num_examples": 3,
                "num_explored_concrete": 1486,
                "num_explored_lambda": 651,
                "num_explored_none": 187,
                "num_inputs": 1,
                "num_kept_concrete": 487,
                "num_kept_lambda": 276,
                "num_values_explored": 2324,
                "num_values_kept": 763,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 2324
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter(lambda u1: IsOdd(Min(u1, 0)), x)'\n)",
            "task_solution": "Filter(lambda u1: IsOdd(Min(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.064039595425129,
            "num_unique_values": 492,
            "solution": "Sum(Reverse(Filter(lambda u1: (lambda v1: Greater(v1, 0))(u1), x)))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 54.63800904977376,
                "explored_percent_lambda": 37.10407239819005,
                "explored_percent_none": 8.2579185520362,
                "kept_percent_concrete": 64.38923395445134,
                "kept_percent_lambda": 35.61076604554865,
                "num_examples": 5,
                "num_explored_concrete": 483,
                "num_explored_lambda": 328,
                "num_explored_none": 73,
                "num_inputs": 1,
                "num_kept_concrete": 311,
                "num_kept_lambda": 172,
                "num_values_explored": 884,
                "num_values_kept": 483,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 884
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter(lambda u1: Greater(u1, 0), x))'\n)",
            "task_solution": "Sum(Filter(lambda u1: Greater(u1, 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.6693672612309456,
            "num_unique_values": 516,
            "solution": "Filter(lambda u1: (lambda v1: Less(v1, -1))(u1), Reverse(Take(-1, Sort(x))))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 56.50741350906095,
                "explored_percent_lambda": 35.17298187808896,
                "explored_percent_none": 8.319604612850082,
                "kept_percent_concrete": 62.72189349112426,
                "kept_percent_lambda": 37.27810650887574,
                "num_examples": 3,
                "num_explored_concrete": 686,
                "num_explored_lambda": 427,
                "num_explored_none": 101,
                "num_inputs": 1,
                "num_kept_concrete": 318,
                "num_kept_lambda": 189,
                "num_values_explored": 1214,
                "num_values_kept": 507,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1214
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter(lambda u1: Less(u1, 0), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter(lambda u1: Less(u1, 0), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 59.09357951954007,
            "num_unique_values": 782,
            "solution": "Filter(lambda u1: (lambda v1: Less(v1, b))(u1), Filter(lambda u1: (lambda v1: Less(a, v1))(u1), x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 66.49844720496894,
                "explored_percent_lambda": 19.875776397515526,
                "explored_percent_none": 13.625776397515528,
                "kept_percent_concrete": 70.42801556420234,
                "kept_percent_lambda": 29.571984435797667,
                "num_examples": 3,
                "num_explored_concrete": 1713,
                "num_explored_lambda": 512,
                "num_explored_none": 351,
                "num_inputs": 3,
                "num_kept_concrete": 543,
                "num_kept_lambda": 228,
                "num_values_explored": 2576,
                "num_values_kept": 771,
                "temperature": 1.0,
                "total_num_restarts": 10,
                "total_num_values_explored": 30179
            },
            "success": true,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter(lambda u1: Less(u1, b), Filter(lambda u1: Greater(u1, a), x))'\n)",
            "task_solution": "Filter(lambda u1: Less(u1, b), Filter(lambda u1: Greater(u1, a), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.4544572867453,
            "num_unique_values": 950,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.58799730276466,
                "explored_percent_lambda": 25.92717464598786,
                "explored_percent_none": 7.484828051247471,
                "kept_percent_concrete": 62.12765957446808,
                "kept_percent_lambda": 37.87234042553192,
                "num_examples": 3,
                "num_explored_concrete": 1975,
                "num_explored_lambda": 769,
                "num_explored_none": 222,
                "num_inputs": 2,
                "num_kept_concrete": 584,
                "num_kept_lambda": 356,
                "num_values_explored": 2966,
                "num_values_kept": 940,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 304655
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter(lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n)), x)'\n)",
            "task_solution": "Filter(lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.7087821736932,
            "num_unique_values": 975,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.46138347884487,
                "explored_percent_lambda": 24.98321020819342,
                "explored_percent_none": 7.555406312961719,
                "kept_percent_concrete": 62.17616580310881,
                "kept_percent_lambda": 37.82383419689119,
                "num_examples": 3,
                "num_explored_concrete": 2009,
                "num_explored_lambda": 744,
                "num_explored_none": 225,
                "num_inputs": 2,
                "num_kept_concrete": 600,
                "num_kept_lambda": 365,
                "num_values_explored": 2978,
                "num_values_kept": 965,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 293775
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter(lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1)), x)'\n)",
            "task_solution": "Filter(lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 334.43820062093437,
            "num_unique_values": 508,
            "solution": "Filter(lambda u1: (lambda v1: Equal(v1, (lambda v1: Access(v1, x))(v1)))(u1), Sort(x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 52.643012309920344,
                "explored_percent_lambda": 39.826212889210716,
                "explored_percent_none": 7.530774800868936,
                "kept_percent_concrete": 57.91583166332666,
                "kept_percent_lambda": 42.08416833667334,
                "num_examples": 3,
                "num_explored_concrete": 727,
                "num_explored_lambda": 550,
                "num_explored_none": 104,
                "num_inputs": 1,
                "num_kept_concrete": 289,
                "num_kept_lambda": 210,
                "num_values_explored": 1381,
                "num_values_kept": 499,
                "temperature": 1.0,
                "total_num_restarts": 56,
                "total_num_values_explored": 163386
            },
            "success": true,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter(lambda u1: Equal(u1, Access(u1, x)), x))'\n)",
            "task_solution": "Sort(Filter(lambda u1: Equal(u1, Access(u1, x)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.5570408757776,
            "num_unique_values": 975,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.53381393752146,
                "explored_percent_lambda": 22.69138345348438,
                "explored_percent_none": 11.774802608994165,
                "kept_percent_concrete": 64.52282157676349,
                "kept_percent_lambda": 35.477178423236516,
                "num_examples": 3,
                "num_explored_concrete": 1909,
                "num_explored_lambda": 661,
                "num_explored_none": 343,
                "num_inputs": 3,
                "num_kept_concrete": 622,
                "num_kept_lambda": 342,
                "num_values_explored": 2913,
                "num_values_kept": 964,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 292852
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter(lambda u1: Equal(Access(u1, x), y), i)'\n)",
            "task_solution": "Filter(lambda u1: Equal(Access(u1, x), y), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 107.45440566539764,
            "num_unique_values": 819,
            "solution": "IntDivide(Sum(Map(lambda u1: 2, Filter(lambda u1: (lambda v1: Equal(n, v1))(u1), x))), 2)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 73.71408300815892,
                "explored_percent_lambda": 12.664065271372827,
                "explored_percent_none": 13.621851720468252,
                "kept_percent_concrete": 80.46971569839307,
                "kept_percent_lambda": 19.530284301606923,
                "num_examples": 5,
                "num_explored_concrete": 2078,
                "num_explored_lambda": 357,
                "num_explored_none": 384,
                "num_inputs": 2,
                "num_kept_concrete": 651,
                "num_kept_lambda": 158,
                "num_values_explored": 2819,
                "num_values_kept": 809,
                "temperature": 1.0,
                "total_num_restarts": 18,
                "total_num_values_explored": 61119
            },
            "success": true,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count(lambda u1: Equal(u1, n), x)'\n)",
            "task_solution": "Count(lambda u1: Equal(u1, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.3790694139897823,
            "num_unique_values": 242,
            "solution": "Count(lambda u1: (lambda v1: Greater(q, v1))(u1), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 31.104199066874028,
                "explored_percent_lambda": 34.83670295489891,
                "explored_percent_none": 34.05909797822706,
                "kept_percent_concrete": 67.24137931034483,
                "kept_percent_lambda": 32.758620689655174,
                "num_examples": 5,
                "num_explored_concrete": 200,
                "num_explored_lambda": 224,
                "num_explored_none": 219,
                "num_inputs": 2,
                "num_kept_concrete": 156,
                "num_kept_lambda": 76,
                "num_values_explored": 643,
                "num_values_kept": 232,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 643
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count(lambda u1: Less(u1, q), x)'\n)",
            "task_solution": "Count(lambda u1: Less(u1, q), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 58.20734219253063,
            "num_unique_values": 795,
            "solution": "Count(lambda u1: (lambda v1: Less(v1, Head(x)))(u1), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 60.05277044854881,
                "explored_percent_lambda": 26.49076517150396,
                "explored_percent_none": 13.45646437994723,
                "kept_percent_concrete": 72.7735368956743,
                "kept_percent_lambda": 27.2264631043257,
                "num_examples": 5,
                "num_explored_concrete": 1138,
                "num_explored_lambda": 502,
                "num_explored_none": 255,
                "num_inputs": 1,
                "num_kept_concrete": 572,
                "num_kept_lambda": 214,
                "num_values_explored": 1895,
                "num_values_kept": 786,
                "temperature": 1.0,
                "total_num_restarts": 10,
                "total_num_values_explored": 30064
            },
            "success": true,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count(lambda u1: Less(u1, Head(x)), x)'\n)",
            "task_solution": "Count(lambda u1: Less(u1, Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.1952670887112617,
            "num_unique_values": 245,
            "solution": "Count(lambda u1: (lambda v1: Less(v1, 0))(u1), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 31.666666666666668,
                "explored_percent_lambda": 50.416666666666664,
                "explored_percent_none": 17.916666666666668,
                "kept_percent_concrete": 49.57627118644068,
                "kept_percent_lambda": 50.42372881355932,
                "num_examples": 5,
                "num_explored_concrete": 152,
                "num_explored_lambda": 242,
                "num_explored_none": 86,
                "num_inputs": 1,
                "num_kept_concrete": 117,
                "num_kept_lambda": 119,
                "num_values_explored": 480,
                "num_values_kept": 236,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 480
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count(lambda u1: Less(u1, 0), x)'\n)",
            "task_solution": "Count(lambda u1: Less(u1, 0), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 220.82002520374954,
            "num_unique_values": 805,
            "solution": "Count(lambda u1: (lambda v1: Equal(v1, Last(x)))(u1), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 63.92030156165859,
                "explored_percent_lambda": 23.58642972536349,
                "explored_percent_none": 12.49326871297792,
                "kept_percent_concrete": 75.50251256281408,
                "kept_percent_lambda": 24.497487437185928,
                "num_examples": 5,
                "num_explored_concrete": 1187,
                "num_explored_lambda": 438,
                "num_explored_none": 232,
                "num_inputs": 1,
                "num_kept_concrete": 601,
                "num_kept_lambda": 195,
                "num_values_explored": 1857,
                "num_values_kept": 796,
                "temperature": 1.0,
                "total_num_restarts": 37,
                "total_num_values_explored": 112232
            },
            "success": true,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count(lambda u1: Equal(u1, Last(x)), x)'\n)",
            "task_solution": "Count(lambda u1: Equal(u1, Last(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.7561462149024,
            "num_unique_values": 1130,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 85.25862068965517,
                "explored_percent_lambda": 8.591954022988507,
                "explored_percent_none": 6.149425287356322,
                "kept_percent_concrete": 85.71428571428571,
                "kept_percent_lambda": 14.285714285714286,
                "num_examples": 5,
                "num_explored_concrete": 2967,
                "num_explored_lambda": 299,
                "num_explored_none": 214,
                "num_inputs": 2,
                "num_kept_concrete": 960,
                "num_kept_lambda": 160,
                "num_values_explored": 3480,
                "num_values_kept": 1120,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 340486
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count(lambda u1: Equal(u1, Access(i, x)), x)'\n)",
            "task_solution": "Count(lambda u1: Equal(u1, Access(i, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 60.226301182061434,
            "num_unique_values": 1065,
            "solution": "Count(lambda u1: (lambda v1: IsEven((lambda v1: Min(0, v1))(v1)))(u1), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 74.6964856230032,
                "explored_percent_lambda": 17.156549520766774,
                "explored_percent_none": 8.146964856230031,
                "kept_percent_concrete": 77.8409090909091,
                "kept_percent_lambda": 22.15909090909091,
                "num_examples": 5,
                "num_explored_concrete": 2338,
                "num_explored_lambda": 537,
                "num_explored_none": 255,
                "num_inputs": 1,
                "num_kept_concrete": 822,
                "num_kept_lambda": 234,
                "num_values_explored": 3130,
                "num_values_kept": 1056,
                "temperature": 1.0,
                "total_num_restarts": 10,
                "total_num_values_explored": 30855
            },
            "success": true,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count(lambda u1: IsEven(Min(u1, 0)), x)'\n)",
            "task_solution": "Count(lambda u1: IsEven(Min(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.7879080250859,
            "num_unique_values": 1214,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.15808228053126,
                "explored_percent_lambda": 15.646258503401361,
                "explored_percent_none": 8.19565921606738,
                "kept_percent_concrete": 77.57475083056478,
                "kept_percent_lambda": 22.425249169435215,
                "num_examples": 5,
                "num_explored_concrete": 2351,
                "num_explored_lambda": 483,
                "num_explored_none": 253,
                "num_inputs": 2,
                "num_kept_concrete": 934,
                "num_kept_lambda": 270,
                "num_values_explored": 3087,
                "num_values_kept": 1204,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 306799
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count(lambda u1: Equal(u1, 0), x), Count(lambda u1: Equal(u1, 0), y))'\n)",
            "task_solution": "Add(Count(lambda u1: Equal(u1, 0), x), Count(lambda u1: Equal(u1, 0), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.003459407016635,
            "num_unique_values": 427,
            "solution": "Take(Count(lambda u1: (lambda v1: Less(0, v1))(u1), r), Sort(c))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 40.63324538258575,
                "explored_percent_lambda": 51.97889182058047,
                "explored_percent_none": 7.387862796833773,
                "kept_percent_concrete": 47.721822541966425,
                "kept_percent_lambda": 52.278177458033575,
                "num_examples": 3,
                "num_explored_concrete": 308,
                "num_explored_lambda": 394,
                "num_explored_none": 56,
                "num_inputs": 2,
                "num_kept_concrete": 199,
                "num_kept_lambda": 218,
                "num_values_explored": 758,
                "num_values_kept": 417,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 758
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count(lambda u1: Greater(u1, 0), r), Sort(c))'\n)",
            "task_solution": "Take(Count(lambda u1: Greater(u1, 0), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.8072314467281,
            "num_unique_values": 1172,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.57352941176471,
                "explored_percent_lambda": 17.981283422459892,
                "explored_percent_none": 4.445187165775401,
                "kept_percent_concrete": 77.19449225473322,
                "kept_percent_lambda": 22.80550774526678,
                "num_examples": 5,
                "num_explored_concrete": 2321,
                "num_explored_lambda": 538,
                "num_explored_none": 133,
                "num_inputs": 2,
                "num_kept_concrete": 897,
                "num_kept_lambda": 265,
                "num_values_explored": 2992,
                "num_values_kept": 1162,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 306169
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith(lambda u1, u2: Add(Multiply(u1, 3), u2), w, t))'\n)",
            "task_solution": "Maximum(ZipWith(lambda u1, u2: Add(Multiply(u1, 3), u2), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.8896997477859,
            "num_unique_values": 1092,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 80.14116137311518,
                "explored_percent_lambda": 16.426050689765802,
                "explored_percent_none": 3.432787937119025,
                "kept_percent_concrete": 78.09611829944546,
                "kept_percent_lambda": 21.90388170055453,
                "num_examples": 5,
                "num_explored_concrete": 2498,
                "num_explored_lambda": 512,
                "num_explored_none": 107,
                "num_inputs": 2,
                "num_kept_concrete": 845,
                "num_kept_lambda": 237,
                "num_values_explored": 3117,
                "num_values_kept": 1082,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 313798
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.2965692579746246,
            "num_unique_values": 252,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Min(v1, v2))(u1, u2), a, Reverse(a))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 32.525252525252526,
                "explored_percent_lambda": 54.54545454545455,
                "explored_percent_none": 12.929292929292929,
                "kept_percent_concrete": 45.267489711934154,
                "kept_percent_lambda": 54.732510288065846,
                "num_examples": 3,
                "num_explored_concrete": 161,
                "num_explored_lambda": 270,
                "num_explored_none": 64,
                "num_inputs": 1,
                "num_kept_concrete": 110,
                "num_kept_lambda": 133,
                "num_values_explored": 495,
                "num_values_kept": 243,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 495
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith(lambda u1, u2: Min(u1, u2), a, Reverse(a))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Min(u1, u2), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.3501995503902435,
            "num_unique_values": 568,
            "solution": "Subtract(Minimum(ZipWith(lambda u1, u2: (lambda v1, v2: Add(v1, v2))(u1, u2), t, p)), 2)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 57.4869109947644,
                "explored_percent_lambda": 32.460732984293195,
                "explored_percent_none": 10.052356020942408,
                "kept_percent_concrete": 69.71326164874552,
                "kept_percent_lambda": 30.28673835125448,
                "num_examples": 5,
                "num_explored_concrete": 549,
                "num_explored_lambda": 310,
                "num_explored_none": 96,
                "num_inputs": 2,
                "num_kept_concrete": 389,
                "num_kept_lambda": 169,
                "num_values_explored": 955,
                "num_values_kept": 558,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 955
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith(lambda u1, u2: Add(u1, u2), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith(lambda u1, u2: Add(u1, u2), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.364050609991,
            "num_unique_values": 973,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.20343137254902,
                "explored_percent_lambda": 19.02573529411765,
                "explored_percent_none": 6.770833333333333,
                "kept_percent_concrete": 74.48132780082987,
                "kept_percent_lambda": 25.518672199170126,
                "num_examples": 5,
                "num_explored_concrete": 2422,
                "num_explored_lambda": 621,
                "num_explored_none": 221,
                "num_inputs": 1,
                "num_kept_concrete": 718,
                "num_kept_lambda": 246,
                "num_values_explored": 3264,
                "num_values_kept": 964,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 334387
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith(lambda u1, u2: Max(Subtract(u1, u2), 0), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Max(Subtract(u1, u2), 0), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.0037729907780886,
            "num_unique_values": 495,
            "solution": "Sum(ZipWith(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), y, x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 51.68018539976825,
                "explored_percent_lambda": 36.38470451911935,
                "explored_percent_none": 11.935110081112398,
                "kept_percent_concrete": 63.71134020618557,
                "kept_percent_lambda": 36.28865979381443,
                "num_examples": 5,
                "num_explored_concrete": 446,
                "num_explored_lambda": 314,
                "num_explored_none": 103,
                "num_inputs": 2,
                "num_kept_concrete": 309,
                "num_kept_lambda": 176,
                "num_values_explored": 863,
                "num_values_kept": 485,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 863
            },
            "success": true,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, y))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.9127975106239,
            "num_unique_values": 924,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.253810470510274,
                "explored_percent_lambda": 30.05301524188204,
                "explored_percent_none": 6.693174287607687,
                "kept_percent_concrete": 45.733041575492344,
                "kept_percent_lambda": 54.266958424507656,
                "num_examples": 3,
                "num_explored_concrete": 1909,
                "num_explored_lambda": 907,
                "num_explored_none": 202,
                "num_inputs": 2,
                "num_kept_concrete": 418,
                "num_kept_lambda": 496,
                "num_values_explored": 3018,
                "num_values_kept": 914,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 301973
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith(lambda u1, u2: IntDivide(Add(u1, u2), 2), x, y)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: IntDivide(Add(u1, u2), 2), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.675586424768,
            "num_unique_values": 876,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.00321853878339,
                "explored_percent_lambda": 20.759575152880593,
                "explored_percent_none": 9.237206308336015,
                "kept_percent_concrete": 55.49132947976879,
                "kept_percent_lambda": 44.50867052023121,
                "num_examples": 3,
                "num_explored_concrete": 2175,
                "num_explored_lambda": 645,
                "num_explored_none": 287,
                "num_inputs": 3,
                "num_kept_concrete": 480,
                "num_kept_lambda": 385,
                "num_values_explored": 3107,
                "num_values_kept": 865,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 320305
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith(lambda u1, u2: Add(u1, u2), a, ZipWith(lambda u1, u2: Add(u1, u2), b, c))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Add(u1, u2), a, ZipWith(lambda u1, u2: Add(u1, u2), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 26.841003054752946,
            "num_unique_values": 484,
            "solution": "Sort(ZipWith(lambda u1, u2: (lambda v1, v2: IntDivide(v1, v2))(u2, u1), n, m))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 55.27328714395689,
                "explored_percent_lambda": 30.177059276366435,
                "explored_percent_none": 14.549653579676674,
                "kept_percent_concrete": 53.79746835443038,
                "kept_percent_lambda": 46.20253164556962,
                "num_examples": 3,
                "num_explored_concrete": 718,
                "num_explored_lambda": 392,
                "num_explored_none": 189,
                "num_inputs": 2,
                "num_kept_concrete": 255,
                "num_kept_lambda": 219,
                "num_values_explored": 1299,
                "num_values_kept": 474,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 14076
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith(lambda u1, u2: IntDivide(u1, u2), m, n))'\n)",
            "task_solution": "Sort(ZipWith(lambda u1, u2: IntDivide(u1, u2), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.8730180766433477,
            "num_unique_values": 532,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Subtract(v1, v2))(u2, u1), x, Drop(1, x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 53.170359052711994,
                "explored_percent_lambda": 33.3842627960275,
                "explored_percent_none": 13.445378151260504,
                "kept_percent_concrete": 60.61185468451243,
                "kept_percent_lambda": 39.38814531548757,
                "num_examples": 3,
                "num_explored_concrete": 696,
                "num_explored_lambda": 437,
                "num_explored_none": 176,
                "num_inputs": 1,
                "num_kept_concrete": 317,
                "num_kept_lambda": 206,
                "num_values_explored": 1309,
                "num_values_kept": 523,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1309
            },
            "success": true,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith(lambda u1, u2: Subtract(u2, u1), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Subtract(u2, u1), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 207.23008353821933,
            "num_unique_values": 490,
            "solution": "Sum(ZipWith(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), x, m))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 47.389162561576356,
                "explored_percent_lambda": 36.05911330049261,
                "explored_percent_none": 16.551724137931036,
                "kept_percent_concrete": 67.91666666666667,
                "kept_percent_lambda": 32.083333333333336,
                "num_examples": 5,
                "num_explored_concrete": 481,
                "num_explored_lambda": 366,
                "num_explored_none": 168,
                "num_inputs": 2,
                "num_kept_concrete": 326,
                "num_kept_lambda": 154,
                "num_values_explored": 1015,
                "num_values_kept": 480,
                "temperature": 1.0,
                "total_num_restarts": 35,
                "total_num_values_explored": 103216
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, m))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.9376279562712,
            "num_unique_values": 949,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.73075546007877,
                "explored_percent_lambda": 31.435732187611887,
                "explored_percent_none": 4.833512352309345,
                "kept_percent_concrete": 45.68690095846645,
                "kept_percent_lambda": 54.31309904153355,
                "num_examples": 3,
                "num_explored_concrete": 1780,
                "num_explored_lambda": 878,
                "num_explored_none": 135,
                "num_inputs": 2,
                "num_kept_concrete": 429,
                "num_kept_lambda": 510,
                "num_values_explored": 2793,
                "num_values_kept": 939,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 285426
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith(lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1)), x, y)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.8421890567988,
            "num_unique_values": 1026,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.875,
                "explored_percent_lambda": 19.03125,
                "explored_percent_none": 10.09375,
                "kept_percent_concrete": 75.59055118110236,
                "kept_percent_lambda": 24.409448818897637,
                "num_examples": 5,
                "num_explored_concrete": 2268,
                "num_explored_lambda": 609,
                "num_explored_none": 323,
                "num_inputs": 2,
                "num_kept_concrete": 768,
                "num_kept_lambda": 248,
                "num_values_explored": 3200,
                "num_values_kept": 1016,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 318661
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith(lambda u1, u2: Square(Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Square(Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.955579308793,
            "num_unique_values": 971,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 50.945674044265594,
                "explored_percent_lambda": 40.241448692152915,
                "explored_percent_none": 8.81287726358149,
                "kept_percent_concrete": 40.4786680541103,
                "kept_percent_lambda": 59.5213319458897,
                "num_examples": 3,
                "num_explored_concrete": 1266,
                "num_explored_lambda": 1000,
                "num_explored_none": 219,
                "num_inputs": 2,
                "num_kept_concrete": 389,
                "num_kept_lambda": 572,
                "num_values_explored": 2485,
                "num_values_kept": 961,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 249862
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith(lambda u1, u2: If(Equal(u1, u2), 1, 0), x, y)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: If(Equal(u1, u2), 1, 0), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 34.73172291368246,
            "num_unique_values": 806,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Min(v1, v2))(u1, u2), Sort(x), Sort(y))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 68.01390699695784,
                "explored_percent_lambda": 24.7283789656671,
                "explored_percent_none": 7.257714037375054,
                "kept_percent_concrete": 55.27638190954774,
                "kept_percent_lambda": 44.72361809045226,
                "num_examples": 3,
                "num_explored_concrete": 1565,
                "num_explored_lambda": 569,
                "num_explored_none": 167,
                "num_inputs": 2,
                "num_kept_concrete": 440,
                "num_kept_lambda": 356,
                "num_values_explored": 2301,
                "num_values_kept": 796,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 18141
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith(lambda u1, u2: Min(u1, u2), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Min(u1, u2), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 218.42368884198368,
            "num_unique_values": 256,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Add(v1, v2))(u1, u2), x, Drop(Multiply(-1, 3), x))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 24.65331278890601,
                "explored_percent_lambda": 56.240369799691834,
                "explored_percent_none": 19.106317411402156,
                "kept_percent_concrete": 47.77327935222672,
                "kept_percent_lambda": 52.22672064777328,
                "num_examples": 3,
                "num_explored_concrete": 160,
                "num_explored_lambda": 365,
                "num_explored_none": 124,
                "num_inputs": 1,
                "num_kept_concrete": 118,
                "num_kept_lambda": 129,
                "num_values_explored": 649,
                "num_values_kept": 247,
                "temperature": 1.0,
                "total_num_restarts": 37,
                "total_num_values_explored": 108991
            },
            "success": true,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith(lambda u1, u2: Add(u1, u2), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Add(u1, u2), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.6572749372572,
            "num_unique_values": 1173,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 79.7716150081566,
                "explored_percent_lambda": 16.802610114192497,
                "explored_percent_none": 3.4257748776508974,
                "kept_percent_concrete": 79.03780068728523,
                "kept_percent_lambda": 20.962199312714777,
                "num_examples": 5,
                "num_explored_concrete": 2445,
                "num_explored_lambda": 515,
                "num_explored_none": 105,
                "num_inputs": 1,
                "num_kept_concrete": 920,
                "num_kept_lambda": 244,
                "num_values_explored": 3065,
                "num_values_kept": 1164,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 309172
            },
            "success": false,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.9281686712056,
            "num_unique_values": 908,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.711553175210405,
                "explored_percent_lambda": 35.34812547819434,
                "explored_percent_none": 3.9403213465952565,
                "kept_percent_concrete": 38.641425389755014,
                "kept_percent_lambda": 61.358574610244986,
                "num_examples": 3,
                "num_explored_concrete": 1587,
                "num_explored_lambda": 924,
                "num_explored_none": 103,
                "num_inputs": 2,
                "num_kept_concrete": 347,
                "num_kept_lambda": 551,
                "num_values_explored": 2614,
                "num_values_kept": 898,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 262253
            },
            "success": false,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith(lambda u1, u2: Multiply(u1, Add(1, u2)), p, w)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Multiply(u1, Add(1, u2)), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.9079837333411,
            "num_unique_values": 1072,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.4904214559387,
                "explored_percent_lambda": 17.720306513409962,
                "explored_percent_none": 4.789272030651341,
                "kept_percent_concrete": 77.79868297271872,
                "kept_percent_lambda": 22.20131702728128,
                "num_examples": 5,
                "num_explored_concrete": 2427,
                "num_explored_lambda": 555,
                "num_explored_none": 150,
                "num_inputs": 1,
                "num_kept_concrete": 827,
                "num_kept_lambda": 236,
                "num_values_explored": 3132,
                "num_values_kept": 1063,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 317990
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1(lambda u1, u2: Min(u1, u2), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1(lambda u1, u2: Min(u1, u2), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 128.1243918016553,
            "num_unique_values": 264,
            "solution": "Scanl1(lambda u1, u2: (lambda v1, v2: Max(v1, v2))(u2, u1), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 35.0844277673546,
                "explored_percent_lambda": 49.34333958724203,
                "explored_percent_none": 15.572232645403377,
                "kept_percent_concrete": 46.27450980392157,
                "kept_percent_lambda": 53.72549019607843,
                "num_examples": 3,
                "num_explored_concrete": 187,
                "num_explored_lambda": 263,
                "num_explored_none": 83,
                "num_inputs": 1,
                "num_kept_concrete": 118,
                "num_kept_lambda": 137,
                "num_values_explored": 533,
                "num_values_kept": 255,
                "temperature": 1.0,
                "total_num_restarts": 22,
                "total_num_values_explored": 54294
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1(lambda u1, u2: Max(u1, u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Max(u1, u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 51.35035929270089,
            "num_unique_values": 742,
            "solution": "Maximum(ZipWith(lambda u1, u2: (lambda v1: Sum((lambda v1: Take(v1, x))(v1)))(u1), x, x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 66.84350132625995,
                "explored_percent_lambda": 27.320954907161802,
                "explored_percent_none": 5.835543766578249,
                "kept_percent_concrete": 69.30422919508868,
                "kept_percent_lambda": 30.695770804911323,
                "num_examples": 5,
                "num_explored_concrete": 1008,
                "num_explored_lambda": 412,
                "num_explored_none": 88,
                "num_inputs": 1,
                "num_kept_concrete": 508,
                "num_kept_lambda": 225,
                "num_values_explored": 1508,
                "num_values_kept": 733,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 26562
            },
            "success": true,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1(lambda u1, u2: Add(u1, u2), x))'\n)",
            "task_solution": "Maximum(Scanl1(lambda u1, u2: Add(u1, u2), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 117.39055569656193,
            "num_unique_values": 543,
            "solution": "Scanl1(lambda u1, u2: (lambda v1, v2: Add(v1, v2))(u1, u2), Reverse(x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 44.03815580286169,
                "explored_percent_lambda": 44.35612082670906,
                "explored_percent_none": 11.605723370429253,
                "kept_percent_concrete": 42.32209737827716,
                "kept_percent_lambda": 57.67790262172284,
                "num_examples": 3,
                "num_explored_concrete": 554,
                "num_explored_lambda": 558,
                "num_explored_none": 146,
                "num_inputs": 1,
                "num_kept_concrete": 226,
                "num_kept_lambda": 308,
                "num_values_explored": 1258,
                "num_values_kept": 534,
                "temperature": 1.0,
                "total_num_restarts": 20,
                "total_num_values_explored": 51031
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1(lambda u1, u2: Add(u1, u2), Reverse(x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(u1, u2), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.6107710786164,
            "num_unique_values": 898,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.86732533521524,
                "explored_percent_lambda": 30.275229357798164,
                "explored_percent_none": 5.857445306986591,
                "kept_percent_concrete": 53.76827896512936,
                "kept_percent_lambda": 46.23172103487064,
                "num_examples": 3,
                "num_explored_concrete": 1810,
                "num_explored_lambda": 858,
                "num_explored_none": 166,
                "num_inputs": 1,
                "num_kept_concrete": 478,
                "num_kept_lambda": 411,
                "num_values_explored": 2834,
                "num_values_kept": 889,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 277906
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1(lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2)), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 545.5104509033263,
            "num_unique_values": 544,
            "solution": "Scanl1(lambda u1, u2: (lambda v1, v2: Add(v1, (lambda v1: Add(n, v1))(v2)))(u2, u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 67.89340101522842,
                "explored_percent_lambda": 20.685279187817258,
                "explored_percent_none": 11.421319796954315,
                "kept_percent_concrete": 69.66292134831461,
                "kept_percent_lambda": 30.337078651685392,
                "num_examples": 3,
                "num_explored_concrete": 1070,
                "num_explored_lambda": 326,
                "num_explored_none": 180,
                "num_inputs": 2,
                "num_kept_concrete": 372,
                "num_kept_lambda": 162,
                "num_values_explored": 1576,
                "num_values_kept": 534,
                "temperature": 1.0,
                "total_num_restarts": 91,
                "total_num_values_explored": 293596
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1(lambda u1, u2: Add(Add(u1, u2), n), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(Add(u1, u2), n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.7661769092083,
            "num_unique_values": 903,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.10526315789474,
                "explored_percent_lambda": 28.37837837837838,
                "explored_percent_none": 4.516358463726885,
                "kept_percent_concrete": 51.006711409395976,
                "kept_percent_lambda": 48.993288590604024,
                "num_examples": 3,
                "num_explored_concrete": 1887,
                "num_explored_lambda": 798,
                "num_explored_none": 127,
                "num_inputs": 1,
                "num_kept_concrete": 456,
                "num_kept_lambda": 438,
                "num_values_explored": 2812,
                "num_values_kept": 894,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 274037
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1(lambda u1, u2: Add(IntDivide(u1, 2), u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(IntDivide(u1, 2), u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 372.99522508867085,
            "num_unique_values": 802,
            "solution": "Scanl1(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), Take(n, x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 66.50035637918745,
                "explored_percent_lambda": 24.98218104062723,
                "explored_percent_none": 8.517462580185317,
                "kept_percent_concrete": 56.94444444444444,
                "kept_percent_lambda": 43.05555555555556,
                "num_examples": 3,
                "num_explored_concrete": 1866,
                "num_explored_lambda": 701,
                "num_explored_none": 239,
                "num_inputs": 2,
                "num_kept_concrete": 451,
                "num_kept_lambda": 341,
                "num_values_explored": 2806,
                "num_values_kept": 792,
                "temperature": 1.0,
                "total_num_restarts": 62,
                "total_num_values_explored": 187485
            },
            "success": true,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1(lambda u1, u2: Multiply(u1, u2), Take(n, x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Multiply(u1, u2), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 122.53006678819656,
            "num_unique_values": 409,
            "solution": "Last(Scanl1(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 48.10690423162583,
                "explored_percent_lambda": 38.30734966592428,
                "explored_percent_none": 13.585746102449889,
                "kept_percent_concrete": 62.5,
                "kept_percent_lambda": 37.5,
                "num_examples": 5,
                "num_explored_concrete": 432,
                "num_explored_lambda": 344,
                "num_explored_none": 122,
                "num_inputs": 1,
                "num_kept_concrete": 250,
                "num_kept_lambda": 150,
                "num_values_explored": 898,
                "num_values_kept": 400,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 66805
            },
            "success": true,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1(lambda u1, u2: Multiply(u1, u2), x))'\n)",
            "task_solution": "Last(Scanl1(lambda u1, u2: Multiply(u1, u2), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 419.1154492236674,
            "num_unique_values": 536,
            "solution": "Scanl1(lambda u1, u2: (lambda v1, v2: Min(v1, v2))(u1, u2), Drop(1, Take(-1, x)))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 51.50737652341245,
                "explored_percent_lambda": 38.742783835792174,
                "explored_percent_none": 9.749839640795381,
                "kept_percent_concrete": 57.874762808349146,
                "kept_percent_lambda": 42.125237191650854,
                "num_examples": 3,
                "num_explored_concrete": 803,
                "num_explored_lambda": 604,
                "num_explored_none": 152,
                "num_inputs": 1,
                "num_kept_concrete": 305,
                "num_kept_lambda": 222,
                "num_values_explored": 1559,
                "num_values_kept": 527,
                "temperature": 1.0,
                "total_num_restarts": 70,
                "total_num_values_explored": 204168
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1(lambda u1, u2: Min(u1, u2), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Min(u1, u2), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.6270310971886,
            "num_unique_values": 885,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.77934272300469,
                "explored_percent_lambda": 24.681421864520456,
                "explored_percent_none": 6.5392354124748495,
                "kept_percent_concrete": 57.077625570776256,
                "kept_percent_lambda": 42.922374429223744,
                "num_examples": 3,
                "num_explored_concrete": 2051,
                "num_explored_lambda": 736,
                "num_explored_none": 195,
                "num_inputs": 1,
                "num_kept_concrete": 500,
                "num_kept_lambda": 376,
                "num_values_explored": 2982,
                "num_values_kept": 876,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 295614
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1(lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 55.7134468536824,
            "num_unique_values": 264,
            "solution": "Scanl1(lambda u1, u2: (lambda v1: Access(v1, x))(u1), Map(lambda u1: Head(x), x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 30.155642023346303,
                "explored_percent_lambda": 55.05836575875487,
                "explored_percent_none": 14.785992217898833,
                "kept_percent_concrete": 41.1764705882353,
                "kept_percent_lambda": 58.8235294117647,
                "num_examples": 3,
                "num_explored_concrete": 155,
                "num_explored_lambda": 283,
                "num_explored_none": 76,
                "num_inputs": 1,
                "num_kept_concrete": 105,
                "num_kept_lambda": 150,
                "num_values_explored": 514,
                "num_values_kept": 255,
                "temperature": 1.0,
                "total_num_restarts": 10,
                "total_num_values_explored": 23107
            },
            "success": true,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1(lambda u1, u2: Access(u1, x), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Access(u1, x), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 140.16551062650979,
            "num_unique_values": 259,
            "solution": "Scanl1(lambda u1, u2: (lambda v1, v2: Max(v1, (lambda v1: Subtract(v1, -1))(v2)))(u2, u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 28.10734463276836,
                "explored_percent_lambda": 51.41242937853107,
                "explored_percent_none": 20.480225988700564,
                "kept_percent_concrete": 48.4,
                "kept_percent_lambda": 51.6,
                "num_examples": 3,
                "num_explored_concrete": 199,
                "num_explored_lambda": 364,
                "num_explored_none": 145,
                "num_inputs": 1,
                "num_kept_concrete": 121,
                "num_kept_lambda": 129,
                "num_values_explored": 708,
                "num_values_kept": 250,
                "temperature": 1.0,
                "total_num_restarts": 24,
                "total_num_values_explored": 73229
            },
            "success": true,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1(lambda u1, u2: Max(Add(u1, 1), u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Max(Add(u1, 1), u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.7553082741797,
            "num_unique_values": 954,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 59.766338079591094,
                "explored_percent_lambda": 34.50164293537787,
                "explored_percent_none": 5.732018985031033,
                "kept_percent_concrete": 47.301587301587304,
                "kept_percent_lambda": 52.698412698412696,
                "num_examples": 3,
                "num_explored_concrete": 1637,
                "num_explored_lambda": 945,
                "num_explored_none": 157,
                "num_inputs": 1,
                "num_kept_concrete": 447,
                "num_kept_lambda": 498,
                "num_values_explored": 2739,
                "num_values_kept": 945,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 271199
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1(lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 603.3115146216005,
            "num_unique_values": 1143,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.32748164698373,
                "explored_percent_lambda": 14.618576444302585,
                "explored_percent_none": 7.053941908713693,
                "kept_percent_concrete": 78.37599293909973,
                "kept_percent_lambda": 21.624007060900265,
                "num_examples": 5,
                "num_explored_concrete": 2454,
                "num_explored_lambda": 458,
                "num_explored_none": 221,
                "num_inputs": 2,
                "num_kept_concrete": 888,
                "num_kept_lambda": 245,
                "num_values_explored": 3133,
                "num_values_kept": 1133,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 317903
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count(lambda u1: Greater(u1, 0), ZipWith(lambda u1, u2: Subtract(u1, u2), a, b))'\n)",
            "task_solution": "Count(lambda u1: Greater(u1, 0), ZipWith(lambda u1, u2: Subtract(u1, u2), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.7803670726717,
            "num_unique_values": 1109,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 81.39754485363551,
                "explored_percent_lambda": 15.549260308467108,
                "explored_percent_none": 3.0531948378973874,
                "kept_percent_concrete": 79.79981801637852,
                "kept_percent_lambda": 20.200181983621473,
                "num_examples": 5,
                "num_explored_concrete": 2586,
                "num_explored_lambda": 494,
                "num_explored_none": 97,
                "num_inputs": 2,
                "num_kept_concrete": 877,
                "num_kept_lambda": 222,
                "num_values_explored": 3177,
                "num_values_kept": 1099,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 329414
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), s, Scanl1(lambda u1, u2: Add(u1, u2), p)))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), s, Scanl1(lambda u1, u2: Add(u1, u2), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.6952557563781738,
            "num_unique_values": 249,
            "solution": "Scanl1(lambda u1, u2: (lambda v1: Subtract(v1, -1))(u1), Map(lambda u1: 0, x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 24.30453879941435,
                "explored_percent_lambda": 53.587115666178626,
                "explored_percent_none": 22.10834553440703,
                "kept_percent_concrete": 42.5,
                "kept_percent_lambda": 57.5,
                "num_examples": 3,
                "num_explored_concrete": 166,
                "num_explored_lambda": 366,
                "num_explored_none": 151,
                "num_inputs": 1,
                "num_kept_concrete": 102,
                "num_kept_lambda": 138,
                "num_values_explored": 683,
                "num_values_kept": 240,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 683
            },
            "success": true,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1(lambda u1, u2: Add(u1, 1), Map(lambda u1: 0, x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(u1, 1), Map(lambda u1: 0, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.5689178816974,
            "num_unique_values": 950,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.40757012504224,
                "explored_percent_lambda": 28.016221696519093,
                "explored_percent_none": 5.5762081784386615,
                "kept_percent_concrete": 58.87353878852285,
                "kept_percent_lambda": 41.12646121147715,
                "num_examples": 3,
                "num_explored_concrete": 1965,
                "num_explored_lambda": 829,
                "num_explored_none": 165,
                "num_inputs": 1,
                "num_kept_concrete": 554,
                "num_kept_lambda": 387,
                "num_values_explored": 2959,
                "num_values_kept": 941,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 294822
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter(lambda u1: IsOdd(u1), ZipWith(lambda u1, u2: Multiply(u2, u1), x, Drop(1, x)))'\n)",
            "task_solution": "Filter(lambda u1: IsOdd(u1), ZipWith(lambda u1, u2: Multiply(u2, u1), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 67.77674781158566,
            "num_unique_values": 262,
            "solution": "Scanl1(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), Filter(lambda u1: (lambda v1: IsOdd(v1))(u1), x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 26.424870466321245,
                "explored_percent_lambda": 56.649395509499136,
                "explored_percent_none": 16.92573402417962,
                "kept_percent_concrete": 43.47826086956522,
                "kept_percent_lambda": 56.52173913043478,
                "num_examples": 3,
                "num_explored_concrete": 153,
                "num_explored_lambda": 328,
                "num_explored_none": 98,
                "num_inputs": 1,
                "num_kept_concrete": 110,
                "num_kept_lambda": 143,
                "num_values_explored": 579,
                "num_values_kept": 253,
                "temperature": 1.0,
                "total_num_restarts": 12,
                "total_num_values_explored": 31536
            },
            "success": true,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1(lambda u1, u2: Multiply(u1, u2), Filter(lambda u1: IsOdd(u1), x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Multiply(u1, u2), Filter(lambda u1: IsOdd(u1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.3999152965844,
            "num_unique_values": 888,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.98137038206505,
                "explored_percent_lambda": 18.913798547521314,
                "explored_percent_none": 4.104831070413641,
                "kept_percent_concrete": 60.02277904328018,
                "kept_percent_lambda": 39.97722095671982,
                "num_examples": 3,
                "num_explored_concrete": 2438,
                "num_explored_lambda": 599,
                "num_explored_none": 130,
                "num_inputs": 2,
                "num_kept_concrete": 527,
                "num_kept_lambda": 351,
                "num_values_explored": 3167,
                "num_values_kept": 878,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 324259
            },
            "success": false,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1(lambda u1, u2: Add(u1, u2), ZipWith(lambda u1, u2: Add(u1, u2), x, y))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(u1, u2), ZipWith(lambda u1, u2: Add(u1, u2), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.6524953041226,
            "num_unique_values": 883,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.453776245691,
                "explored_percent_lambda": 18.92823566280163,
                "explored_percent_none": 8.617988091507364,
                "kept_percent_concrete": 62.04128440366973,
                "kept_percent_lambda": 37.95871559633027,
                "num_examples": 3,
                "num_explored_concrete": 2312,
                "num_explored_lambda": 604,
                "num_explored_none": 275,
                "num_inputs": 3,
                "num_kept_concrete": 541,
                "num_kept_lambda": 331,
                "num_values_explored": 3191,
                "num_values_kept": 872,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 314219
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith(lambda u1, u2: Add(u1, u2), x, Map(lambda u1: Access(u1, y), i))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Add(u1, u2), x, Map(lambda u1: Access(u1, y), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 603.0235294345766,
            "num_unique_values": 1079,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.34543010752688,
                "explored_percent_lambda": 25.100806451612904,
                "explored_percent_none": 2.553763440860215,
                "kept_percent_concrete": 65.29466791393826,
                "kept_percent_lambda": 34.70533208606174,
                "num_examples": 3,
                "num_explored_concrete": 2153,
                "num_explored_lambda": 747,
                "num_explored_none": 76,
                "num_inputs": 2,
                "num_kept_concrete": 698,
                "num_kept_lambda": 371,
                "num_values_explored": 2976,
                "num_values_kept": 1069,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 297931
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter(lambda u1: Greater(u1, -1), ZipWith(lambda u1, u2: Subtract(u1, u2), x, y))'\n)",
            "task_solution": "Filter(lambda u1: Greater(u1, -1), ZipWith(lambda u1, u2: Subtract(u1, u2), x, y))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.67
}