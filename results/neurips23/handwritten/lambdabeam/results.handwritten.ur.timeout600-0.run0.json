{
    "num_tasks": 100,
    "num_tasks_solved": 44,
    "results": [
        {
            "elapsed_time": 7.717850163578987,
            "num_unique_values": 1340,
            "solution": "Add(k, Sum(Take(k, Sort(Map(lambda u1: (lambda v1: Add(-1, v1))(u1), b)))))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 84.73551637279597,
                "explored_percent_lambda": 11.586901763224182,
                "explored_percent_none": 3.677581863979849,
                "kept_percent_concrete": 83.98496240601504,
                "kept_percent_lambda": 16.015037593984964,
                "num_examples": 5,
                "num_explored_concrete": 3364,
                "num_explored_lambda": 460,
                "num_explored_none": 146,
                "num_inputs": 2,
                "num_kept_concrete": 1117,
                "num_kept_lambda": 213,
                "num_values_explored": 3970,
                "num_values_kept": 1330,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 30.502914398908615,
            "num_unique_values": 819,
            "solution": "If(IsOdd(x), Subtract(Multiply(x, 3), -1), IntDivide(x, 2))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 32.111984830740056,
                "explored_percent_lambda": 8.58847805476549,
                "explored_percent_none": 59.29953711449445,
                "kept_percent_concrete": 91.23456790123457,
                "kept_percent_lambda": 8.765432098765432,
                "num_examples": 5,
                "num_explored_concrete": 5758,
                "num_explored_lambda": 1540,
                "num_explored_none": 10633,
                "num_inputs": 1,
                "num_kept_concrete": 739,
                "num_kept_lambda": 71,
                "num_values_explored": 17931,
                "num_values_kept": 810,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.253975151106715,
            "num_unique_values": 144,
            "solution": "Subtract(Multiply(x, Add(y, -1)), y)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 22.551020408163264,
                "explored_percent_lambda": 7.8061224489795915,
                "explored_percent_none": 69.64285714285714,
                "kept_percent_concrete": 91.7910447761194,
                "kept_percent_lambda": 8.208955223880597,
                "num_examples": 5,
                "num_explored_concrete": 442,
                "num_explored_lambda": 153,
                "num_explored_none": 1365,
                "num_inputs": 2,
                "num_kept_concrete": 123,
                "num_kept_lambda": 11,
                "num_values_explored": 1960,
                "num_values_kept": 134,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 6.8739914651960135,
            "num_unique_values": 248,
            "solution": "Multiply(k, IntDivide(Min(Square(k), Add(k, x)), k))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 24.609278094765568,
                "explored_percent_lambda": 7.690399404614239,
                "explored_percent_none": 67.70032250062019,
                "kept_percent_concrete": 89.49579831932773,
                "kept_percent_lambda": 10.504201680672269,
                "num_examples": 5,
                "num_explored_concrete": 992,
                "num_explored_lambda": 310,
                "num_explored_none": 2729,
                "num_inputs": 2,
                "num_kept_concrete": 213,
                "num_kept_lambda": 25,
                "num_values_explored": 4031,
                "num_values_kept": 238,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.608107643201947,
            "num_unique_values": 420,
            "solution": "Take(Subtract(1, n), Take(-1, x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 49.11147011308562,
                "explored_percent_lambda": 32.55250403877221,
                "explored_percent_none": 18.336025848142164,
                "kept_percent_concrete": 57.80487804878049,
                "kept_percent_lambda": 42.19512195121951,
                "num_examples": 3,
                "num_explored_concrete": 608,
                "num_explored_lambda": 403,
                "num_explored_none": 227,
                "num_inputs": 2,
                "num_kept_concrete": 237,
                "num_kept_lambda": 173,
                "num_values_explored": 1238,
                "num_values_kept": 410,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.7648901976644993,
            "num_unique_values": 470,
            "solution": "Reverse(Sort(Drop(Multiply(n, -1), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 47.452229299363054,
                "explored_percent_lambda": 37.818471337579616,
                "explored_percent_none": 14.729299363057326,
                "kept_percent_concrete": 55.0,
                "kept_percent_lambda": 45.0,
                "num_examples": 3,
                "num_explored_concrete": 596,
                "num_explored_lambda": 475,
                "num_explored_none": 185,
                "num_inputs": 2,
                "num_kept_concrete": 253,
                "num_kept_lambda": 207,
                "num_values_explored": 1256,
                "num_values_kept": 460,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.9810720384120941,
            "num_unique_values": 157,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 10.169491525423728,
                "explored_percent_lambda": 71.46892655367232,
                "explored_percent_none": 18.361581920903955,
                "kept_percent_concrete": 19.594594594594593,
                "kept_percent_lambda": 80.4054054054054,
                "num_examples": 3,
                "num_explored_concrete": 36,
                "num_explored_lambda": 253,
                "num_explored_none": 65,
                "num_inputs": 1,
                "num_kept_concrete": 29,
                "num_kept_lambda": 119,
                "num_values_explored": 354,
                "num_values_kept": 148,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.8833369426429272,
            "num_unique_values": 156,
            "solution": "Drop(Subtract(i, j), Take(j, x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 25.526315789473685,
                "explored_percent_lambda": 49.473684210526315,
                "explored_percent_none": 25.0,
                "kept_percent_concrete": 41.37931034482759,
                "kept_percent_lambda": 58.62068965517241,
                "num_examples": 3,
                "num_explored_concrete": 97,
                "num_explored_lambda": 188,
                "num_explored_none": 95,
                "num_inputs": 3,
                "num_kept_concrete": 60,
                "num_kept_lambda": 85,
                "num_values_explored": 380,
                "num_values_kept": 145,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.132298819720745,
            "num_unique_values": 525,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Max(4, v1))(u1), Reverse(Sort(x)), Take(k, x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 56.49794801641587,
                "explored_percent_lambda": 31.46374829001368,
                "explored_percent_none": 12.038303693570452,
                "kept_percent_concrete": 64.85436893203884,
                "kept_percent_lambda": 35.14563106796116,
                "num_examples": 3,
                "num_explored_concrete": 826,
                "num_explored_lambda": 460,
                "num_explored_none": 176,
                "num_inputs": 2,
                "num_kept_concrete": 334,
                "num_kept_lambda": 181,
                "num_values_explored": 1462,
                "num_values_kept": 515,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.7501970455050468,
            "num_unique_values": 331,
            "solution": "Max(Access(k, x), Access(Subtract(1, k), x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 40.66073697585769,
                "explored_percent_lambda": 26.175349428208385,
                "explored_percent_none": 33.16391359593393,
                "kept_percent_concrete": 77.57009345794393,
                "kept_percent_lambda": 22.429906542056074,
                "num_examples": 5,
                "num_explored_concrete": 320,
                "num_explored_lambda": 206,
                "num_explored_none": 261,
                "num_inputs": 2,
                "num_kept_concrete": 249,
                "num_kept_lambda": 72,
                "num_values_explored": 787,
                "num_values_kept": 321,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0266135614365,
            "num_unique_values": 14744,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 83.57598581615353,
                "explored_percent_lambda": 5.38278698778757,
                "explored_percent_none": 11.041227196058893,
                "kept_percent_concrete": 91.29962673905666,
                "kept_percent_lambda": 8.700373260943332,
                "num_examples": 5,
                "num_explored_concrete": 193740,
                "num_explored_lambda": 12478,
                "num_explored_none": 25595,
                "num_inputs": 1,
                "num_kept_concrete": 13453,
                "num_kept_lambda": 1282,
                "num_values_explored": 231813,
                "num_values_kept": 14735,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.8271126057952642,
            "num_unique_values": 442,
            "solution": "Access(1, Sort(x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 39.29273084479372,
                "explored_percent_lambda": 40.66797642436149,
                "explored_percent_none": 20.039292730844792,
                "kept_percent_concrete": 53.11778290993072,
                "kept_percent_lambda": 46.88221709006928,
                "num_examples": 5,
                "num_explored_concrete": 400,
                "num_explored_lambda": 414,
                "num_explored_none": 204,
                "num_inputs": 1,
                "num_kept_concrete": 230,
                "num_kept_lambda": 203,
                "num_values_explored": 1018,
                "num_values_kept": 433,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.744059050455689,
            "num_unique_values": 1128,
            "solution": "IntDivide(Last(ZipWith(lambda u1, u2: (lambda v1: Subtract(Minimum(x), v1))(u2), x, Sort(x))), -1)",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 78.7725631768953,
                "explored_percent_lambda": 16.787003610108304,
                "explored_percent_none": 4.44043321299639,
                "kept_percent_concrete": 78.46291331546023,
                "kept_percent_lambda": 21.53708668453977,
                "num_examples": 5,
                "num_explored_concrete": 2182,
                "num_explored_lambda": 465,
                "num_explored_none": 123,
                "num_inputs": 1,
                "num_kept_concrete": 878,
                "num_kept_lambda": 241,
                "num_values_explored": 2770,
                "num_values_kept": 1119,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.024539610371,
            "num_unique_values": 17132,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 89.05918288739396,
                "explored_percent_lambda": 2.680562895814112,
                "explored_percent_none": 8.260254216791925,
                "kept_percent_concrete": 95.78320289685784,
                "kept_percent_lambda": 4.216797103142157,
                "num_examples": 5,
                "num_explored_concrete": 198846,
                "num_explored_lambda": 5985,
                "num_explored_none": 18443,
                "num_inputs": 2,
                "num_kept_concrete": 16400,
                "num_kept_lambda": 722,
                "num_values_explored": 223274,
                "num_values_kept": 17122,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3663191758096,
            "num_unique_values": 15310,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 84.30728335058691,
                "explored_percent_lambda": 2.9034267366167774,
                "explored_percent_none": 12.789289912796308,
                "kept_percent_concrete": 96.6797385620915,
                "kept_percent_lambda": 3.320261437908497,
                "num_examples": 5,
                "num_explored_concrete": 192197,
                "num_explored_lambda": 6619,
                "num_explored_none": 29156,
                "num_inputs": 2,
                "num_kept_concrete": 14792,
                "num_kept_lambda": 508,
                "num_values_explored": 227972,
                "num_values_kept": 15300,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.188973754644394,
            "num_unique_values": 251,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), x, Map(lambda u1: (lambda v1: Square(v1))(u1), x))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 19.581464872944693,
                "explored_percent_lambda": 57.24962630792227,
                "explored_percent_none": 23.168908819133033,
                "kept_percent_concrete": 37.1900826446281,
                "kept_percent_lambda": 62.8099173553719,
                "num_examples": 3,
                "num_explored_concrete": 131,
                "num_explored_lambda": 383,
                "num_explored_none": 155,
                "num_inputs": 1,
                "num_kept_concrete": 90,
                "num_kept_lambda": 152,
                "num_values_explored": 669,
                "num_values_kept": 242,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map(lambda u1: Multiply(u1, Square(u1)), x)'\n)",
            "task_solution": "Map(lambda u1: Multiply(u1, Square(u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0109527371824,
            "num_unique_values": 14405,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.83069112931956,
                "explored_percent_lambda": 22.72043106519416,
                "explored_percent_none": 5.448877805486284,
                "kept_percent_concrete": 55.30008335648791,
                "kept_percent_lambda": 44.69991664351209,
                "num_examples": 3,
                "num_explored_concrete": 161303,
                "num_explored_lambda": 51021,
                "num_explored_none": 12236,
                "num_inputs": 1,
                "num_kept_concrete": 7961,
                "num_kept_lambda": 6435,
                "num_values_explored": 224560,
                "num_values_kept": 14396,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map(lambda u1: Max(u1, Subtract(0, u1)), x)'\n)",
            "task_solution": "Map(lambda u1: Max(u1, Subtract(0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.6697139497846365,
            "num_unique_values": 530,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Subtract((lambda v1: Square(v1))(v2), v1))(u2, u1), x, x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 46.345029239766085,
                "explored_percent_lambda": 41.812865497076025,
                "explored_percent_none": 11.842105263157896,
                "kept_percent_concrete": 46.257197696737045,
                "kept_percent_lambda": 53.742802303262955,
                "num_examples": 3,
                "num_explored_concrete": 634,
                "num_explored_lambda": 572,
                "num_explored_none": 162,
                "num_inputs": 1,
                "num_kept_concrete": 241,
                "num_kept_lambda": 280,
                "num_values_explored": 1368,
                "num_values_kept": 521,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map(lambda u1: Subtract(Square(u1), u1), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(Square(u1), u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 461.4150751568377,
            "num_unique_values": 11032,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: IntDivide((lambda v1: Add(v1, (lambda v1: Square(v1))(v1)))(v1), 2))(u1), x, x)",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 73.59742721209476,
                "explored_percent_lambda": 21.573069718352663,
                "explored_percent_none": 4.8295030695525805,
                "kept_percent_concrete": 53.53352082010342,
                "kept_percent_lambda": 46.46647917989658,
                "num_examples": 3,
                "num_explored_concrete": 133190,
                "num_explored_lambda": 39041,
                "num_explored_none": 8740,
                "num_inputs": 1,
                "num_kept_concrete": 5901,
                "num_kept_lambda": 5122,
                "num_values_explored": 180971,
                "num_values_kept": 11023,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map(lambda u1: IntDivide(Add(Square(u1), u1), 2), x)'\n)",
            "task_solution": "Map(lambda u1: IntDivide(Add(Square(u1), u1), 2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 18.95944533869624,
            "num_unique_values": 1607,
            "solution": "Map(lambda u1: (lambda v1: Add(b, (lambda v1: Multiply(a, v1))(v1)))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 74.375,
                "explored_percent_lambda": 13.640873015873016,
                "explored_percent_none": 11.984126984126984,
                "kept_percent_concrete": 67.10526315789474,
                "kept_percent_lambda": 32.89473684210526,
                "num_examples": 3,
                "num_explored_concrete": 7497,
                "num_explored_lambda": 1375,
                "num_explored_none": 1208,
                "num_inputs": 3,
                "num_kept_concrete": 1071,
                "num_kept_lambda": 525,
                "num_values_explored": 10080,
                "num_values_kept": 1596,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map(lambda u1: Add(Multiply(a, u1), b), x)'\n)",
            "task_solution": "Map(lambda u1: Add(Multiply(a, u1), b), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 416.34956531226635,
            "num_unique_values": 10425,
            "solution": "Reverse(Map(lambda u1: (lambda v1: Subtract((lambda v1: Multiply(3, v1))(v1), 4))(u1), Reverse(x)))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 72.14537676595191,
                "explored_percent_lambda": 23.173779713193454,
                "explored_percent_none": 4.680843520854629,
                "kept_percent_concrete": 57.66129032258065,
                "kept_percent_lambda": 42.33870967741935,
                "num_examples": 3,
                "num_explored_concrete": 122101,
                "num_explored_lambda": 39220,
                "num_explored_none": 7922,
                "num_inputs": 1,
                "num_kept_concrete": 6006,
                "num_kept_lambda": 4410,
                "num_values_explored": 169243,
                "num_values_kept": 10416,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map(lambda u1: Subtract(Multiply(u1, 3), 4), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(Multiply(u1, 3), 4), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.2610517963767,
            "num_unique_values": 13366,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.30100483479268,
                "explored_percent_lambda": 24.80137245727781,
                "explored_percent_none": 4.897622707929505,
                "kept_percent_concrete": 57.258366399640636,
                "kept_percent_lambda": 42.741633600359364,
                "num_examples": 3,
                "num_explored_concrete": 157766,
                "num_explored_lambda": 55658,
                "num_explored_none": 10991,
                "num_inputs": 1,
                "num_kept_concrete": 7648,
                "num_kept_lambda": 5709,
                "num_values_explored": 224415,
                "num_values_kept": 13357,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map(lambda u1: Multiply(u1, Add(u1, 2)), x)'\n)",
            "task_solution": "Map(lambda u1: Multiply(u1, Add(u1, 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.9492661152034998,
            "num_unique_values": 253,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Max(a, (lambda v1: Min(b, v1))(v1)))(u1), x, x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 27.958833619210978,
                "explored_percent_lambda": 45.111492281303605,
                "explored_percent_none": 26.92967409948542,
                "kept_percent_concrete": 47.107438016528924,
                "kept_percent_lambda": 52.892561983471076,
                "num_examples": 3,
                "num_explored_concrete": 163,
                "num_explored_lambda": 263,
                "num_explored_none": 157,
                "num_inputs": 3,
                "num_kept_concrete": 114,
                "num_kept_lambda": 128,
                "num_values_explored": 583,
                "num_values_kept": 242,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map(lambda u1: Max(Min(u1, b), a), x)'\n)",
            "task_solution": "Map(lambda u1: Max(Min(u1, b), a), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0095684845,
            "num_unique_values": 13421,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.71864847303443,
                "explored_percent_lambda": 23.58934372969461,
                "explored_percent_none": 5.692007797270955,
                "kept_percent_concrete": 63.10766477781092,
                "kept_percent_lambda": 36.89233522218908,
                "num_examples": 3,
                "num_explored_concrete": 163254,
                "num_explored_lambda": 54456,
                "num_explored_none": 13140,
                "num_inputs": 1,
                "num_kept_concrete": 8464,
                "num_kept_lambda": 4948,
                "num_values_explored": 230850,
                "num_values_kept": 13412,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map(lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1)), x)'\n)",
            "task_solution": "Map(lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.1771160792559385,
            "num_unique_values": 482,
            "solution": "Sort(Reverse(Map(lambda u1: (lambda v1: Square(v1))(u1), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 52.225020990764065,
                "explored_percent_lambda": 36.85978169605374,
                "explored_percent_none": 10.9151973131822,
                "kept_percent_concrete": 44.18604651162791,
                "kept_percent_lambda": 55.81395348837209,
                "num_examples": 3,
                "num_explored_concrete": 622,
                "num_explored_lambda": 439,
                "num_explored_none": 130,
                "num_inputs": 1,
                "num_kept_concrete": 209,
                "num_kept_lambda": 264,
                "num_values_explored": 1191,
                "num_values_kept": 473,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map(lambda u1: Square(u1), x))'\n)",
            "task_solution": "Sort(Map(lambda u1: Square(u1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.195621842518449,
            "num_unique_values": 505,
            "solution": "Map(lambda u1: (lambda v1: Max(0, (lambda v1: Subtract(v1, Minimum(x)))(v1)))(u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 53.25542570951586,
                "explored_percent_lambda": 38.397328881469114,
                "explored_percent_none": 8.347245409015025,
                "kept_percent_concrete": 46.57258064516129,
                "kept_percent_lambda": 53.42741935483871,
                "num_examples": 3,
                "num_explored_concrete": 638,
                "num_explored_lambda": 460,
                "num_explored_none": 100,
                "num_inputs": 1,
                "num_kept_concrete": 231,
                "num_kept_lambda": 265,
                "num_values_explored": 1198,
                "num_values_kept": 496,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map(lambda u1: Subtract(u1, Minimum(x)), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(u1, Minimum(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.2133271619677544,
            "num_unique_values": 497,
            "solution": "Map(lambda u1: (lambda v1: Subtract(v1, Access(i, x)))(u1), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 62.65452179570592,
                "explored_percent_lambda": 23.162003903708523,
                "explored_percent_none": 14.183474300585557,
                "kept_percent_concrete": 67.96714579055441,
                "kept_percent_lambda": 32.03285420944559,
                "num_examples": 3,
                "num_explored_concrete": 963,
                "num_explored_lambda": 356,
                "num_explored_none": 218,
                "num_inputs": 2,
                "num_kept_concrete": 331,
                "num_kept_lambda": 156,
                "num_values_explored": 1537,
                "num_values_kept": 487,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map(lambda u1: Subtract(u1, Access(i, x)), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(u1, Access(i, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0166647229344,
            "num_unique_values": 11160,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.10995330991314,
                "explored_percent_lambda": 20.360813120775244,
                "explored_percent_none": 6.529233569311619,
                "kept_percent_concrete": 59.65022421524664,
                "kept_percent_lambda": 40.34977578475336,
                "num_examples": 3,
                "num_explored_concrete": 178351,
                "num_explored_lambda": 49670,
                "num_explored_none": 15928,
                "num_inputs": 2,
                "num_kept_concrete": 6651,
                "num_kept_lambda": 4499,
                "num_values_explored": 243949,
                "num_values_kept": 11150,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map(lambda u1: Add(u1, Subtract(t, Head(x))), x)'\n)",
            "task_solution": "Map(lambda u1: Add(u1, Subtract(t, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 25.261914493516088,
            "num_unique_values": 2162,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Access(v1, Take(Maximum(x), x)))(u1), i, i)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 75.32048697895671,
                "explored_percent_lambda": 21.801177134564217,
                "explored_percent_none": 2.8783358864790776,
                "kept_percent_concrete": 56.45910780669145,
                "kept_percent_lambda": 43.54089219330855,
                "num_examples": 3,
                "num_explored_concrete": 9342,
                "num_explored_lambda": 2704,
                "num_explored_none": 357,
                "num_inputs": 2,
                "num_kept_concrete": 1215,
                "num_kept_lambda": 937,
                "num_values_explored": 12403,
                "num_values_kept": 2152,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map(lambda u1: Access(u1, x), i)'\n)",
            "task_solution": "Map(lambda u1: Access(u1, x), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0511563848704,
            "num_unique_values": 18704,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 91.89882180413804,
                "explored_percent_lambda": 4.167634454145091,
                "explored_percent_none": 3.933543741716878,
                "kept_percent_concrete": 91.74601476409543,
                "kept_percent_lambda": 8.253985235904569,
                "num_examples": 5,
                "num_explored_concrete": 201785,
                "num_explored_lambda": 9151,
                "num_explored_none": 8637,
                "num_inputs": 2,
                "num_kept_concrete": 17151,
                "num_kept_lambda": 1543,
                "num_values_explored": 219573,
                "num_values_kept": 18694,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map(lambda u1: Access(u1, x), i))'\n)",
            "task_solution": "Maximum(Map(lambda u1: Access(u1, x), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.2740476801991463,
            "num_unique_values": 252,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: If((lambda v1: IsEven(v1))(v1), v1, 0))(u1), x, x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 28.143712574850298,
                "explored_percent_lambda": 53.0938123752495,
                "explored_percent_none": 18.7624750499002,
                "kept_percent_concrete": 39.91769547325103,
                "kept_percent_lambda": 60.08230452674897,
                "num_examples": 3,
                "num_explored_concrete": 141,
                "num_explored_lambda": 266,
                "num_explored_none": 94,
                "num_inputs": 1,
                "num_kept_concrete": 97,
                "num_kept_lambda": 146,
                "num_values_explored": 501,
                "num_values_kept": 243,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map(lambda u1: If(IsOdd(u1), 0, u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(IsOdd(u1), 0, u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0118624735624,
            "num_unique_values": 11859,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.6586097453213,
                "explored_percent_lambda": 20.820987178915537,
                "explored_percent_none": 5.520403075763165,
                "kept_percent_concrete": 62.03578663065496,
                "kept_percent_lambda": 37.96421336934504,
                "num_examples": 3,
                "num_explored_concrete": 181718,
                "num_explored_lambda": 51366,
                "num_explored_none": 13619,
                "num_inputs": 3,
                "num_kept_concrete": 7350,
                "num_kept_lambda": 4498,
                "num_values_explored": 246703,
                "num_values_kept": 11848,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map(lambda u1: If(Equal(u1, f), r, u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(Equal(u1, f), r, u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.2925295699388,
            "num_unique_values": 12633,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.76237649528535,
                "explored_percent_lambda": 28.78538155258113,
                "explored_percent_none": 4.4522419521335195,
                "kept_percent_concrete": 52.75291135229343,
                "kept_percent_lambda": 47.24708864770657,
                "num_examples": 3,
                "num_explored_concrete": 153926,
                "num_explored_lambda": 66367,
                "num_explored_none": 10265,
                "num_inputs": 2,
                "num_kept_concrete": 6659,
                "num_kept_lambda": 5964,
                "num_values_explored": 230558,
                "num_values_kept": 12623,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map(lambda u1: If(Less(u1, 0), y, u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(Less(u1, 0), y, u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 9.258451355621219,
            "num_unique_values": 1046,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Add(v1, Last(x)))(u1), x, Take(-1, x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 72.48714352501169,
                "explored_percent_lambda": 20.149602618045815,
                "explored_percent_none": 7.363253856942497,
                "kept_percent_concrete": 62.295081967213115,
                "kept_percent_lambda": 37.704918032786885,
                "num_examples": 3,
                "num_explored_concrete": 3101,
                "num_explored_lambda": 862,
                "num_explored_none": 315,
                "num_inputs": 1,
                "num_kept_concrete": 646,
                "num_kept_lambda": 391,
                "num_values_explored": 4278,
                "num_values_kept": 1037,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map(lambda u1: Add(u1, Last(x)), x))'\n)",
            "task_solution": "Take(-1, Map(lambda u1: Add(u1, Last(x)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.5474229361861944,
            "num_unique_values": 214,
            "solution": "Map(lambda u1: Head(x), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 24.48,
                "explored_percent_lambda": 60.96,
                "explored_percent_none": 14.56,
                "kept_percent_concrete": 40.0,
                "kept_percent_lambda": 60.0,
                "num_examples": 3,
                "num_explored_concrete": 153,
                "num_explored_lambda": 381,
                "num_explored_none": 91,
                "num_inputs": 1,
                "num_kept_concrete": 82,
                "num_kept_lambda": 123,
                "num_values_explored": 625,
                "num_values_kept": 205,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map(lambda u1: Head(x), x)'\n)",
            "task_solution": "Map(lambda u1: Head(x), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.5874234959483147,
            "num_unique_values": 243,
            "solution": "Count(lambda u1: (lambda v1: IsOdd(v1))(u1), Map(lambda u1: 1, x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 19.817073170731707,
                "explored_percent_lambda": 52.13414634146341,
                "explored_percent_none": 28.048780487804876,
                "kept_percent_concrete": 47.00854700854701,
                "kept_percent_lambda": 52.99145299145299,
                "num_examples": 5,
                "num_explored_concrete": 130,
                "num_explored_lambda": 342,
                "num_explored_none": 184,
                "num_inputs": 1,
                "num_kept_concrete": 110,
                "num_kept_lambda": 124,
                "num_values_explored": 656,
                "num_values_kept": 234,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map(lambda u1: 1, x))'\n)",
            "task_solution": "Sum(Map(lambda u1: 1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0102252792567,
            "num_unique_values": 15599,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 89.2281800595109,
                "explored_percent_lambda": 3.2136753619668093,
                "explored_percent_none": 7.558144578522291,
                "kept_percent_concrete": 93.17511225144324,
                "kept_percent_lambda": 6.824887748556767,
                "num_examples": 5,
                "num_explored_concrete": 205712,
                "num_explored_lambda": 7409,
                "num_explored_none": 17425,
                "num_inputs": 1,
                "num_kept_concrete": 14526,
                "num_kept_lambda": 1064,
                "num_values_explored": 230546,
                "num_values_kept": 15590,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map(lambda u1: 1, x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map(lambda u1: 1, x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.7156777773052454,
            "num_unique_values": 225,
            "solution": "Map(lambda u1: (lambda v1: If((lambda v1: Greater(v1, y))(v1), 1, 0))(u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 31.0192023633678,
                "explored_percent_lambda": 35.15509601181684,
                "explored_percent_none": 33.82570162481536,
                "kept_percent_concrete": 62.325581395348834,
                "kept_percent_lambda": 37.674418604651166,
                "num_examples": 3,
                "num_explored_concrete": 210,
                "num_explored_lambda": 238,
                "num_explored_none": 229,
                "num_inputs": 2,
                "num_kept_concrete": 134,
                "num_kept_lambda": 81,
                "num_values_explored": 677,
                "num_values_kept": 215,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map(lambda u1: If(Greater(u1, y), 1, 0), x)'\n)",
            "task_solution": "Map(lambda u1: If(Greater(u1, y), 1, 0), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0104283299297,
            "num_unique_values": 12351,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.20139847116288,
                "explored_percent_lambda": 22.145705118980096,
                "explored_percent_none": 6.6528964098570205,
                "kept_percent_concrete": 56.31988332523092,
                "kept_percent_lambda": 43.68011667476908,
                "num_examples": 3,
                "num_explored_concrete": 168219,
                "num_explored_lambda": 52321,
                "num_explored_none": 15718,
                "num_inputs": 1,
                "num_kept_concrete": 6951,
                "num_kept_lambda": 5391,
                "num_values_explored": 236258,
                "num_values_kept": 12342,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map(lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.31690146029,
            "num_unique_values": 13514,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.35707016803595,
                "explored_percent_lambda": 19.181827959658136,
                "explored_percent_none": 4.461101872305923,
                "kept_percent_concrete": 66.15817535545024,
                "kept_percent_lambda": 33.84182464454976,
                "num_examples": 3,
                "num_explored_concrete": 184581,
                "num_explored_lambda": 46369,
                "num_explored_none": 10784,
                "num_inputs": 2,
                "num_kept_concrete": 8934,
                "num_kept_lambda": 4570,
                "num_values_explored": 241734,
                "num_values_kept": 13504,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map(lambda u1: If(IsOdd(u1), Multiply(u1, n), u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(IsOdd(u1), Multiply(u1, n), u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.2606048434972763,
            "num_unique_values": 506,
            "solution": "Filter(lambda u1: (lambda v1: Less(y, v1))(u1), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 57.69230769230769,
                "explored_percent_lambda": 27.99145299145299,
                "explored_percent_none": 14.316239316239317,
                "kept_percent_concrete": 65.5241935483871,
                "kept_percent_lambda": 34.475806451612904,
                "num_examples": 3,
                "num_explored_concrete": 810,
                "num_explored_lambda": 393,
                "num_explored_none": 201,
                "num_inputs": 2,
                "num_kept_concrete": 325,
                "num_kept_lambda": 171,
                "num_values_explored": 1404,
                "num_values_kept": 496,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter(lambda u1: Greater(u1, y), x)'\n)",
            "task_solution": "Filter(lambda u1: Greater(u1, y), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.5992910359054804,
            "num_unique_values": 222,
            "solution": "Filter(lambda u1: (lambda v1: IsEven(v1))(u1), Sort(x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 25.0,
                "explored_percent_lambda": 54.60122699386503,
                "explored_percent_none": 20.39877300613497,
                "kept_percent_concrete": 41.31455399061033,
                "kept_percent_lambda": 58.68544600938967,
                "num_examples": 3,
                "num_explored_concrete": 163,
                "num_explored_lambda": 356,
                "num_explored_none": 133,
                "num_inputs": 1,
                "num_kept_concrete": 88,
                "num_kept_lambda": 125,
                "num_values_explored": 652,
                "num_values_kept": 213,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter(lambda u1: IsEven(u1), Sort(x))'\n)",
            "task_solution": "Filter(lambda u1: IsEven(u1), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.548795809969306,
            "num_unique_values": 456,
            "solution": "Maximum(Filter(lambda u1: (lambda v1: IsOdd(v1))(u1), Reverse(x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 41.952983725135624,
                "explored_percent_lambda": 41.41048824593128,
                "explored_percent_none": 16.636528028933093,
                "kept_percent_concrete": 63.982102908277405,
                "kept_percent_lambda": 36.017897091722595,
                "num_examples": 5,
                "num_explored_concrete": 464,
                "num_explored_lambda": 458,
                "num_explored_none": 184,
                "num_inputs": 1,
                "num_kept_concrete": 286,
                "num_kept_lambda": 161,
                "num_values_explored": 1106,
                "num_values_kept": 447,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter(lambda u1: IsOdd(u1), x))'\n)",
            "task_solution": "Maximum(Filter(lambda u1: IsOdd(u1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 9.566088927909732,
            "num_unique_values": 1294,
            "solution": "Filter(lambda u1: (lambda v1: IsOdd(v1))(u1), Filter(lambda u1: (lambda v1: Less(v1, 0))(u1), x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 71.4975845410628,
                "explored_percent_lambda": 22.024593763724198,
                "explored_percent_none": 6.477821695213,
                "kept_percent_concrete": 65.13618677042801,
                "kept_percent_lambda": 34.86381322957198,
                "num_examples": 3,
                "num_explored_concrete": 3256,
                "num_explored_lambda": 1003,
                "num_explored_none": 295,
                "num_inputs": 1,
                "num_kept_concrete": 837,
                "num_kept_lambda": 448,
                "num_values_explored": 4554,
                "num_values_kept": 1285,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter(lambda u1: IsOdd(Min(u1, 0)), x)'\n)",
            "task_solution": "Filter(lambda u1: IsOdd(Min(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.1167832650244236,
            "num_unique_values": 492,
            "solution": "Sum(Filter(lambda u1: (lambda v1: Greater(v1, -1))(u1), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 54.09090909090909,
                "explored_percent_lambda": 36.47727272727273,
                "explored_percent_none": 9.431818181818182,
                "kept_percent_concrete": 65.0103519668737,
                "kept_percent_lambda": 34.989648033126294,
                "num_examples": 5,
                "num_explored_concrete": 476,
                "num_explored_lambda": 321,
                "num_explored_none": 83,
                "num_inputs": 1,
                "num_kept_concrete": 314,
                "num_kept_lambda": 169,
                "num_values_explored": 880,
                "num_values_kept": 483,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter(lambda u1: Greater(u1, 0), x))'\n)",
            "task_solution": "Sum(Filter(lambda u1: Greater(u1, 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.5880796909332275,
            "num_unique_values": 469,
            "solution": "Reverse(Take(Count(lambda u1: (lambda v1: Greater(0, v1))(u1), x), Sort(x)))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 55.10548523206751,
                "explored_percent_lambda": 36.28691983122363,
                "explored_percent_none": 8.60759493670886,
                "kept_percent_concrete": 58.91304347826087,
                "kept_percent_lambda": 41.08695652173913,
                "num_examples": 3,
                "num_explored_concrete": 653,
                "num_explored_lambda": 430,
                "num_explored_none": 102,
                "num_inputs": 1,
                "num_kept_concrete": 271,
                "num_kept_lambda": 189,
                "num_values_explored": 1185,
                "num_values_kept": 460,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter(lambda u1: Less(u1, 0), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter(lambda u1: Less(u1, 0), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 238.5017293933779,
            "num_unique_values": 8820,
            "solution": "Filter(lambda u1: (lambda v1: Greater(b, v1))(u1), Filter(lambda u1: (lambda v1: Less(a, v1))(u1), x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 74.86386344305728,
                "explored_percent_lambda": 18.95451034833361,
                "explored_percent_none": 6.18162620860911,
                "kept_percent_concrete": 71.41559768418662,
                "kept_percent_lambda": 28.584402315813374,
                "num_examples": 3,
                "num_explored_concrete": 76576,
                "num_explored_lambda": 19388,
                "num_explored_none": 6323,
                "num_inputs": 3,
                "num_kept_concrete": 6291,
                "num_kept_lambda": 2518,
                "num_values_explored": 102287,
                "num_values_kept": 8809,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter(lambda u1: Less(u1, b), Filter(lambda u1: Greater(u1, a), x))'\n)",
            "task_solution": "Filter(lambda u1: Less(u1, b), Filter(lambda u1: Greater(u1, a), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.1872453112155,
            "num_unique_values": 15230,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.01314034744573,
                "explored_percent_lambda": 21.366400540550153,
                "explored_percent_none": 4.620459112004125,
                "kept_percent_concrete": 64.85545335085413,
                "kept_percent_lambda": 35.14454664914586,
                "num_examples": 3,
                "num_explored_concrete": 166497,
                "num_explored_lambda": 48065,
                "num_explored_none": 10394,
                "num_inputs": 2,
                "num_kept_concrete": 9871,
                "num_kept_lambda": 5349,
                "num_values_explored": 224956,
                "num_values_kept": 15220,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter(lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n)), x)'\n)",
            "task_solution": "Filter(lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3999721091241,
            "num_unique_values": 14810,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.14281877031347,
                "explored_percent_lambda": 18.38978574050695,
                "explored_percent_none": 4.467395489179582,
                "kept_percent_concrete": 69.25675675675676,
                "kept_percent_lambda": 30.743243243243242,
                "num_examples": 3,
                "num_explored_concrete": 172317,
                "num_explored_lambda": 41078,
                "num_explored_none": 9979,
                "num_inputs": 2,
                "num_kept_concrete": 10250,
                "num_kept_lambda": 4550,
                "num_values_explored": 223374,
                "num_values_kept": 14800,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter(lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1)), x)'\n)",
            "task_solution": "Filter(lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3352171964943,
            "num_unique_values": 14036,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 79.98077320467553,
                "explored_percent_lambda": 16.831531944332138,
                "explored_percent_none": 3.187694850992336,
                "kept_percent_concrete": 61.19626434733015,
                "kept_percent_lambda": 38.80373565266985,
                "num_examples": 3,
                "num_explored_concrete": 178042,
                "num_explored_lambda": 37468,
                "num_explored_none": 7096,
                "num_inputs": 1,
                "num_kept_concrete": 8584,
                "num_kept_lambda": 5443,
                "num_values_explored": 222606,
                "num_values_kept": 14027,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter(lambda u1: Equal(u1, Access(u1, x)), x))'\n)",
            "task_solution": "Sort(Filter(lambda u1: Equal(u1, Access(u1, x)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3642079476267,
            "num_unique_values": 15513,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.80741777210768,
                "explored_percent_lambda": 17.742385374798232,
                "explored_percent_none": 6.450196853094091,
                "kept_percent_concrete": 71.15856018578248,
                "kept_percent_lambda": 28.84143981421752,
                "num_examples": 3,
                "num_explored_concrete": 165784,
                "num_explored_lambda": 38801,
                "num_explored_none": 14106,
                "num_inputs": 3,
                "num_kept_concrete": 11031,
                "num_kept_lambda": 4471,
                "num_values_explored": 218691,
                "num_values_kept": 15502,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter(lambda u1: Equal(Access(u1, x), y), i)'\n)",
            "task_solution": "Filter(lambda u1: Equal(Access(u1, x), y), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 28.327340219169855,
            "num_unique_values": 2449,
            "solution": "Sum(Map(lambda u1: 1, Filter(lambda u1: (lambda v1: Equal(v1, n))(u1), x)))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 89.45802612857328,
                "explored_percent_lambda": 4.902341223645065,
                "explored_percent_none": 5.639632647781658,
                "kept_percent_concrete": 87.20787207872078,
                "kept_percent_lambda": 12.792127921279214,
                "num_examples": 5,
                "num_explored_concrete": 13832,
                "num_explored_lambda": 758,
                "num_explored_none": 872,
                "num_inputs": 2,
                "num_kept_concrete": 2127,
                "num_kept_lambda": 312,
                "num_values_explored": 15462,
                "num_values_kept": 2439,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count(lambda u1: Equal(u1, n), x)'\n)",
            "task_solution": "Count(lambda u1: Equal(u1, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.6318758465349674,
            "num_unique_values": 246,
            "solution": "Count(lambda u1: (lambda v1: Less(v1, q))(u1), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 30.804953560371516,
                "explored_percent_lambda": 35.139318885448915,
                "explored_percent_none": 34.05572755417957,
                "kept_percent_concrete": 67.37288135593221,
                "kept_percent_lambda": 32.6271186440678,
                "num_examples": 5,
                "num_explored_concrete": 199,
                "num_explored_lambda": 227,
                "num_explored_none": 220,
                "num_inputs": 2,
                "num_kept_concrete": 159,
                "num_kept_lambda": 77,
                "num_values_explored": 646,
                "num_values_kept": 236,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count(lambda u1: Less(u1, q), x)'\n)",
            "task_solution": "Count(lambda u1: Less(u1, q), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 6.105655085295439,
            "num_unique_values": 1061,
            "solution": "Count(lambda u1: (lambda v1: Greater(Head(x), v1))(u1), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 73.12803889789303,
                "explored_percent_lambda": 18.022690437601298,
                "explored_percent_none": 8.849270664505672,
                "kept_percent_concrete": 76.52091254752851,
                "kept_percent_lambda": 23.479087452471482,
                "num_examples": 5,
                "num_explored_concrete": 2256,
                "num_explored_lambda": 556,
                "num_explored_none": 273,
                "num_inputs": 1,
                "num_kept_concrete": 805,
                "num_kept_lambda": 247,
                "num_values_explored": 3085,
                "num_values_kept": 1052,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count(lambda u1: Less(u1, Head(x)), x)'\n)",
            "task_solution": "Count(lambda u1: Less(u1, Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 60.447647750377655,
            "num_unique_values": 5001,
            "solution": "Count(lambda u1: (lambda v1: Greater(0, v1))(u1), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 88.09792843691149,
                "explored_percent_lambda": 6.122239342578325,
                "explored_percent_none": 5.779832220510187,
                "kept_percent_concrete": 85.21634615384616,
                "kept_percent_lambda": 14.783653846153847,
                "num_examples": 5,
                "num_explored_concrete": 25729,
                "num_explored_lambda": 1788,
                "num_explored_none": 1688,
                "num_inputs": 1,
                "num_kept_concrete": 4254,
                "num_kept_lambda": 738,
                "num_values_explored": 29205,
                "num_values_kept": 4992,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count(lambda u1: Less(u1, 0), x)'\n)",
            "task_solution": "Count(lambda u1: Less(u1, 0), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 8.08319167047739,
            "num_unique_values": 1316,
            "solution": "Count(lambda u1: (lambda v1: Equal(v1, Last(x)))(u1), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 79.35153583617748,
                "explored_percent_lambda": 13.700633837152608,
                "explored_percent_none": 6.9478303266699175,
                "kept_percent_concrete": 80.26013771996939,
                "kept_percent_lambda": 19.739862280030604,
                "num_examples": 5,
                "num_explored_concrete": 3255,
                "num_explored_lambda": 562,
                "num_explored_none": 285,
                "num_inputs": 1,
                "num_kept_concrete": 1049,
                "num_kept_lambda": 258,
                "num_values_explored": 4102,
                "num_values_kept": 1307,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count(lambda u1: Equal(u1, Last(x)), x)'\n)",
            "task_solution": "Count(lambda u1: Equal(u1, Last(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0296010356396,
            "num_unique_values": 17034,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 91.17990447549974,
                "explored_percent_lambda": 1.9865558110737662,
                "explored_percent_none": 6.833539713426499,
                "kept_percent_concrete": 93.49741541353383,
                "kept_percent_lambda": 6.502584586466165,
                "num_examples": 5,
                "num_explored_concrete": 206176,
                "num_explored_lambda": 4492,
                "num_explored_none": 15452,
                "num_inputs": 2,
                "num_kept_concrete": 15917,
                "num_kept_lambda": 1107,
                "num_values_explored": 226120,
                "num_values_kept": 17024,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count(lambda u1: Equal(u1, Access(i, x)), x)'\n)",
            "task_solution": "Count(lambda u1: Equal(u1, Access(i, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3268892727792,
            "num_unique_values": 17224,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 91.00195996911563,
                "explored_percent_lambda": 5.052973990433157,
                "explored_percent_none": 3.945066040451204,
                "kept_percent_concrete": 88.40546035434214,
                "kept_percent_lambda": 11.594539645657857,
                "num_examples": 5,
                "num_explored_concrete": 199186,
                "num_explored_lambda": 11060,
                "num_explored_none": 8635,
                "num_inputs": 1,
                "num_kept_concrete": 15219,
                "num_kept_lambda": 1996,
                "num_values_explored": 218881,
                "num_values_kept": 17215,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count(lambda u1: IsEven(Min(u1, 0)), x)'\n)",
            "task_solution": "Count(lambda u1: IsEven(Min(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3460786901414,
            "num_unique_values": 19951,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 87.18693800747772,
                "explored_percent_lambda": 6.009614206680943,
                "explored_percent_none": 6.803447785841341,
                "kept_percent_concrete": 89.08780903665814,
                "kept_percent_lambda": 10.912190963341859,
                "num_examples": 5,
                "num_explored_concrete": 177925,
                "num_explored_lambda": 12264,
                "num_explored_none": 13884,
                "num_inputs": 2,
                "num_kept_concrete": 17765,
                "num_kept_lambda": 2176,
                "num_values_explored": 204073,
                "num_values_kept": 19941,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count(lambda u1: Equal(u1, 0), x), Count(lambda u1: Equal(u1, 0), y))'\n)",
            "task_solution": "Add(Count(lambda u1: Equal(u1, 0), x), Count(lambda u1: Equal(u1, 0), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.2465379256755114,
            "num_unique_values": 425,
            "solution": "Take(Count(lambda u1: (lambda v1: Less(0, v1))(u1), r), Sort(c))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 40.66225165562914,
                "explored_percent_lambda": 50.59602649006622,
                "explored_percent_none": 8.741721854304636,
                "kept_percent_concrete": 46.265060240963855,
                "kept_percent_lambda": 53.734939759036145,
                "num_examples": 3,
                "num_explored_concrete": 307,
                "num_explored_lambda": 382,
                "num_explored_none": 66,
                "num_inputs": 2,
                "num_kept_concrete": 192,
                "num_kept_lambda": 223,
                "num_values_explored": 755,
                "num_values_kept": 415,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count(lambda u1: Greater(u1, 0), r), Sort(c))'\n)",
            "task_solution": "Take(Count(lambda u1: Greater(u1, 0), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0325408279896,
            "num_unique_values": 17600,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 94.40361384179661,
                "explored_percent_lambda": 2.472066977008888,
                "explored_percent_none": 3.1243191811945064,
                "kept_percent_concrete": 95.99772598067084,
                "kept_percent_lambda": 4.002274019329164,
                "num_examples": 5,
                "num_explored_concrete": 212326,
                "num_explored_lambda": 5560,
                "num_explored_none": 7027,
                "num_inputs": 2,
                "num_kept_concrete": 16886,
                "num_kept_lambda": 704,
                "num_values_explored": 224913,
                "num_values_kept": 17590,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith(lambda u1, u2: Add(Multiply(u1, 3), u2), w, t))'\n)",
            "task_solution": "Maximum(ZipWith(lambda u1, u2: Add(Multiply(u1, 3), u2), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3266098052263,
            "num_unique_values": 17960,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 90.51499640804597,
                "explored_percent_lambda": 3.1663074712643677,
                "explored_percent_none": 6.318696120689655,
                "kept_percent_concrete": 96.42896935933148,
                "kept_percent_lambda": 3.5710306406685235,
                "num_examples": 5,
                "num_explored_concrete": 201595,
                "num_explored_lambda": 7052,
                "num_explored_none": 14073,
                "num_inputs": 2,
                "num_kept_concrete": 17309,
                "num_kept_lambda": 641,
                "num_values_explored": 222720,
                "num_values_kept": 17950,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.764918264001608,
            "num_unique_values": 252,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Min(v1, v2))(u1, u2), a, Reverse(a))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 27.593360995850624,
                "explored_percent_lambda": 57.261410788381745,
                "explored_percent_none": 15.145228215767634,
                "kept_percent_concrete": 39.09465020576132,
                "kept_percent_lambda": 60.90534979423868,
                "num_examples": 3,
                "num_explored_concrete": 133,
                "num_explored_lambda": 276,
                "num_explored_none": 73,
                "num_inputs": 1,
                "num_kept_concrete": 95,
                "num_kept_lambda": 148,
                "num_values_explored": 482,
                "num_values_kept": 243,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith(lambda u1, u2: Min(u1, u2), a, Reverse(a))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Min(u1, u2), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0120555870235,
            "num_unique_values": 17935,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 93.55541342588658,
                "explored_percent_lambda": 2.3257582195426307,
                "explored_percent_none": 4.118828354570786,
                "kept_percent_concrete": 95.36401673640168,
                "kept_percent_lambda": 4.635983263598327,
                "num_examples": 5,
                "num_explored_concrete": 209174,
                "num_explored_lambda": 5200,
                "num_explored_none": 9209,
                "num_inputs": 2,
                "num_kept_concrete": 17094,
                "num_kept_lambda": 831,
                "num_values_explored": 223583,
                "num_values_kept": 17925,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith(lambda u1, u2: Add(u1, u2), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith(lambda u1, u2: Add(u1, u2), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3406921159476,
            "num_unique_values": 14937,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 93.20827386990835,
                "explored_percent_lambda": 3.869134613731323,
                "explored_percent_none": 2.9225915163603227,
                "kept_percent_concrete": 93.12031082529475,
                "kept_percent_lambda": 6.879689174705252,
                "num_examples": 5,
                "num_explored_concrete": 216836,
                "num_explored_lambda": 9001,
                "num_explored_none": 6799,
                "num_inputs": 1,
                "num_kept_concrete": 13901,
                "num_kept_lambda": 1027,
                "num_values_explored": 232636,
                "num_values_kept": 14928,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith(lambda u1, u2: Max(Subtract(u1, u2), 0), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Max(Subtract(u1, u2), 0), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3479889985174,
            "num_unique_values": 18657,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 91.73530247088895,
                "explored_percent_lambda": 2.5705253257969747,
                "explored_percent_none": 5.694172203314073,
                "kept_percent_concrete": 96.37475197082641,
                "kept_percent_lambda": 3.625248029173594,
                "num_examples": 5,
                "num_explored_concrete": 197030,
                "num_explored_lambda": 5521,
                "num_explored_none": 12230,
                "num_inputs": 2,
                "num_kept_concrete": 17971,
                "num_kept_lambda": 676,
                "num_values_explored": 214781,
                "num_values_kept": 18647,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, y))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3336765095592,
            "num_unique_values": 12584,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.57179932913841,
                "explored_percent_lambda": 23.618898383239888,
                "explored_percent_none": 3.8093022876217058,
                "kept_percent_concrete": 56.91108636869731,
                "kept_percent_lambda": 43.08891363130269,
                "num_examples": 3,
                "num_explored_concrete": 177843,
                "num_explored_lambda": 57880,
                "num_explored_none": 9335,
                "num_inputs": 2,
                "num_kept_concrete": 7156,
                "num_kept_lambda": 5418,
                "num_values_explored": 245058,
                "num_values_kept": 12574,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith(lambda u1, u2: IntDivide(Add(u1, u2), 2), x, y)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: IntDivide(Add(u1, u2), 2), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3104512318969,
            "num_unique_values": 12120,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.00022838739147,
                "explored_percent_lambda": 18.40299148773095,
                "explored_percent_none": 4.59678012487758,
                "kept_percent_concrete": 59.963663390866294,
                "kept_percent_lambda": 40.036336609133706,
                "num_examples": 3,
                "num_explored_concrete": 198917,
                "num_explored_lambda": 47541,
                "num_explored_none": 11875,
                "num_inputs": 3,
                "num_kept_concrete": 7261,
                "num_kept_lambda": 4848,
                "num_values_explored": 258333,
                "num_values_kept": 12109,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith(lambda u1, u2: Add(u1, u2), a, ZipWith(lambda u1, u2: Add(u1, u2), b, c))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Add(u1, u2), a, ZipWith(lambda u1, u2: Add(u1, u2), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.2888471484184,
            "num_unique_values": 13166,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.91979012900327,
                "explored_percent_lambda": 21.61767537385277,
                "explored_percent_none": 2.4625344971439573,
                "kept_percent_concrete": 60.40589844937671,
                "kept_percent_lambda": 39.59410155062329,
                "num_examples": 3,
                "num_explored_concrete": 189265,
                "num_explored_lambda": 53892,
                "num_explored_none": 6139,
                "num_inputs": 2,
                "num_kept_concrete": 7947,
                "num_kept_lambda": 5209,
                "num_values_explored": 249296,
                "num_values_kept": 13156,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith(lambda u1, u2: IntDivide(u1, u2), m, n))'\n)",
            "task_solution": "Sort(ZipWith(lambda u1, u2: IntDivide(u1, u2), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 163.2035618480295,
            "num_unique_values": 6458,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Subtract(v1, v2))(u1, u2), Drop(1, x), Take(-1, x))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 70.07097686581103,
                "explored_percent_lambda": 24.142807588654374,
                "explored_percent_none": 5.786215545534595,
                "kept_percent_concrete": 51.635912544580556,
                "kept_percent_lambda": 48.364087455419444,
                "num_examples": 3,
                "num_explored_concrete": 52521,
                "num_explored_lambda": 18096,
                "num_explored_none": 4337,
                "num_inputs": 1,
                "num_kept_concrete": 3330,
                "num_kept_lambda": 3119,
                "num_values_explored": 74954,
                "num_values_kept": 6449,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith(lambda u1, u2: Subtract(u2, u1), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Subtract(u2, u1), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.1719043198973,
            "num_unique_values": 19276,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 88.50374624254117,
                "explored_percent_lambda": 4.035622953026157,
                "explored_percent_none": 7.46063080443268,
                "kept_percent_concrete": 93.65202948198899,
                "kept_percent_lambda": 6.347970518011004,
                "num_examples": 5,
                "num_explored_concrete": 197266,
                "num_explored_lambda": 8995,
                "num_explored_none": 16629,
                "num_inputs": 2,
                "num_kept_concrete": 18043,
                "num_kept_lambda": 1223,
                "num_values_explored": 222890,
                "num_values_kept": 19266,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, m))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3520452845842,
            "num_unique_values": 14030,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.466993736776,
                "explored_percent_lambda": 26.543256707887615,
                "explored_percent_none": 3.9897495553363846,
                "kept_percent_concrete": 56.82596291012839,
                "kept_percent_lambda": 43.17403708987161,
                "num_examples": 3,
                "num_explored_concrete": 164816,
                "num_explored_lambda": 62976,
                "num_explored_none": 9466,
                "num_inputs": 2,
                "num_kept_concrete": 7967,
                "num_kept_lambda": 6053,
                "num_values_explored": 237258,
                "num_values_kept": 14020,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith(lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1)), x, y)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3927131276578,
            "num_unique_values": 16126,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 87.52488023750084,
                "explored_percent_lambda": 2.4905539437284934,
                "explored_percent_none": 9.984565818770664,
                "kept_percent_concrete": 96.6306775874907,
                "kept_percent_lambda": 3.3693224125093075,
                "num_examples": 5,
                "num_explored_concrete": 207553,
                "num_explored_lambda": 5906,
                "num_explored_none": 23677,
                "num_inputs": 2,
                "num_kept_concrete": 15573,
                "num_kept_lambda": 543,
                "num_values_explored": 237136,
                "num_values_kept": 16116,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith(lambda u1, u2: Square(Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Square(Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.292189931497,
            "num_unique_values": 14089,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.10850880599787,
                "explored_percent_lambda": 22.913324665236992,
                "explored_percent_none": 7.978166528765134,
                "kept_percent_concrete": 51.45251793451239,
                "kept_percent_lambda": 48.54748206548761,
                "num_examples": 3,
                "num_explored_concrete": 163707,
                "num_explored_lambda": 54278,
                "num_explored_none": 18899,
                "num_inputs": 2,
                "num_kept_concrete": 7244,
                "num_kept_lambda": 6835,
                "num_values_explored": 236884,
                "num_values_kept": 14079,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith(lambda u1, u2: If(Equal(u1, u2), 1, 0), x, y)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: If(Equal(u1, u2), 1, 0), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3604076709598,
            "num_unique_values": 12658,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.3273544368668,
                "explored_percent_lambda": 18.602120865691646,
                "explored_percent_none": 3.070524697441558,
                "kept_percent_concrete": 64.51612903225806,
                "kept_percent_lambda": 35.483870967741936,
                "num_examples": 3,
                "num_explored_concrete": 198693,
                "num_explored_lambda": 47188,
                "num_explored_none": 7789,
                "num_inputs": 2,
                "num_kept_concrete": 8160,
                "num_kept_lambda": 4488,
                "num_values_explored": 253670,
                "num_values_kept": 12648,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith(lambda u1, u2: Min(u1, u2), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Min(u1, u2), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3581032119691,
            "num_unique_values": 12166,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.46491135921474,
                "explored_percent_lambda": 22.63691103986419,
                "explored_percent_none": 3.8981776009210742,
                "kept_percent_concrete": 56.62581228921609,
                "kept_percent_lambda": 43.37418771078391,
                "num_examples": 3,
                "num_explored_concrete": 174834,
                "num_explored_lambda": 53872,
                "num_explored_none": 9277,
                "num_inputs": 1,
                "num_kept_concrete": 6884,
                "num_kept_lambda": 5273,
                "num_values_explored": 237983,
                "num_values_kept": 12157,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith(lambda u1, u2: Add(u1, u2), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Add(u1, u2), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3778752032667,
            "num_unique_values": 19356,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 92.31684299757868,
                "explored_percent_lambda": 2.6367676881214317,
                "explored_percent_none": 5.046389314299899,
                "kept_percent_concrete": 96.20613014937716,
                "kept_percent_lambda": 3.7938698506228357,
                "num_examples": 5,
                "num_explored_concrete": 197114,
                "num_explored_lambda": 5630,
                "num_explored_none": 10775,
                "num_inputs": 1,
                "num_kept_concrete": 18613,
                "num_kept_lambda": 734,
                "num_values_explored": 213519,
                "num_values_kept": 19347,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3563592899591,
            "num_unique_values": 12178,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.65891132031278,
                "explored_percent_lambda": 24.77409917036148,
                "explored_percent_none": 2.5669895093257287,
                "kept_percent_concrete": 53.41880341880342,
                "kept_percent_lambda": 46.58119658119658,
                "num_examples": 3,
                "num_explored_concrete": 176822,
                "num_explored_lambda": 60290,
                "num_explored_none": 6247,
                "num_inputs": 2,
                "num_kept_concrete": 6500,
                "num_kept_lambda": 5668,
                "num_values_explored": 243359,
                "num_values_kept": 12168,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith(lambda u1, u2: Multiply(u1, Add(1, u2)), p, w)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Multiply(u1, Add(1, u2)), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3343508988619,
            "num_unique_values": 17076,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 94.14778554569762,
                "explored_percent_lambda": 3.440029021466032,
                "explored_percent_none": 2.4121854328363557,
                "kept_percent_concrete": 92.5235835237593,
                "kept_percent_lambda": 7.476416476240699,
                "num_examples": 5,
                "num_explored_concrete": 210216,
                "num_explored_lambda": 7681,
                "num_explored_none": 5386,
                "num_inputs": 1,
                "num_kept_concrete": 15791,
                "num_kept_lambda": 1276,
                "num_values_explored": 223283,
                "num_values_kept": 17067,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1(lambda u1, u2: Min(u1, u2), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1(lambda u1, u2: Min(u1, u2), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3452069107443,
            "num_unique_values": 12831,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.65019904828718,
                "explored_percent_lambda": 23.52869084546922,
                "explored_percent_none": 4.821110106243608,
                "kept_percent_concrete": 52.58150054593667,
                "kept_percent_lambda": 47.41849945406333,
                "num_examples": 3,
                "num_explored_concrete": 169543,
                "num_explored_lambda": 55675,
                "num_explored_none": 11408,
                "num_inputs": 1,
                "num_kept_concrete": 6742,
                "num_kept_lambda": 6080,
                "num_values_explored": 236626,
                "num_values_kept": 12822,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1(lambda u1, u2: Max(u1, u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Max(u1, u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 44.22647790238261,
            "num_unique_values": 4214,
            "solution": "Max(Sum(Take(Sum(x), x)), Subtract(Sum(x), Access(4, x)))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 90.9039350841986,
                "explored_percent_lambda": 6.910391763371433,
                "explored_percent_none": 2.1856731524299797,
                "kept_percent_concrete": 86.63495838287753,
                "kept_percent_lambda": 13.365041617122474,
                "num_examples": 5,
                "num_explored_concrete": 20837,
                "num_explored_lambda": 1584,
                "num_explored_none": 501,
                "num_inputs": 1,
                "num_kept_concrete": 3643,
                "num_kept_lambda": 562,
                "num_values_explored": 22922,
                "num_values_kept": 4205,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1(lambda u1, u2: Add(u1, u2), x))'\n)",
            "task_solution": "Maximum(Scanl1(lambda u1, u2: Add(u1, u2), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.1116897203028,
            "num_unique_values": 12346,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.50055662679958,
                "explored_percent_lambda": 26.771018438000176,
                "explored_percent_none": 5.7284249352002385,
                "kept_percent_concrete": 53.39223474102294,
                "kept_percent_lambda": 46.60776525897706,
                "num_examples": 3,
                "num_explored_concrete": 160679,
                "num_explored_lambda": 63726,
                "num_explored_none": 13636,
                "num_inputs": 1,
                "num_kept_concrete": 6587,
                "num_kept_lambda": 5750,
                "num_values_explored": 238041,
                "num_values_kept": 12337,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1(lambda u1, u2: Add(u1, u2), Reverse(x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(u1, u2), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3315280880779,
            "num_unique_values": 14532,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.51448277625975,
                "explored_percent_lambda": 22.71589886993849,
                "explored_percent_none": 4.769618353801755,
                "kept_percent_concrete": 58.520966742408596,
                "kept_percent_lambda": 41.479033257591404,
                "num_examples": 3,
                "num_explored_concrete": 170111,
                "num_explored_lambda": 53289,
                "num_explored_none": 11189,
                "num_inputs": 1,
                "num_kept_concrete": 8499,
                "num_kept_lambda": 6024,
                "num_values_explored": 234589,
                "num_values_kept": 14523,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1(lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2)), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3737553041428,
            "num_unique_values": 14707,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.98267817089344,
                "explored_percent_lambda": 17.889127195926587,
                "explored_percent_none": 5.12819463317998,
                "kept_percent_concrete": 67.14295434442403,
                "kept_percent_lambda": 32.857045655575966,
                "num_examples": 3,
                "num_explored_concrete": 188081,
                "num_explored_lambda": 43706,
                "num_explored_none": 12529,
                "num_inputs": 2,
                "num_kept_concrete": 9868,
                "num_kept_lambda": 4829,
                "num_values_explored": 244316,
                "num_values_kept": 14697,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1(lambda u1, u2: Add(Add(u1, u2), n), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(Add(u1, u2), n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3554906155914,
            "num_unique_values": 12769,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.49305423727384,
                "explored_percent_lambda": 24.04756782295793,
                "explored_percent_none": 4.459377939768236,
                "kept_percent_concrete": 53.244514106583075,
                "kept_percent_lambda": 46.755485893416925,
                "num_examples": 3,
                "num_explored_concrete": 169475,
                "num_explored_lambda": 57005,
                "num_explored_none": 10571,
                "num_inputs": 1,
                "num_kept_concrete": 6794,
                "num_kept_lambda": 5966,
                "num_values_explored": 237051,
                "num_values_kept": 12760,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1(lambda u1, u2: Add(IntDivide(u1, 2), u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(IntDivide(u1, 2), u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3491545077413,
            "num_unique_values": 11983,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.4407709909367,
                "explored_percent_lambda": 23.18021546704885,
                "explored_percent_none": 2.379013542014446,
                "kept_percent_concrete": 56.44366491272029,
                "kept_percent_lambda": 43.55633508727971,
                "num_examples": 3,
                "num_explored_concrete": 182831,
                "num_explored_lambda": 56932,
                "num_explored_none": 5843,
                "num_inputs": 2,
                "num_kept_concrete": 6758,
                "num_kept_lambda": 5215,
                "num_values_explored": 245606,
                "num_values_kept": 11973,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1(lambda u1, u2: Multiply(u1, u2), Take(n, x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Multiply(u1, u2), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3370009958744,
            "num_unique_values": 17901,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 88.99746948158446,
                "explored_percent_lambda": 4.369573809815868,
                "explored_percent_none": 6.632956708599674,
                "kept_percent_concrete": 96.97071316789626,
                "kept_percent_lambda": 3.0292868321037334,
                "num_examples": 5,
                "num_explored_concrete": 195895,
                "num_explored_lambda": 9618,
                "num_explored_none": 14600,
                "num_inputs": 1,
                "num_kept_concrete": 17350,
                "num_kept_lambda": 542,
                "num_values_explored": 220113,
                "num_values_kept": 17892,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1(lambda u1, u2: Multiply(u1, u2), x))'\n)",
            "task_solution": "Last(Scanl1(lambda u1, u2: Multiply(u1, u2), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3434259966016,
            "num_unique_values": 10942,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.81406302034603,
                "explored_percent_lambda": 21.93897778271143,
                "explored_percent_none": 3.2469591969425458,
                "kept_percent_concrete": 43.794018110308244,
                "kept_percent_lambda": 56.205981889691756,
                "num_examples": 3,
                "num_explored_concrete": 188708,
                "num_explored_lambda": 55338,
                "num_explored_none": 8190,
                "num_inputs": 1,
                "num_kept_concrete": 4788,
                "num_kept_lambda": 6145,
                "num_values_explored": 252236,
                "num_values_kept": 10933,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1(lambda u1, u2: Min(u1, u2), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Min(u1, u2), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3252124749124,
            "num_unique_values": 12792,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.5560678440054,
                "explored_percent_lambda": 21.458829208209192,
                "explored_percent_none": 4.985102947785416,
                "kept_percent_concrete": 59.29750449816162,
                "kept_percent_lambda": 40.70249550183838,
                "num_examples": 3,
                "num_explored_concrete": 176767,
                "num_explored_lambda": 51569,
                "num_explored_none": 11980,
                "num_inputs": 1,
                "num_kept_concrete": 7580,
                "num_kept_lambda": 5203,
                "num_values_explored": 240316,
                "num_values_kept": 12783,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1(lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3411477189511,
            "num_unique_values": 13279,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.72880780579516,
                "explored_percent_lambda": 32.698517699692744,
                "explored_percent_none": 4.5726744945120945,
                "kept_percent_concrete": 44.83798040693293,
                "kept_percent_lambda": 55.16201959306707,
                "num_examples": 3,
                "num_explored_concrete": 144137,
                "num_explored_lambda": 75134,
                "num_explored_none": 10507,
                "num_inputs": 1,
                "num_kept_concrete": 5950,
                "num_kept_lambda": 7320,
                "num_values_explored": 229778,
                "num_values_kept": 13270,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1(lambda u1, u2: Access(u1, x), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Access(u1, x), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.4191347882152,
            "num_unique_values": 12775,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.40432179644823,
                "explored_percent_lambda": 16.668749622044388,
                "explored_percent_none": 4.926928581507388,
                "kept_percent_concrete": 59.7289675701081,
                "kept_percent_lambda": 40.2710324298919,
                "num_examples": 3,
                "num_explored_concrete": 194478,
                "num_explored_lambda": 41346,
                "num_explored_none": 12221,
                "num_inputs": 1,
                "num_kept_concrete": 7625,
                "num_kept_lambda": 5141,
                "num_values_explored": 248045,
                "num_values_kept": 12766,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1(lambda u1, u2: Max(Add(u1, 1), u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Max(Add(u1, 1), u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3543518669903,
            "num_unique_values": 14379,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.02787023929466,
                "explored_percent_lambda": 25.679220177441092,
                "explored_percent_none": 6.292909583264253,
                "kept_percent_concrete": 53.848295059151006,
                "kept_percent_lambda": 46.151704940848994,
                "num_examples": 3,
                "num_explored_concrete": 160024,
                "num_explored_lambda": 60406,
                "num_explored_none": 14803,
                "num_inputs": 1,
                "num_kept_concrete": 7738,
                "num_kept_lambda": 6632,
                "num_values_explored": 235233,
                "num_values_kept": 14370,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1(lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.4243599269539,
            "num_unique_values": 17808,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 90.63762255701211,
                "explored_percent_lambda": 5.13706819713472,
                "explored_percent_none": 4.225309245853171,
                "kept_percent_concrete": 86.90302281155186,
                "kept_percent_lambda": 13.09697718844814,
                "num_examples": 5,
                "num_explored_concrete": 208462,
                "num_explored_lambda": 11815,
                "num_explored_none": 9718,
                "num_inputs": 2,
                "num_kept_concrete": 15467,
                "num_kept_lambda": 2331,
                "num_values_explored": 229995,
                "num_values_kept": 17798,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count(lambda u1: Greater(u1, 0), ZipWith(lambda u1, u2: Subtract(u1, u2), a, b))'\n)",
            "task_solution": "Count(lambda u1: Greater(u1, 0), ZipWith(lambda u1, u2: Subtract(u1, u2), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.4198297392577,
            "num_unique_values": 17371,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 90.77165808588936,
                "explored_percent_lambda": 3.839934267458021,
                "explored_percent_none": 5.388407646652623,
                "kept_percent_concrete": 95.35741028742584,
                "kept_percent_lambda": 4.642589712574161,
                "num_examples": 5,
                "num_explored_concrete": 207691,
                "num_explored_lambda": 8786,
                "num_explored_none": 12329,
                "num_inputs": 2,
                "num_kept_concrete": 16555,
                "num_kept_lambda": 806,
                "num_values_explored": 228806,
                "num_values_kept": 17361,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), s, Scanl1(lambda u1, u2: Add(u1, u2), p)))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), s, Scanl1(lambda u1, u2: Add(u1, u2), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.41962656006217,
            "num_unique_values": 257,
            "solution": "Scanl1(lambda u1, u2: (lambda v1: Subtract(v1, -1))(u1), Map(lambda u1: 0, x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 26.694915254237287,
                "explored_percent_lambda": 51.12994350282486,
                "explored_percent_none": 22.175141242937855,
                "kept_percent_concrete": 43.95161290322581,
                "kept_percent_lambda": 56.04838709677419,
                "num_examples": 3,
                "num_explored_concrete": 189,
                "num_explored_lambda": 362,
                "num_explored_none": 157,
                "num_inputs": 1,
                "num_kept_concrete": 109,
                "num_kept_lambda": 139,
                "num_values_explored": 708,
                "num_values_kept": 248,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1(lambda u1, u2: Add(u1, 1), Map(lambda u1: 0, x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(u1, 1), Map(lambda u1: 0, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0140544399619,
            "num_unique_values": 16753,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.33004470841016,
                "explored_percent_lambda": 22.043169652700566,
                "explored_percent_none": 5.62678563888928,
                "kept_percent_concrete": 66.00573339703774,
                "kept_percent_lambda": 33.994266602962256,
                "num_examples": 3,
                "num_explored_concrete": 154178,
                "num_explored_lambda": 46987,
                "num_explored_none": 11994,
                "num_inputs": 1,
                "num_kept_concrete": 11052,
                "num_kept_lambda": 5692,
                "num_values_explored": 213159,
                "num_values_kept": 16744,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter(lambda u1: IsOdd(u1), ZipWith(lambda u1, u2: Multiply(u2, u1), x, Drop(1, x)))'\n)",
            "task_solution": "Filter(lambda u1: IsOdd(u1), ZipWith(lambda u1, u2: Multiply(u2, u1), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.4001164957881,
            "num_unique_values": 14587,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.38640257994219,
                "explored_percent_lambda": 19.179532693034332,
                "explored_percent_none": 3.4340647270234883,
                "kept_percent_concrete": 62.09356564686514,
                "kept_percent_lambda": 37.90643435313486,
                "num_examples": 3,
                "num_explored_concrete": 176133,
                "num_explored_lambda": 43653,
                "num_explored_none": 7816,
                "num_inputs": 1,
                "num_kept_concrete": 9052,
                "num_kept_lambda": 5526,
                "num_values_explored": 227602,
                "num_values_kept": 14578,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1(lambda u1, u2: Multiply(u1, u2), Filter(lambda u1: IsOdd(u1), x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Multiply(u1, u2), Filter(lambda u1: IsOdd(u1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3622003290802,
            "num_unique_values": 13542,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.9149738769088,
                "explored_percent_lambda": 21.15506424868376,
                "explored_percent_none": 3.9299618744074394,
                "kept_percent_concrete": 63.028377180017735,
                "kept_percent_lambda": 36.971622819982265,
                "num_examples": 3,
                "num_explored_concrete": 185688,
                "num_explored_lambda": 52436,
                "num_explored_none": 9741,
                "num_inputs": 2,
                "num_kept_concrete": 8529,
                "num_kept_lambda": 5003,
                "num_values_explored": 247865,
                "num_values_kept": 13532,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1(lambda u1, u2: Add(u1, u2), ZipWith(lambda u1, u2: Add(u1, u2), x, y))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(u1, u2), ZipWith(lambda u1, u2: Add(u1, u2), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3323231451213,
            "num_unique_values": 12448,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.91972040499688,
                "explored_percent_lambda": 20.266638941761705,
                "explored_percent_none": 3.8136406532414147,
                "kept_percent_concrete": 63.66487094958591,
                "kept_percent_lambda": 36.33512905041409,
                "num_examples": 3,
                "num_explored_concrete": 189857,
                "num_explored_lambda": 50682,
                "num_explored_none": 9537,
                "num_inputs": 3,
                "num_kept_concrete": 7918,
                "num_kept_lambda": 4519,
                "num_values_explored": 250076,
                "num_values_kept": 12437,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith(lambda u1, u2: Add(u1, u2), x, Map(lambda u1: Access(u1, y), i))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Add(u1, u2), x, Map(lambda u1: Access(u1, y), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3112600035965,
            "num_unique_values": 16099,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.27171080596574,
                "explored_percent_lambda": 23.327912177271802,
                "explored_percent_none": 4.400377016762461,
                "kept_percent_concrete": 71.04232705575238,
                "kept_percent_lambda": 28.957672944247623,
                "num_examples": 3,
                "num_explored_concrete": 156422,
                "num_explored_lambda": 50490,
                "num_explored_none": 9524,
                "num_inputs": 2,
                "num_kept_concrete": 11430,
                "num_kept_lambda": 4659,
                "num_values_explored": 216436,
                "num_values_kept": 16089,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter(lambda u1: Greater(u1, -1), ZipWith(lambda u1, u2: Subtract(u1, u2), x, y))'\n)",
            "task_solution": "Filter(lambda u1: Greater(u1, -1), ZipWith(lambda u1, u2: Subtract(u1, u2), x, y))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.44
}