{
    "num_tasks": 100,
    "num_tasks_solved": 69,
    "results": [
        {
            "elapsed_time": 44.367090072482824,
            "num_unique_values": 491,
            "solution": "Sum(Reverse(Take(k, Sort(b))))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 58.292443572129535,
                "explored_percent_lambda": 26.692836113837096,
                "explored_percent_none": 15.014720314033367,
                "kept_percent_concrete": 75.05197505197505,
                "kept_percent_lambda": 24.948024948024948,
                "num_examples": 5,
                "num_explored_concrete": 594,
                "num_explored_lambda": 272,
                "num_explored_none": 153,
                "num_inputs": 2,
                "num_kept_concrete": 361,
                "num_kept_lambda": 120,
                "num_values_explored": 1019,
                "num_values_kept": 481,
                "temperature": 1.0,
                "total_num_restarts": 8,
                "total_num_values_explored": 22256
            },
            "success": true,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.314997781068087,
            "num_unique_values": 220,
            "solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(x, 3)))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 37.33387031816351,
                "explored_percent_lambda": 11.43777688280306,
                "explored_percent_none": 51.22835279903343,
                "kept_percent_concrete": 85.78199052132702,
                "kept_percent_lambda": 14.218009478672986,
                "num_examples": 5,
                "num_explored_concrete": 927,
                "num_explored_lambda": 284,
                "num_explored_none": 1272,
                "num_inputs": 1,
                "num_kept_concrete": 181,
                "num_kept_lambda": 30,
                "num_values_explored": 2483,
                "num_values_kept": 211,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 2483
            },
            "success": true,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 21.246747616678476,
            "num_unique_values": 154,
            "solution": "Multiply(Subtract(x, Multiply(y, Add(x, -1))), -1)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 22.920892494929006,
                "explored_percent_lambda": 8.924949290060852,
                "explored_percent_none": 68.15415821501014,
                "kept_percent_concrete": 90.97222222222223,
                "kept_percent_lambda": 9.027777777777779,
                "num_examples": 5,
                "num_explored_concrete": 452,
                "num_explored_lambda": 176,
                "num_explored_none": 1344,
                "num_inputs": 2,
                "num_kept_concrete": 131,
                "num_kept_lambda": 13,
                "num_values_explored": 1972,
                "num_values_kept": 144,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 13322
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 9.117735167965293,
            "num_unique_values": 154,
            "solution": "Multiply(k, IntDivide(Add(x, k), k))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 22.302158273381295,
                "explored_percent_lambda": 7.399794450154163,
                "explored_percent_none": 70.29804727646454,
                "kept_percent_concrete": 93.75,
                "kept_percent_lambda": 6.25,
                "num_examples": 5,
                "num_explored_concrete": 434,
                "num_explored_lambda": 144,
                "num_explored_none": 1368,
                "num_inputs": 2,
                "num_kept_concrete": 135,
                "num_kept_lambda": 9,
                "num_values_explored": 1946,
                "num_values_kept": 144,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5743
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.9551181979477406,
            "num_unique_values": 150,
            "solution": "Take(Multiply(n, -1), x)",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 38.22222222222222,
                "explored_percent_lambda": 39.111111111111114,
                "explored_percent_none": 22.666666666666668,
                "kept_percent_concrete": 44.285714285714285,
                "kept_percent_lambda": 55.714285714285715,
                "num_examples": 3,
                "num_explored_concrete": 172,
                "num_explored_lambda": 176,
                "num_explored_none": 102,
                "num_inputs": 2,
                "num_kept_concrete": 62,
                "num_kept_lambda": 78,
                "num_values_explored": 450,
                "num_values_kept": 140,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 450
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.6361382473260164,
            "num_unique_values": 470,
            "solution": "Reverse(Sort(Drop(Subtract(0, n), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 51.12,
                "explored_percent_lambda": 33.12,
                "explored_percent_none": 15.76,
                "kept_percent_concrete": 60.869565217391305,
                "kept_percent_lambda": 39.130434782608695,
                "num_examples": 3,
                "num_explored_concrete": 639,
                "num_explored_lambda": 414,
                "num_explored_none": 197,
                "num_inputs": 2,
                "num_kept_concrete": 280,
                "num_kept_lambda": 180,
                "num_values_explored": 1250,
                "num_values_kept": 460,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1250
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.9610180426388979,
            "num_unique_values": 155,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 10.511363636363637,
                "explored_percent_lambda": 71.02272727272727,
                "explored_percent_none": 18.46590909090909,
                "kept_percent_concrete": 20.54794520547945,
                "kept_percent_lambda": 79.45205479452055,
                "num_examples": 3,
                "num_explored_concrete": 37,
                "num_explored_lambda": 250,
                "num_explored_none": 65,
                "num_inputs": 1,
                "num_kept_concrete": 30,
                "num_kept_lambda": 116,
                "num_values_explored": 352,
                "num_values_kept": 146,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 352
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.451699309051037,
            "num_unique_values": 418,
            "solution": "Take(Subtract(j, i), Drop(i, x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 48.63636363636363,
                "explored_percent_lambda": 31.09090909090909,
                "explored_percent_none": 20.272727272727273,
                "kept_percent_concrete": 62.16216216216216,
                "kept_percent_lambda": 37.83783783783784,
                "num_examples": 3,
                "num_explored_concrete": 535,
                "num_explored_lambda": 342,
                "num_explored_none": 223,
                "num_inputs": 3,
                "num_kept_concrete": 253,
                "num_kept_lambda": 154,
                "num_values_explored": 1100,
                "num_values_kept": 407,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1100
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.2694544941186905,
            "num_unique_values": 673,
            "solution": "Take(k, Reverse(Sort(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 59.78809283551968,
                "explored_percent_lambda": 31.836528758829466,
                "explored_percent_none": 8.375378405650858,
                "kept_percent_concrete": 59.57767722473605,
                "kept_percent_lambda": 40.42232277526395,
                "num_examples": 3,
                "num_explored_concrete": 1185,
                "num_explored_lambda": 631,
                "num_explored_none": 166,
                "num_inputs": 2,
                "num_kept_concrete": 395,
                "num_kept_lambda": 268,
                "num_values_explored": 1982,
                "num_values_kept": 663,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1982
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.8022867999970913,
            "num_unique_values": 615,
            "solution": "Max(Access(k, x), Subtract(Maximum(Drop(k, Reverse(x))), k))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 66.565579984837,
                "explored_percent_lambda": 17.968157695223653,
                "explored_percent_none": 15.466262319939348,
                "kept_percent_concrete": 82.31404958677686,
                "kept_percent_lambda": 17.68595041322314,
                "num_examples": 5,
                "num_explored_concrete": 878,
                "num_explored_lambda": 237,
                "num_explored_none": 204,
                "num_inputs": 2,
                "num_kept_concrete": 498,
                "num_kept_lambda": 107,
                "num_values_explored": 1319,
                "num_values_kept": 605,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1319
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 97.9689342007041,
            "num_unique_values": 299,
            "solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 36.874051593323216,
                "explored_percent_lambda": 42.18512898330804,
                "explored_percent_none": 20.94081942336874,
                "kept_percent_concrete": 55.51724137931034,
                "kept_percent_lambda": 44.48275862068966,
                "num_examples": 5,
                "num_explored_concrete": 243,
                "num_explored_lambda": 278,
                "num_explored_none": 138,
                "num_inputs": 1,
                "num_kept_concrete": 161,
                "num_kept_lambda": 129,
                "num_values_explored": 659,
                "num_values_kept": 290,
                "temperature": 1.0,
                "total_num_restarts": 17,
                "total_num_values_explored": 49212
            },
            "success": true,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.123758587986231,
            "num_unique_values": 332,
            "solution": "Max(Minimum(Drop(1, x)), Minimum(Take(-1, x)))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 31.28760529482551,
                "explored_percent_lambda": 44.04332129963899,
                "explored_percent_none": 24.6690734055355,
                "kept_percent_concrete": 51.083591331269346,
                "kept_percent_lambda": 48.916408668730654,
                "num_examples": 5,
                "num_explored_concrete": 260,
                "num_explored_lambda": 366,
                "num_explored_none": 205,
                "num_inputs": 1,
                "num_kept_concrete": 165,
                "num_kept_lambda": 158,
                "num_values_explored": 831,
                "num_values_kept": 323,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 831
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.8441302441060543,
            "num_unique_values": 855,
            "solution": "Multiply(Last(Map(lambda u1: (lambda v1: Subtract(Minimum(x), v1))(u1), Sort(x))), -1)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 70.62766605728214,
                "explored_percent_lambda": 22.851919561243143,
                "explored_percent_none": 6.52041438147471,
                "kept_percent_concrete": 75.88652482269504,
                "kept_percent_lambda": 24.113475177304963,
                "num_examples": 5,
                "num_explored_concrete": 1159,
                "num_explored_lambda": 375,
                "num_explored_none": 107,
                "num_inputs": 1,
                "num_kept_concrete": 642,
                "num_kept_lambda": 204,
                "num_values_explored": 1641,
                "num_values_kept": 846,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1641
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.5313092842698,
            "num_unique_values": 1052,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.56098371552011,
                "explored_percent_lambda": 18.909936856098373,
                "explored_percent_none": 12.529079428381522,
                "kept_percent_concrete": 77.15930902111324,
                "kept_percent_lambda": 22.840690978886755,
                "num_examples": 5,
                "num_explored_concrete": 2063,
                "num_explored_lambda": 569,
                "num_explored_none": 377,
                "num_inputs": 2,
                "num_kept_concrete": 804,
                "num_kept_lambda": 238,
                "num_values_explored": 3009,
                "num_values_kept": 1042,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 304301
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 581.6910577006638,
            "num_unique_values": 577,
            "solution": "IntDivide(Subtract(Head(y), Last(y)), Subtract(Head(x), Last(x)))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 45.65061107117182,
                "explored_percent_lambda": 25.73687994248742,
                "explored_percent_none": 28.612508986340764,
                "kept_percent_concrete": 71.0758377425044,
                "kept_percent_lambda": 28.924162257495592,
                "num_examples": 5,
                "num_explored_concrete": 635,
                "num_explored_lambda": 358,
                "num_explored_none": 398,
                "num_inputs": 2,
                "num_kept_concrete": 403,
                "num_kept_lambda": 164,
                "num_values_explored": 1391,
                "num_values_kept": 567,
                "temperature": 1.0,
                "total_num_restarts": 97,
                "total_num_values_explored": 281186
            },
            "success": true,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 19.97928803227842,
            "num_unique_values": 254,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u2, u1), x, Map(lambda u1: (lambda v1: Square(v1))(u1), x))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 19.41176470588235,
                "explored_percent_lambda": 58.38235294117647,
                "explored_percent_none": 22.205882352941178,
                "kept_percent_concrete": 36.326530612244895,
                "kept_percent_lambda": 63.673469387755105,
                "num_examples": 3,
                "num_explored_concrete": 132,
                "num_explored_lambda": 397,
                "num_explored_none": 151,
                "num_inputs": 1,
                "num_kept_concrete": 89,
                "num_kept_lambda": 156,
                "num_values_explored": 680,
                "num_values_kept": 245,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 8662
            },
            "success": true,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map(lambda u1: Multiply(u1, Square(u1)), x)'\n)",
            "task_solution": "Map(lambda u1: Multiply(u1, Square(u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 25.707003720104694,
            "num_unique_values": 221,
            "solution": "Map(lambda u1: (lambda v1: Max(v1, (lambda v1: Subtract(0, v1))(v1)))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 21.68486739469579,
                "explored_percent_lambda": 56.63026521060842,
                "explored_percent_none": 21.68486739469579,
                "kept_percent_concrete": 39.62264150943396,
                "kept_percent_lambda": 60.37735849056604,
                "num_examples": 3,
                "num_explored_concrete": 139,
                "num_explored_lambda": 363,
                "num_explored_none": 139,
                "num_inputs": 1,
                "num_kept_concrete": 84,
                "num_kept_lambda": 128,
                "num_values_explored": 641,
                "num_values_kept": 212,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 12405
            },
            "success": true,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map(lambda u1: Max(u1, Subtract(0, u1)), x)'\n)",
            "task_solution": "Map(lambda u1: Max(u1, Subtract(0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.968473056331277,
            "num_unique_values": 533,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Subtract((lambda v1: Square(v1))(v2), v1))(u2, u1), x, x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 51.800327332242226,
                "explored_percent_lambda": 38.297872340425535,
                "explored_percent_none": 9.901800327332243,
                "kept_percent_concrete": 47.13740458015267,
                "kept_percent_lambda": 52.86259541984733,
                "num_examples": 3,
                "num_explored_concrete": 633,
                "num_explored_lambda": 468,
                "num_explored_none": 121,
                "num_inputs": 1,
                "num_kept_concrete": 247,
                "num_kept_lambda": 277,
                "num_values_explored": 1222,
                "num_values_kept": 524,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1222
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map(lambda u1: Subtract(Square(u1), u1), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(Square(u1), u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.4925800617784,
            "num_unique_values": 894,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.63825684535287,
                "explored_percent_lambda": 30.3895102198226,
                "explored_percent_none": 3.9722329348245276,
                "kept_percent_concrete": 45.42372881355932,
                "kept_percent_lambda": 54.57627118644068,
                "num_examples": 3,
                "num_explored_concrete": 1702,
                "num_explored_lambda": 788,
                "num_explored_none": 103,
                "num_inputs": 1,
                "num_kept_concrete": 402,
                "num_kept_lambda": 483,
                "num_values_explored": 2593,
                "num_values_kept": 885,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 262667
            },
            "success": false,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map(lambda u1: IntDivide(Add(Square(u1), u1), 2), x)'\n)",
            "task_solution": "Map(lambda u1: IntDivide(Add(Square(u1), u1), 2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.0816090758889914,
            "num_unique_values": 498,
            "solution": "Map(lambda u1: (lambda v1: Add(b, (lambda v1: Multiply(a, v1))(v1)))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 59.672337744171394,
                "explored_percent_lambda": 22.999369880277253,
                "explored_percent_none": 17.328292375551356,
                "kept_percent_concrete": 64.27104722792608,
                "kept_percent_lambda": 35.728952772073924,
                "num_examples": 3,
                "num_explored_concrete": 947,
                "num_explored_lambda": 365,
                "num_explored_none": 275,
                "num_inputs": 3,
                "num_kept_concrete": 313,
                "num_kept_lambda": 174,
                "num_values_explored": 1587,
                "num_values_kept": 487,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1587
            },
            "success": true,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map(lambda u1: Add(Multiply(a, u1), b), x)'\n)",
            "task_solution": "Map(lambda u1: Add(Multiply(a, u1), b), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 15.336404660716653,
            "num_unique_values": 499,
            "solution": "Map(lambda u1: (lambda v1: Subtract((lambda v1: Multiply(3, v1))(v1), 4))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 52.41332426920462,
                "explored_percent_lambda": 34.942216179469746,
                "explored_percent_none": 12.644459551325628,
                "kept_percent_concrete": 54.285714285714285,
                "kept_percent_lambda": 45.714285714285715,
                "num_examples": 3,
                "num_explored_concrete": 771,
                "num_explored_lambda": 514,
                "num_explored_none": 186,
                "num_inputs": 1,
                "num_kept_concrete": 266,
                "num_kept_lambda": 224,
                "num_values_explored": 1471,
                "num_values_kept": 490,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 7181
            },
            "success": true,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map(lambda u1: Subtract(Multiply(u1, 3), 4), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(Multiply(u1, 3), 4), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.2156194355338812,
            "num_unique_values": 224,
            "solution": "Map(lambda u1: (lambda v1: Multiply(v1, (lambda v1: Add(2, v1))(v1)))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 22.098214285714285,
                "explored_percent_lambda": 59.375,
                "explored_percent_none": 18.526785714285715,
                "kept_percent_concrete": 34.41860465116279,
                "kept_percent_lambda": 65.5813953488372,
                "num_examples": 3,
                "num_explored_concrete": 99,
                "num_explored_lambda": 266,
                "num_explored_none": 83,
                "num_inputs": 1,
                "num_kept_concrete": 74,
                "num_kept_lambda": 141,
                "num_values_explored": 448,
                "num_values_kept": 215,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 448
            },
            "success": true,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map(lambda u1: Multiply(u1, Add(u1, 2)), x)'\n)",
            "task_solution": "Map(lambda u1: Multiply(u1, Add(u1, 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.5704905278980732,
            "num_unique_values": 223,
            "solution": "Map(lambda u1: (lambda v1: Max(a, (lambda v1: Min(b, v1))(v1)))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 25.694444444444443,
                "explored_percent_lambda": 45.416666666666664,
                "explored_percent_none": 28.88888888888889,
                "kept_percent_concrete": 47.64150943396226,
                "kept_percent_lambda": 52.35849056603774,
                "num_examples": 3,
                "num_explored_concrete": 185,
                "num_explored_lambda": 327,
                "num_explored_none": 208,
                "num_inputs": 3,
                "num_kept_concrete": 101,
                "num_kept_lambda": 111,
                "num_values_explored": 720,
                "num_values_kept": 212,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 720
            },
            "success": true,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map(lambda u1: Max(Min(u1, b), a), x)'\n)",
            "task_solution": "Map(lambda u1: Max(Min(u1, b), a), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.3888095393777,
            "num_unique_values": 845,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.64381213575591,
                "explored_percent_lambda": 25.64278368186493,
                "explored_percent_none": 7.713404182379157,
                "kept_percent_concrete": 58.3732057416268,
                "kept_percent_lambda": 41.6267942583732,
                "num_examples": 3,
                "num_explored_concrete": 1944,
                "num_explored_lambda": 748,
                "num_explored_none": 225,
                "num_inputs": 1,
                "num_kept_concrete": 488,
                "num_kept_lambda": 348,
                "num_values_explored": 2917,
                "num_values_kept": 836,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 292504
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map(lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1)), x)'\n)",
            "task_solution": "Map(lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.9172003641724586,
            "num_unique_values": 482,
            "solution": "Sort(Reverse(Map(lambda u1: (lambda v1: Square(v1))(u1), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 51.04953820319059,
                "explored_percent_lambda": 38.11922753988245,
                "explored_percent_none": 10.831234256926953,
                "kept_percent_concrete": 42.494714587737846,
                "kept_percent_lambda": 57.505285412262154,
                "num_examples": 3,
                "num_explored_concrete": 608,
                "num_explored_lambda": 454,
                "num_explored_none": 129,
                "num_inputs": 1,
                "num_kept_concrete": 201,
                "num_kept_lambda": 272,
                "num_values_explored": 1191,
                "num_values_kept": 473,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1191
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map(lambda u1: Square(u1), x))'\n)",
            "task_solution": "Sort(Map(lambda u1: Square(u1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 14.957555504515767,
            "num_unique_values": 533,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Subtract(v1, Minimum(x)))(u1), x, Reverse(x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 51.37221269296741,
                "explored_percent_lambda": 40.13722126929674,
                "explored_percent_none": 8.49056603773585,
                "kept_percent_concrete": 46.94656488549618,
                "kept_percent_lambda": 53.05343511450382,
                "num_examples": 3,
                "num_explored_concrete": 599,
                "num_explored_lambda": 468,
                "num_explored_none": 99,
                "num_inputs": 1,
                "num_kept_concrete": 246,
                "num_kept_lambda": 278,
                "num_values_explored": 1166,
                "num_values_kept": 524,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 6385
            },
            "success": true,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map(lambda u1: Subtract(u1, Minimum(x)), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(u1, Minimum(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 15.085620930418372,
            "num_unique_values": 493,
            "solution": "Map(lambda u1: (lambda v1: Subtract(v1, Access(i, x)))(u1), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 63.109954456733895,
                "explored_percent_lambda": 23.227065712426807,
                "explored_percent_none": 13.662979830839298,
                "kept_percent_concrete": 67.0807453416149,
                "kept_percent_lambda": 32.91925465838509,
                "num_examples": 3,
                "num_explored_concrete": 970,
                "num_explored_lambda": 357,
                "num_explored_none": 210,
                "num_inputs": 2,
                "num_kept_concrete": 324,
                "num_kept_lambda": 159,
                "num_values_explored": 1537,
                "num_values_kept": 483,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 7773
            },
            "success": true,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map(lambda u1: Subtract(u1, Access(i, x)), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(u1, Access(i, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.3686200063676,
            "num_unique_values": 829,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.4021164021164,
                "explored_percent_lambda": 22.75132275132275,
                "explored_percent_none": 10.846560846560847,
                "kept_percent_concrete": 60.68376068376068,
                "kept_percent_lambda": 39.31623931623932,
                "num_examples": 3,
                "num_explored_concrete": 2008,
                "num_explored_lambda": 688,
                "num_explored_none": 328,
                "num_inputs": 2,
                "num_kept_concrete": 497,
                "num_kept_lambda": 322,
                "num_values_explored": 3024,
                "num_values_kept": 819,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 310514
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map(lambda u1: Add(u1, Subtract(t, Head(x))), x)'\n)",
            "task_solution": "Map(lambda u1: Add(u1, Subtract(t, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 22.49167361110449,
            "num_unique_values": 780,
            "solution": "Map(lambda u1: (lambda v1: Access((lambda v1: Min(v1, Square(3)))(v1), x))(u1), i)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 63.78896882494005,
                "explored_percent_lambda": 31.366906474820144,
                "explored_percent_none": 4.844124700239808,
                "kept_percent_concrete": 49.74025974025974,
                "kept_percent_lambda": 50.25974025974026,
                "num_examples": 3,
                "num_explored_concrete": 1330,
                "num_explored_lambda": 654,
                "num_explored_none": 101,
                "num_inputs": 2,
                "num_kept_concrete": 383,
                "num_kept_lambda": 387,
                "num_values_explored": 2085,
                "num_values_kept": 770,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 10217
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map(lambda u1: Access(u1, x), i)'\n)",
            "task_solution": "Map(lambda u1: Access(u1, x), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 21.935264876112342,
            "num_unique_values": 895,
            "solution": "Max(3, Maximum(ZipWith(lambda u1, u2: (lambda v1: Access(v1, x))(u2), x, Drop(2, i))))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 71.3422007255139,
                "explored_percent_lambda": 22.49093107617896,
                "explored_percent_none": 6.166868198307134,
                "kept_percent_concrete": 77.28813559322033,
                "kept_percent_lambda": 22.71186440677966,
                "num_examples": 5,
                "num_explored_concrete": 1180,
                "num_explored_lambda": 372,
                "num_explored_none": 102,
                "num_inputs": 2,
                "num_kept_concrete": 684,
                "num_kept_lambda": 201,
                "num_values_explored": 1654,
                "num_values_kept": 885,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 10639
            },
            "success": true,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map(lambda u1: Access(u1, x), i))'\n)",
            "task_solution": "Maximum(Map(lambda u1: Access(u1, x), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.5024087838828564,
            "num_unique_values": 252,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: If((lambda v1: IsOdd(v1))(v1), 0, v1))(u1), x, x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 22.302158273381295,
                "explored_percent_lambda": 60.97122302158273,
                "explored_percent_none": 16.72661870503597,
                "kept_percent_concrete": 39.09465020576132,
                "kept_percent_lambda": 60.90534979423868,
                "num_examples": 3,
                "num_explored_concrete": 124,
                "num_explored_lambda": 339,
                "num_explored_none": 93,
                "num_inputs": 1,
                "num_kept_concrete": 95,
                "num_kept_lambda": 148,
                "num_values_explored": 556,
                "num_values_kept": 243,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 556
            },
            "success": true,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map(lambda u1: If(IsOdd(u1), 0, u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(IsOdd(u1), 0, u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 206.2545494083315,
            "num_unique_values": 217,
            "solution": "Map(lambda u1: (lambda v1: If((lambda v1: Equal(f, v1))(v1), r, v1))(u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 42.06257242178447,
                "explored_percent_lambda": 27.230590961761298,
                "explored_percent_none": 30.70683661645423,
                "kept_percent_concrete": 67.96116504854369,
                "kept_percent_lambda": 32.03883495145631,
                "num_examples": 3,
                "num_explored_concrete": 363,
                "num_explored_lambda": 235,
                "num_explored_none": 265,
                "num_inputs": 3,
                "num_kept_concrete": 140,
                "num_kept_lambda": 66,
                "num_values_explored": 863,
                "num_values_kept": 206,
                "temperature": 1.0,
                "total_num_restarts": 35,
                "total_num_values_explored": 106724
            },
            "success": true,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map(lambda u1: If(Equal(u1, f), r, u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(Equal(u1, f), r, u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 23.72032960318029,
            "num_unique_values": 780,
            "solution": "Map(lambda u1: (lambda v1: If((lambda v1: Less(v1, 1))(v1), y, v1))(u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 58.134328358208954,
                "explored_percent_lambda": 30.895522388059703,
                "explored_percent_none": 10.970149253731343,
                "kept_percent_concrete": 50.38961038961039,
                "kept_percent_lambda": 49.61038961038961,
                "num_examples": 3,
                "num_explored_concrete": 1558,
                "num_explored_lambda": 828,
                "num_explored_none": 294,
                "num_inputs": 2,
                "num_kept_concrete": 388,
                "num_kept_lambda": 382,
                "num_values_explored": 2680,
                "num_values_kept": 770,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 10639
            },
            "success": true,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map(lambda u1: If(Less(u1, 0), y, u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(Less(u1, 0), y, u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 9.30812525190413,
            "num_unique_values": 530,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Add(v1, Last(x)))(u1), x, Take(-1, x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 57.076719576719576,
                "explored_percent_lambda": 32.473544973544975,
                "explored_percent_none": 10.44973544973545,
                "kept_percent_concrete": 59.30902111324376,
                "kept_percent_lambda": 40.69097888675624,
                "num_examples": 3,
                "num_explored_concrete": 863,
                "num_explored_lambda": 491,
                "num_explored_none": 158,
                "num_inputs": 1,
                "num_kept_concrete": 309,
                "num_kept_lambda": 212,
                "num_values_explored": 1512,
                "num_values_kept": 521,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4533
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map(lambda u1: Add(u1, Last(x)), x))'\n)",
            "task_solution": "Take(-1, Map(lambda u1: Add(u1, Last(x)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.4965336360037327,
            "num_unique_values": 214,
            "solution": "Map(lambda u1: Head(x), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 25.55205047318612,
                "explored_percent_lambda": 58.99053627760252,
                "explored_percent_none": 15.457413249211356,
                "kept_percent_concrete": 40.0,
                "kept_percent_lambda": 60.0,
                "num_examples": 3,
                "num_explored_concrete": 162,
                "num_explored_lambda": 374,
                "num_explored_none": 98,
                "num_inputs": 1,
                "num_kept_concrete": 82,
                "num_kept_lambda": 123,
                "num_values_explored": 634,
                "num_values_kept": 205,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 634
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map(lambda u1: Head(x), x)'\n)",
            "task_solution": "Map(lambda u1: Head(x), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.5680021680891514,
            "num_unique_values": 483,
            "solution": "Sum(Map(lambda u1: 1, x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 42.65486725663717,
                "explored_percent_lambda": 33.36283185840708,
                "explored_percent_none": 23.98230088495575,
                "kept_percent_concrete": 68.14345991561181,
                "kept_percent_lambda": 31.856540084388186,
                "num_examples": 5,
                "num_explored_concrete": 482,
                "num_explored_lambda": 377,
                "num_explored_none": 271,
                "num_inputs": 1,
                "num_kept_concrete": 323,
                "num_kept_lambda": 151,
                "num_values_explored": 1130,
                "num_values_kept": 474,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1130
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map(lambda u1: 1, x))'\n)",
            "task_solution": "Sum(Map(lambda u1: 1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.3900405894965,
            "num_unique_values": 1035,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.86934673366834,
                "explored_percent_lambda": 20.53601340033501,
                "explored_percent_none": 5.59463986599665,
                "kept_percent_concrete": 75.63352826510722,
                "kept_percent_lambda": 24.366471734892787,
                "num_examples": 5,
                "num_explored_concrete": 2205,
                "num_explored_lambda": 613,
                "num_explored_none": 167,
                "num_inputs": 1,
                "num_kept_concrete": 776,
                "num_kept_lambda": 250,
                "num_values_explored": 2985,
                "num_values_kept": 1026,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 303843
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map(lambda u1: 1, x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map(lambda u1: 1, x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.3850098066031933,
            "num_unique_values": 222,
            "solution": "Map(lambda u1: (lambda v1: If((lambda v1: Less(y, v1))(v1), 1, 0))(u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 31.398809523809526,
                "explored_percent_lambda": 34.523809523809526,
                "explored_percent_none": 34.07738095238095,
                "kept_percent_concrete": 63.679245283018865,
                "kept_percent_lambda": 36.320754716981135,
                "num_examples": 3,
                "num_explored_concrete": 211,
                "num_explored_lambda": 232,
                "num_explored_none": 229,
                "num_inputs": 2,
                "num_kept_concrete": 135,
                "num_kept_lambda": 77,
                "num_values_explored": 672,
                "num_values_kept": 212,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 672
            },
            "success": true,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map(lambda u1: If(Greater(u1, y), 1, 0), x)'\n)",
            "task_solution": "Map(lambda u1: If(Greater(u1, y), 1, 0), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.3073049280792,
            "num_unique_values": 787,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.87581699346406,
                "explored_percent_lambda": 22.091503267973856,
                "explored_percent_none": 10.032679738562091,
                "kept_percent_concrete": 61.696658097686374,
                "kept_percent_lambda": 38.303341902313626,
                "num_examples": 3,
                "num_explored_concrete": 2077,
                "num_explored_lambda": 676,
                "num_explored_none": 307,
                "num_inputs": 1,
                "num_kept_concrete": 480,
                "num_kept_lambda": 298,
                "num_values_explored": 3060,
                "num_values_kept": 778,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 298334
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map(lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.4994362965226,
            "num_unique_values": 834,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.74196627426026,
                "explored_percent_lambda": 15.653833916640153,
                "explored_percent_none": 7.604199809099587,
                "kept_percent_concrete": 68.68932038834951,
                "kept_percent_lambda": 31.310679611650485,
                "num_examples": 3,
                "num_explored_concrete": 2412,
                "num_explored_lambda": 492,
                "num_explored_none": 239,
                "num_inputs": 2,
                "num_kept_concrete": 566,
                "num_kept_lambda": 258,
                "num_values_explored": 3143,
                "num_values_kept": 824,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 316372
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map(lambda u1: If(IsOdd(u1), Multiply(u1, n), u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(IsOdd(u1), Multiply(u1, n), u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.7242610082030296,
            "num_unique_values": 507,
            "solution": "Filter(lambda u1: (lambda v1: Less(y, v1))(u1), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 60.25835866261398,
                "explored_percent_lambda": 27.279635258358663,
                "explored_percent_none": 12.462006079027356,
                "kept_percent_concrete": 64.78873239436619,
                "kept_percent_lambda": 35.2112676056338,
                "num_examples": 3,
                "num_explored_concrete": 793,
                "num_explored_lambda": 359,
                "num_explored_none": 164,
                "num_inputs": 2,
                "num_kept_concrete": 322,
                "num_kept_lambda": 175,
                "num_values_explored": 1316,
                "num_values_kept": 497,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1316
            },
            "success": true,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter(lambda u1: Greater(u1, y), x)'\n)",
            "task_solution": "Filter(lambda u1: Greater(u1, y), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.590527294203639,
            "num_unique_values": 221,
            "solution": "Filter(lambda u1: (lambda v1: IsEven(v1))(u1), Sort(x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 27.63157894736842,
                "explored_percent_lambda": 53.21637426900585,
                "explored_percent_none": 19.15204678362573,
                "kept_percent_concrete": 41.9811320754717,
                "kept_percent_lambda": 58.0188679245283,
                "num_examples": 3,
                "num_explored_concrete": 189,
                "num_explored_lambda": 364,
                "num_explored_none": 131,
                "num_inputs": 1,
                "num_kept_concrete": 89,
                "num_kept_lambda": 123,
                "num_values_explored": 684,
                "num_values_kept": 212,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 684
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter(lambda u1: IsEven(u1), Sort(x))'\n)",
            "task_solution": "Filter(lambda u1: IsEven(u1), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.3870233725756407,
            "num_unique_values": 458,
            "solution": "Maximum(Filter(lambda u1: (lambda v1: IsOdd(v1))(u1), Reverse(x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 46.92460317460318,
                "explored_percent_lambda": 39.08730158730159,
                "explored_percent_none": 13.988095238095237,
                "kept_percent_concrete": 64.3652561247216,
                "kept_percent_lambda": 35.634743875278396,
                "num_examples": 5,
                "num_explored_concrete": 473,
                "num_explored_lambda": 394,
                "num_explored_none": 141,
                "num_inputs": 1,
                "num_kept_concrete": 289,
                "num_kept_lambda": 160,
                "num_values_explored": 1008,
                "num_values_kept": 449,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1008
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter(lambda u1: IsOdd(u1), x))'\n)",
            "task_solution": "Maximum(Filter(lambda u1: IsOdd(u1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.491948619484901,
            "num_unique_values": 741,
            "solution": "Reverse(Filter(lambda u1: (lambda v1: Greater(0, v1))(u1), Reverse(Filter(lambda u1: (lambda v1: IsOdd(v1))(u1), x))))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 56.9324530218385,
                "explored_percent_lambda": 34.48450990350432,
                "explored_percent_none": 8.583037074657186,
                "kept_percent_concrete": 58.46994535519126,
                "kept_percent_lambda": 41.53005464480874,
                "num_examples": 3,
                "num_explored_concrete": 1121,
                "num_explored_lambda": 679,
                "num_explored_none": 169,
                "num_inputs": 1,
                "num_kept_concrete": 428,
                "num_kept_lambda": 304,
                "num_values_explored": 1969,
                "num_values_kept": 732,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1969
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter(lambda u1: IsOdd(Min(u1, 0)), x)'\n)",
            "task_solution": "Filter(lambda u1: IsOdd(Min(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.091941298916936,
            "num_unique_values": 492,
            "solution": "Sum(Filter(lambda u1: (lambda v1: Less(0, v1))(u1), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 53.6,
                "explored_percent_lambda": 36.457142857142856,
                "explored_percent_none": 9.942857142857143,
                "kept_percent_concrete": 64.59627329192547,
                "kept_percent_lambda": 35.40372670807454,
                "num_examples": 5,
                "num_explored_concrete": 469,
                "num_explored_lambda": 319,
                "num_explored_none": 87,
                "num_inputs": 1,
                "num_kept_concrete": 312,
                "num_kept_lambda": 171,
                "num_values_explored": 875,
                "num_values_kept": 483,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 875
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter(lambda u1: Greater(u1, 0), x))'\n)",
            "task_solution": "Sum(Filter(lambda u1: Greater(u1, 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.15778080932796,
            "num_unique_values": 730,
            "solution": "Reverse(Sort(Filter(lambda u1: (lambda v1: Less(v1, 0))(u1), x)))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 66.81180454765361,
                "explored_percent_lambda": 26.221577164973393,
                "explored_percent_none": 6.966618287373004,
                "kept_percent_concrete": 65.3259361997226,
                "kept_percent_lambda": 34.674063800277395,
                "num_examples": 3,
                "num_explored_concrete": 1381,
                "num_explored_lambda": 542,
                "num_explored_none": 144,
                "num_inputs": 1,
                "num_kept_concrete": 471,
                "num_kept_lambda": 250,
                "num_values_explored": 2067,
                "num_values_kept": 721,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 2067
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter(lambda u1: Less(u1, 0), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter(lambda u1: Less(u1, 0), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 10.986866530030966,
            "num_unique_values": 776,
            "solution": "Filter(lambda u1: (lambda v1: Less(v1, b))(u1), Filter(lambda u1: (lambda v1: Greater(v1, a))(u1), x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 66.53574234092694,
                "explored_percent_lambda": 20.30636292223095,
                "explored_percent_none": 13.157894736842104,
                "kept_percent_concrete": 69.67320261437908,
                "kept_percent_lambda": 30.326797385620914,
                "num_examples": 3,
                "num_explored_concrete": 1694,
                "num_explored_lambda": 517,
                "num_explored_none": 335,
                "num_inputs": 3,
                "num_kept_concrete": 533,
                "num_kept_lambda": 232,
                "num_values_explored": 2546,
                "num_values_kept": 765,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5535
            },
            "success": true,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter(lambda u1: Less(u1, b), Filter(lambda u1: Greater(u1, a), x))'\n)",
            "task_solution": "Filter(lambda u1: Less(u1, b), Filter(lambda u1: Greater(u1, a), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.3777090404183,
            "num_unique_values": 953,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.68273092369478,
                "explored_percent_lambda": 22.42302543507363,
                "explored_percent_none": 6.894243641231593,
                "kept_percent_concrete": 62.3541887592789,
                "kept_percent_lambda": 37.6458112407211,
                "num_examples": 3,
                "num_explored_concrete": 2112,
                "num_explored_lambda": 670,
                "num_explored_none": 206,
                "num_inputs": 2,
                "num_kept_concrete": 588,
                "num_kept_lambda": 355,
                "num_values_explored": 2988,
                "num_values_kept": 943,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 290769
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter(lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n)), x)'\n)",
            "task_solution": "Filter(lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.731437554583,
            "num_unique_values": 948,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.58156547183614,
                "explored_percent_lambda": 27.17629846378932,
                "explored_percent_none": 7.2421360643745425,
                "kept_percent_concrete": 61.08742004264392,
                "kept_percent_lambda": 38.91257995735608,
                "num_examples": 3,
                "num_explored_concrete": 1793,
                "num_explored_lambda": 743,
                "num_explored_none": 198,
                "num_inputs": 2,
                "num_kept_concrete": 573,
                "num_kept_lambda": 365,
                "num_values_explored": 2734,
                "num_values_kept": 938,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 278799
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter(lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1)), x)'\n)",
            "task_solution": "Filter(lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 474.63691066391766,
            "num_unique_values": 742,
            "solution": "Sort(Filter(lambda u1: (lambda v1: Equal(v1, (lambda v1: Access(v1, x))(v1)))(u1), x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 63.98742703188145,
                "explored_percent_lambda": 31.162999550965424,
                "explored_percent_none": 4.84957341715312,
                "kept_percent_concrete": 60.982264665757164,
                "kept_percent_lambda": 39.017735334242836,
                "num_examples": 3,
                "num_explored_concrete": 1425,
                "num_explored_lambda": 694,
                "num_explored_none": 108,
                "num_inputs": 1,
                "num_kept_concrete": 447,
                "num_kept_lambda": 286,
                "num_values_explored": 2227,
                "num_values_kept": 733,
                "temperature": 1.0,
                "total_num_restarts": 79,
                "total_num_values_explored": 225336
            },
            "success": true,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter(lambda u1: Equal(u1, Access(u1, x)), x))'\n)",
            "task_solution": "Sort(Filter(lambda u1: Equal(u1, Access(u1, x)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.8180977478623,
            "num_unique_values": 986,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.701959436232386,
                "explored_percent_lambda": 25.472671020969404,
                "explored_percent_none": 11.825369542798212,
                "kept_percent_concrete": 63.38461538461539,
                "kept_percent_lambda": 36.61538461538461,
                "num_examples": 3,
                "num_explored_concrete": 1824,
                "num_explored_lambda": 741,
                "num_explored_none": 344,
                "num_inputs": 3,
                "num_kept_concrete": 618,
                "num_kept_lambda": 357,
                "num_values_explored": 2909,
                "num_values_kept": 975,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 290996
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter(lambda u1: Equal(Access(u1, x), y), i)'\n)",
            "task_solution": "Filter(lambda u1: Equal(Access(u1, x), y), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 239.5837381388992,
            "num_unique_values": 757,
            "solution": "Count(lambda u1: IsEven(0), Filter(lambda u1: (lambda v1: Equal(n, v1))(u1), x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 74.13343272456206,
                "explored_percent_lambda": 13.380544166977264,
                "explored_percent_none": 12.486023108460678,
                "kept_percent_concrete": 78.714859437751,
                "kept_percent_lambda": 21.285140562248998,
                "num_examples": 5,
                "num_explored_concrete": 1989,
                "num_explored_lambda": 359,
                "num_explored_none": 335,
                "num_inputs": 2,
                "num_kept_concrete": 588,
                "num_kept_lambda": 159,
                "num_values_explored": 2683,
                "num_values_kept": 747,
                "temperature": 1.0,
                "total_num_restarts": 40,
                "total_num_values_explored": 137463
            },
            "success": true,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count(lambda u1: Equal(u1, n), x)'\n)",
            "task_solution": "Count(lambda u1: Equal(u1, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.3754582852125168,
            "num_unique_values": 247,
            "solution": "Count(lambda u1: (lambda v1: Greater(q, v1))(u1), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 32.46554364471669,
                "explored_percent_lambda": 32.9249617151608,
                "explored_percent_none": 34.60949464012251,
                "kept_percent_concrete": 69.62025316455696,
                "kept_percent_lambda": 30.379746835443036,
                "num_examples": 5,
                "num_explored_concrete": 212,
                "num_explored_lambda": 215,
                "num_explored_none": 226,
                "num_inputs": 2,
                "num_kept_concrete": 165,
                "num_kept_lambda": 72,
                "num_values_explored": 653,
                "num_values_kept": 237,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 653
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count(lambda u1: Less(u1, q), x)'\n)",
            "task_solution": "Count(lambda u1: Less(u1, q), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.988339124247432,
            "num_unique_values": 1054,
            "solution": "Count(lambda u1: (lambda v1: Greater(Head(x), v1))(u1), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 72.1168790798881,
                "explored_percent_lambda": 17.56294684488654,
                "explored_percent_none": 10.320174075225365,
                "kept_percent_concrete": 77.32057416267942,
                "kept_percent_lambda": 22.679425837320576,
                "num_examples": 5,
                "num_explored_concrete": 2320,
                "num_explored_lambda": 565,
                "num_explored_none": 332,
                "num_inputs": 1,
                "num_kept_concrete": 808,
                "num_kept_lambda": 237,
                "num_values_explored": 3217,
                "num_values_kept": 1045,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 3217
            },
            "success": true,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count(lambda u1: Less(u1, Head(x)), x)'\n)",
            "task_solution": "Count(lambda u1: Less(u1, Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.127809939906001,
            "num_unique_values": 245,
            "solution": "Count(lambda u1: (lambda v1: Less(v1, 0))(u1), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 31.70212765957447,
                "explored_percent_lambda": 49.57446808510638,
                "explored_percent_none": 18.72340425531915,
                "kept_percent_concrete": 50.847457627118644,
                "kept_percent_lambda": 49.152542372881356,
                "num_examples": 5,
                "num_explored_concrete": 149,
                "num_explored_lambda": 233,
                "num_explored_none": 88,
                "num_inputs": 1,
                "num_kept_concrete": 120,
                "num_kept_lambda": 116,
                "num_values_explored": 470,
                "num_values_kept": 236,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 470
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count(lambda u1: Less(u1, 0), x)'\n)",
            "task_solution": "Count(lambda u1: Less(u1, 0), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 577.8418729212135,
            "num_unique_values": 1057,
            "solution": "Count(lambda u1: (lambda v1: Equal(v1, Last(x)))(u1), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 74.58656766790415,
                "explored_percent_lambda": 17.00978737765778,
                "explored_percent_none": 8.40364495443807,
                "kept_percent_concrete": 78.14885496183206,
                "kept_percent_lambda": 21.85114503816794,
                "num_examples": 5,
                "num_explored_concrete": 2210,
                "num_explored_lambda": 504,
                "num_explored_none": 249,
                "num_inputs": 1,
                "num_kept_concrete": 819,
                "num_kept_lambda": 229,
                "num_values_explored": 2963,
                "num_values_kept": 1048,
                "temperature": 1.0,
                "total_num_restarts": 96,
                "total_num_values_explored": 298336
            },
            "success": true,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count(lambda u1: Equal(u1, Last(x)), x)'\n)",
            "task_solution": "Count(lambda u1: Equal(u1, Last(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 131.76575238257647,
            "num_unique_values": 1041,
            "solution": "Count(lambda u1: (lambda v1: Equal(v1, Access(i, x)))(u1), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 84.31686978832585,
                "explored_percent_lambda": 9.653624118024375,
                "explored_percent_none": 6.0295060936497755,
                "kept_percent_concrete": 84.77206595538313,
                "kept_percent_lambda": 15.227934044616877,
                "num_examples": 5,
                "num_explored_concrete": 2629,
                "num_explored_lambda": 301,
                "num_explored_none": 188,
                "num_inputs": 2,
                "num_kept_concrete": 874,
                "num_kept_lambda": 157,
                "num_values_explored": 3118,
                "num_values_kept": 1031,
                "temperature": 1.0,
                "total_num_restarts": 22,
                "total_num_values_explored": 75801
            },
            "success": true,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count(lambda u1: Equal(u1, Access(i, x)), x)'\n)",
            "task_solution": "Count(lambda u1: Equal(u1, Access(i, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 44.61882699653506,
            "num_unique_values": 522,
            "solution": "Count(lambda u1: (lambda v1: IsOdd((lambda v1: Min(3, (lambda v1: Add(1, v1))(v1)))(v1)))(u1), x)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 52.84974093264249,
                "explored_percent_lambda": 34.11053540587219,
                "explored_percent_none": 13.03972366148532,
                "kept_percent_concrete": 68.42105263157895,
                "kept_percent_lambda": 31.57894736842105,
                "num_examples": 5,
                "num_explored_concrete": 612,
                "num_explored_lambda": 395,
                "num_explored_none": 151,
                "num_inputs": 1,
                "num_kept_concrete": 351,
                "num_kept_lambda": 162,
                "num_values_explored": 1158,
                "num_values_kept": 513,
                "temperature": 1.0,
                "total_num_restarts": 8,
                "total_num_values_explored": 23182
            },
            "success": true,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count(lambda u1: IsEven(Min(u1, 0)), x)'\n)",
            "task_solution": "Count(lambda u1: IsEven(Min(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.5943919476122,
            "num_unique_values": 1226,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.71891555001558,
                "explored_percent_lambda": 15.550015581177938,
                "explored_percent_none": 6.7310688688064815,
                "kept_percent_concrete": 78.28947368421052,
                "kept_percent_lambda": 21.710526315789473,
                "num_examples": 5,
                "num_explored_concrete": 2494,
                "num_explored_lambda": 499,
                "num_explored_none": 216,
                "num_inputs": 2,
                "num_kept_concrete": 952,
                "num_kept_lambda": 264,
                "num_values_explored": 3209,
                "num_values_kept": 1216,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 319104
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count(lambda u1: Equal(u1, 0), x), Count(lambda u1: Equal(u1, 0), y))'\n)",
            "task_solution": "Add(Count(lambda u1: Equal(u1, 0), x), Count(lambda u1: Equal(u1, 0), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 8.181883495301008,
            "num_unique_values": 424,
            "solution": "Take(Count(lambda u1: (lambda v1: Greater(v1, 0))(u1), r), Sort(c))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 38.888888888888886,
                "explored_percent_lambda": 51.06382978723404,
                "explored_percent_none": 10.047281323877069,
                "kept_percent_concrete": 46.85990338164251,
                "kept_percent_lambda": 53.14009661835749,
                "num_examples": 3,
                "num_explored_concrete": 329,
                "num_explored_lambda": 432,
                "num_explored_none": 85,
                "num_inputs": 2,
                "num_kept_concrete": 194,
                "num_kept_lambda": 220,
                "num_values_explored": 846,
                "num_values_kept": 414,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3889
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count(lambda u1: Greater(u1, 0), r), Sort(c))'\n)",
            "task_solution": "Take(Count(lambda u1: Greater(u1, 0), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.5655489079654,
            "num_unique_values": 1171,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.20224719101124,
                "explored_percent_lambda": 17.49598715890851,
                "explored_percent_none": 4.301765650080257,
                "kept_percent_concrete": 77.2609819121447,
                "kept_percent_lambda": 22.739018087855296,
                "num_examples": 5,
                "num_explored_concrete": 2436,
                "num_explored_lambda": 545,
                "num_explored_none": 134,
                "num_inputs": 2,
                "num_kept_concrete": 897,
                "num_kept_lambda": 264,
                "num_values_explored": 3115,
                "num_values_kept": 1161,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 311393
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith(lambda u1, u2: Add(Multiply(u1, 3), u2), w, t))'\n)",
            "task_solution": "Maximum(ZipWith(lambda u1, u2: Add(Multiply(u1, 3), u2), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.8265481963754,
            "num_unique_values": 1122,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 79.92459943449576,
                "explored_percent_lambda": 16.619541313226517,
                "explored_percent_none": 3.4558592522777256,
                "kept_percent_concrete": 77.06834532374101,
                "kept_percent_lambda": 22.931654676258994,
                "num_examples": 5,
                "num_explored_concrete": 2544,
                "num_explored_lambda": 529,
                "num_explored_none": 110,
                "num_inputs": 2,
                "num_kept_concrete": 857,
                "num_kept_lambda": 255,
                "num_values_explored": 3183,
                "num_values_kept": 1112,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 317196
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 7.323540581390262,
            "num_unique_values": 252,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Min(v1, v2))(u1, u2), a, Reverse(a))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 28.803245436105477,
                "explored_percent_lambda": 57.809330628803245,
                "explored_percent_none": 13.387423935091277,
                "kept_percent_concrete": 39.09465020576132,
                "kept_percent_lambda": 60.90534979423868,
                "num_examples": 3,
                "num_explored_concrete": 142,
                "num_explored_lambda": 285,
                "num_explored_none": 66,
                "num_inputs": 1,
                "num_kept_concrete": 95,
                "num_kept_lambda": 148,
                "num_values_explored": 493,
                "num_values_kept": 243,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3349
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith(lambda u1, u2: Min(u1, u2), a, Reverse(a))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Min(u1, u2), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 152.86405573226511,
            "num_unique_values": 569,
            "solution": "Subtract(Minimum(ZipWith(lambda u1, u2: (lambda v1, v2: Add(v1, v2))(u1, u2), p, t)), 2)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 57.956989247311824,
                "explored_percent_lambda": 31.93548387096774,
                "explored_percent_none": 10.10752688172043,
                "kept_percent_concrete": 70.304114490161,
                "kept_percent_lambda": 29.695885509838998,
                "num_examples": 5,
                "num_explored_concrete": 539,
                "num_explored_lambda": 297,
                "num_explored_none": 94,
                "num_inputs": 2,
                "num_kept_concrete": 393,
                "num_kept_lambda": 166,
                "num_values_explored": 930,
                "num_values_kept": 559,
                "temperature": 1.0,
                "total_num_restarts": 26,
                "total_num_values_explored": 79906
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith(lambda u1, u2: Add(u1, u2), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith(lambda u1, u2: Add(u1, u2), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.3417874779552,
            "num_unique_values": 973,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.04242781378903,
                "explored_percent_lambda": 18.65055981143194,
                "explored_percent_none": 7.307012374779021,
                "kept_percent_concrete": 74.48132780082987,
                "kept_percent_lambda": 25.518672199170126,
                "num_examples": 5,
                "num_explored_concrete": 2513,
                "num_explored_lambda": 633,
                "num_explored_none": 248,
                "num_inputs": 1,
                "num_kept_concrete": 718,
                "num_kept_lambda": 246,
                "num_values_explored": 3394,
                "num_values_kept": 964,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 340840
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith(lambda u1, u2: Max(Subtract(u1, u2), 0), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Max(Subtract(u1, u2), 0), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 98.50239003635943,
            "num_unique_values": 494,
            "solution": "Sum(ZipWith(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u2, u1), y, x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 47.18384697130712,
                "explored_percent_lambda": 35.81296493092455,
                "explored_percent_none": 17.00318809776833,
                "kept_percent_concrete": 65.9090909090909,
                "kept_percent_lambda": 34.09090909090909,
                "num_examples": 5,
                "num_explored_concrete": 444,
                "num_explored_lambda": 337,
                "num_explored_none": 160,
                "num_inputs": 2,
                "num_kept_concrete": 319,
                "num_kept_lambda": 165,
                "num_values_explored": 941,
                "num_values_kept": 484,
                "temperature": 1.0,
                "total_num_restarts": 17,
                "total_num_values_explored": 51148
            },
            "success": true,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, y))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.8362021166831,
            "num_unique_values": 919,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.35489220563847,
                "explored_percent_lambda": 29.65174129353234,
                "explored_percent_none": 7.993366500829187,
                "kept_percent_concrete": 47.08470847084708,
                "kept_percent_lambda": 52.91529152915292,
                "num_examples": 3,
                "num_explored_concrete": 1880,
                "num_explored_lambda": 894,
                "num_explored_none": 241,
                "num_inputs": 2,
                "num_kept_concrete": 428,
                "num_kept_lambda": 481,
                "num_values_explored": 3015,
                "num_values_kept": 909,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 303736
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith(lambda u1, u2: IntDivide(Add(u1, u2), 2), x, y)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: IntDivide(Add(u1, u2), 2), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.6147713474929,
            "num_unique_values": 867,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.43863912515188,
                "explored_percent_lambda": 19.62332928311057,
                "explored_percent_none": 11.938031591737545,
                "kept_percent_concrete": 57.94392523364486,
                "kept_percent_lambda": 42.05607476635514,
                "num_examples": 3,
                "num_explored_concrete": 2253,
                "num_explored_lambda": 646,
                "num_explored_none": 393,
                "num_inputs": 3,
                "num_kept_concrete": 496,
                "num_kept_lambda": 360,
                "num_values_explored": 3292,
                "num_values_kept": 856,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 328953
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith(lambda u1, u2: Add(u1, u2), a, ZipWith(lambda u1, u2: Add(u1, u2), b, c))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Add(u1, u2), a, ZipWith(lambda u1, u2: Add(u1, u2), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 8.65807730704546,
            "num_unique_values": 483,
            "solution": "Sort(ZipWith(lambda u1, u2: (lambda v1, v2: IntDivide(v1, v2))(u1, u2), m, n))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 56.842923794712284,
                "explored_percent_lambda": 28.149300155520994,
                "explored_percent_none": 15.007776049766719,
                "kept_percent_concrete": 55.39112050739958,
                "kept_percent_lambda": 44.60887949260042,
                "num_examples": 3,
                "num_explored_concrete": 731,
                "num_explored_lambda": 362,
                "num_explored_none": 193,
                "num_inputs": 2,
                "num_kept_concrete": 262,
                "num_kept_lambda": 211,
                "num_values_explored": 1286,
                "num_values_kept": 473,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4623
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith(lambda u1, u2: IntDivide(u1, u2), m, n))'\n)",
            "task_solution": "Sort(ZipWith(lambda u1, u2: IntDivide(u1, u2), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 25.41671692021191,
            "num_unique_values": 259,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Subtract(v1, v2))(u2, u1), x, Drop(1, x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 32.758620689655174,
                "explored_percent_lambda": 50.76628352490422,
                "explored_percent_none": 16.47509578544061,
                "kept_percent_concrete": 46.4,
                "kept_percent_lambda": 53.6,
                "num_examples": 3,
                "num_explored_concrete": 171,
                "num_explored_lambda": 265,
                "num_explored_none": 86,
                "num_inputs": 1,
                "num_kept_concrete": 116,
                "num_kept_lambda": 134,
                "num_values_explored": 522,
                "num_values_kept": 250,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 12864
            },
            "success": true,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith(lambda u1, u2: Subtract(u2, u1), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Subtract(u2, u1), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 586.7563317492604,
            "num_unique_values": 486,
            "solution": "Sum(ZipWith(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u2, u1), x, m))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 47.08785784797631,
                "explored_percent_lambda": 35.636722606120436,
                "explored_percent_none": 17.275419545903258,
                "kept_percent_concrete": 68.0672268907563,
                "kept_percent_lambda": 31.932773109243698,
                "num_examples": 5,
                "num_explored_concrete": 477,
                "num_explored_lambda": 361,
                "num_explored_none": 175,
                "num_inputs": 2,
                "num_kept_concrete": 324,
                "num_kept_lambda": 152,
                "num_values_explored": 1013,
                "num_values_kept": 476,
                "temperature": 1.0,
                "total_num_restarts": 98,
                "total_num_values_explored": 300576
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, m))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.8546774741262,
            "num_unique_values": 984,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.66233766233766,
                "explored_percent_lambda": 33.333333333333336,
                "explored_percent_none": 4.004329004329004,
                "kept_percent_concrete": 44.76386036960986,
                "kept_percent_lambda": 55.23613963039014,
                "num_examples": 3,
                "num_explored_concrete": 1737,
                "num_explored_lambda": 924,
                "num_explored_none": 111,
                "num_inputs": 2,
                "num_kept_concrete": 436,
                "num_kept_lambda": 538,
                "num_values_explored": 2772,
                "num_values_kept": 974,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 293947
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith(lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1)), x, y)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.8855253439397,
            "num_unique_values": 1034,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.14698492462311,
                "explored_percent_lambda": 19.126884422110553,
                "explored_percent_none": 7.726130653266332,
                "kept_percent_concrete": 74.8046875,
                "kept_percent_lambda": 25.1953125,
                "num_examples": 5,
                "num_explored_concrete": 2329,
                "num_explored_lambda": 609,
                "num_explored_none": 246,
                "num_inputs": 2,
                "num_kept_concrete": 766,
                "num_kept_lambda": 258,
                "num_values_explored": 3184,
                "num_values_kept": 1024,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 323594
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith(lambda u1, u2: Square(Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Square(Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.9893845859915,
            "num_unique_values": 1003,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 51.74689440993789,
                "explored_percent_lambda": 39.40217391304348,
                "explored_percent_none": 8.850931677018634,
                "kept_percent_concrete": 41.49043303121853,
                "kept_percent_lambda": 58.50956696878147,
                "num_examples": 3,
                "num_explored_concrete": 1333,
                "num_explored_lambda": 1015,
                "num_explored_none": 228,
                "num_inputs": 2,
                "num_kept_concrete": 412,
                "num_kept_lambda": 581,
                "num_values_explored": 2576,
                "num_values_kept": 993,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 258673
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith(lambda u1, u2: If(Equal(u1, u2), 1, 0), x, y)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: If(Equal(u1, u2), 1, 0), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.3478651717305183,
            "num_unique_values": 263,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Min(v1, v2))(u1, u2), Sort(y), Sort(x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 35.80952380952381,
                "explored_percent_lambda": 47.42857142857143,
                "explored_percent_none": 16.761904761904763,
                "kept_percent_concrete": 47.03557312252964,
                "kept_percent_lambda": 52.96442687747036,
                "num_examples": 3,
                "num_explored_concrete": 188,
                "num_explored_lambda": 249,
                "num_explored_none": 88,
                "num_inputs": 2,
                "num_kept_concrete": 119,
                "num_kept_lambda": 134,
                "num_values_explored": 525,
                "num_values_kept": 253,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 525
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith(lambda u1, u2: Min(u1, u2), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Min(u1, u2), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 99.0635034199804,
            "num_unique_values": 536,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Add(v1, v2))(u1, u2), x, Drop(Subtract(1, 4), x))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 56.25,
                "explored_percent_lambda": 35.8974358974359,
                "explored_percent_none": 7.852564102564102,
                "kept_percent_concrete": 60.53130929791271,
                "kept_percent_lambda": 39.46869070208729,
                "num_examples": 3,
                "num_explored_concrete": 702,
                "num_explored_lambda": 448,
                "num_explored_none": 98,
                "num_inputs": 1,
                "num_kept_concrete": 319,
                "num_kept_lambda": 208,
                "num_values_explored": 1248,
                "num_values_kept": 527,
                "temperature": 1.0,
                "total_num_restarts": 17,
                "total_num_values_explored": 51074
            },
            "success": true,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith(lambda u1, u2: Add(u1, u2), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Add(u1, u2), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 200.89885044284165,
            "num_unique_values": 461,
            "solution": "Maximum(ZipWith(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), x, Reverse(x)))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 48.15642458100559,
                "explored_percent_lambda": 41.229050279329606,
                "explored_percent_none": 10.614525139664805,
                "kept_percent_concrete": 65.48672566371681,
                "kept_percent_lambda": 34.51327433628319,
                "num_examples": 5,
                "num_explored_concrete": 431,
                "num_explored_lambda": 369,
                "num_explored_none": 95,
                "num_inputs": 1,
                "num_kept_concrete": 296,
                "num_kept_lambda": 156,
                "num_values_explored": 895,
                "num_values_kept": 452,
                "temperature": 1.0,
                "total_num_restarts": 34,
                "total_num_values_explored": 104960
            },
            "success": true,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 67.6763986311853,
            "num_unique_values": 264,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Multiply(v1, (lambda v1: Add(1, v1))(v2)))(u2, u1), w, p)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 33.01343570057582,
                "explored_percent_lambda": 52.20729366602687,
                "explored_percent_none": 14.779270633397314,
                "kept_percent_concrete": 40.55118110236221,
                "kept_percent_lambda": 59.44881889763779,
                "num_examples": 3,
                "num_explored_concrete": 172,
                "num_explored_lambda": 272,
                "num_explored_none": 77,
                "num_inputs": 2,
                "num_kept_concrete": 103,
                "num_kept_lambda": 151,
                "num_values_explored": 521,
                "num_values_kept": 254,
                "temperature": 1.0,
                "total_num_restarts": 12,
                "total_num_values_explored": 30020
            },
            "success": true,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith(lambda u1, u2: Multiply(u1, Add(1, u2)), p, w)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Multiply(u1, Add(1, u2)), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.5118819437921,
            "num_unique_values": 1146,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 80.59149722735674,
                "explored_percent_lambda": 15.372766481823783,
                "explored_percent_none": 4.03573629081947,
                "kept_percent_concrete": 79.15567282321899,
                "kept_percent_lambda": 20.844327176781004,
                "num_examples": 5,
                "num_explored_concrete": 2616,
                "num_explored_lambda": 499,
                "num_explored_none": 131,
                "num_inputs": 1,
                "num_kept_concrete": 900,
                "num_kept_lambda": 237,
                "num_values_explored": 3246,
                "num_values_kept": 1137,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 323180
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1(lambda u1, u2: Min(u1, u2), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1(lambda u1, u2: Min(u1, u2), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 284.7474607434124,
            "num_unique_values": 263,
            "solution": "Scanl1(lambda u1, u2: (lambda v1, v2: Max(v1, v2))(u2, u1), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 29.423459244532804,
                "explored_percent_lambda": 56.66003976143141,
                "explored_percent_none": 13.916500994035784,
                "kept_percent_concrete": 42.125984251968504,
                "kept_percent_lambda": 57.874015748031496,
                "num_examples": 3,
                "num_explored_concrete": 148,
                "num_explored_lambda": 285,
                "num_explored_none": 70,
                "num_inputs": 1,
                "num_kept_concrete": 107,
                "num_kept_lambda": 147,
                "num_values_explored": 503,
                "num_values_kept": 254,
                "temperature": 1.0,
                "total_num_restarts": 48,
                "total_num_values_explored": 126376
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1(lambda u1, u2: Max(u1, u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Max(u1, u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.7132778633385897,
            "num_unique_values": 850,
            "solution": "Subtract(Sum(x), Minimum(Map(lambda u1: (lambda v1: Sum((lambda v1: Drop(v1, x))(v1)))(u1), x)))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 71.7991169977925,
                "explored_percent_lambda": 22.8476821192053,
                "explored_percent_none": 5.3532008830022075,
                "kept_percent_concrete": 74.07847800237812,
                "kept_percent_lambda": 25.92152199762188,
                "num_examples": 5,
                "num_explored_concrete": 1301,
                "num_explored_lambda": 414,
                "num_explored_none": 97,
                "num_inputs": 1,
                "num_kept_concrete": 623,
                "num_kept_lambda": 218,
                "num_values_explored": 1812,
                "num_values_kept": 841,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1812
            },
            "success": true,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1(lambda u1, u2: Add(u1, u2), x))'\n)",
            "task_solution": "Maximum(Scanl1(lambda u1, u2: Add(u1, u2), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 73.90387123450637,
            "num_unique_values": 264,
            "solution": "Scanl1(lambda u1, u2: (lambda v1, v2: Add(v1, v2))(u1, u2), Reverse(x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 25.085324232081913,
                "explored_percent_lambda": 54.948805460750854,
                "explored_percent_none": 19.965870307167236,
                "kept_percent_concrete": 42.35294117647059,
                "kept_percent_lambda": 57.64705882352941,
                "num_examples": 3,
                "num_explored_concrete": 147,
                "num_explored_lambda": 322,
                "num_explored_none": 117,
                "num_inputs": 1,
                "num_kept_concrete": 108,
                "num_kept_lambda": 147,
                "num_values_explored": 586,
                "num_values_kept": 255,
                "temperature": 1.0,
                "total_num_restarts": 13,
                "total_num_values_explored": 33146
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1(lambda u1, u2: Add(u1, u2), Reverse(x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(u1, u2), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.6535741817206,
            "num_unique_values": 916,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.9992910315491,
                "explored_percent_lambda": 32.32896136121943,
                "explored_percent_none": 5.671747607231478,
                "kept_percent_concrete": 47.07828004410143,
                "kept_percent_lambda": 52.92171995589857,
                "num_examples": 3,
                "num_explored_concrete": 1749,
                "num_explored_lambda": 912,
                "num_explored_none": 160,
                "num_inputs": 1,
                "num_kept_concrete": 427,
                "num_kept_lambda": 480,
                "num_values_explored": 2821,
                "num_values_kept": 907,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 287844
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1(lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2)), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.6236629467458,
            "num_unique_values": 887,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.86608442503639,
                "explored_percent_lambda": 16.302765647743815,
                "explored_percent_none": 7.831149927219796,
                "kept_percent_concrete": 69.44127708095782,
                "kept_percent_lambda": 30.55872291904219,
                "num_examples": 3,
                "num_explored_concrete": 2606,
                "num_explored_lambda": 560,
                "num_explored_none": 269,
                "num_inputs": 2,
                "num_kept_concrete": 609,
                "num_kept_lambda": 268,
                "num_values_explored": 3435,
                "num_values_kept": 877,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 335876
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1(lambda u1, u2: Add(Add(u1, u2), n), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(Add(u1, u2), n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.8800237383693,
            "num_unique_values": 916,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.48028673835125,
                "explored_percent_lambda": 30.86021505376344,
                "explored_percent_none": 4.659498207885305,
                "kept_percent_concrete": 47.960308710033075,
                "kept_percent_lambda": 52.039691289966925,
                "num_examples": 3,
                "num_explored_concrete": 1799,
                "num_explored_lambda": 861,
                "num_explored_none": 130,
                "num_inputs": 1,
                "num_kept_concrete": 435,
                "num_kept_lambda": 472,
                "num_values_explored": 2790,
                "num_values_kept": 907,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 285027
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1(lambda u1, u2: Add(IntDivide(u1, 2), u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(IntDivide(u1, 2), u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 294.5503232963383,
            "num_unique_values": 802,
            "solution": "Scanl1(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), Take(n, x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 64.96268656716418,
                "explored_percent_lambda": 27.388059701492537,
                "explored_percent_none": 7.649253731343284,
                "kept_percent_concrete": 55.80808080808081,
                "kept_percent_lambda": 44.19191919191919,
                "num_examples": 3,
                "num_explored_concrete": 1741,
                "num_explored_lambda": 734,
                "num_explored_none": 205,
                "num_inputs": 2,
                "num_kept_concrete": 442,
                "num_kept_lambda": 350,
                "num_values_explored": 2680,
                "num_values_kept": 792,
                "temperature": 1.0,
                "total_num_restarts": 49,
                "total_num_values_explored": 152408
            },
            "success": true,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1(lambda u1, u2: Multiply(u1, u2), Take(n, x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Multiply(u1, u2), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.3002595864236355,
            "num_unique_values": 673,
            "solution": "Last(Scanl1(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), Reverse(x)))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 67.33870967741936,
                "explored_percent_lambda": 24.481566820276498,
                "explored_percent_none": 8.179723502304148,
                "kept_percent_concrete": 72.74096385542168,
                "kept_percent_lambda": 27.259036144578314,
                "num_examples": 5,
                "num_explored_concrete": 1169,
                "num_explored_lambda": 425,
                "num_explored_none": 142,
                "num_inputs": 1,
                "num_kept_concrete": 483,
                "num_kept_lambda": 181,
                "num_values_explored": 1736,
                "num_values_kept": 664,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1736
            },
            "success": true,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1(lambda u1, u2: Multiply(u1, u2), x))'\n)",
            "task_solution": "Last(Scanl1(lambda u1, u2: Multiply(u1, u2), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 538.1625907495618,
            "num_unique_values": 265,
            "solution": "Scanl1(lambda u1, u2: (lambda v1, v2: Min(v1, v2))(u1, u2), Drop(1, Take(-1, x)))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 26.85459940652819,
                "explored_percent_lambda": 58.753709198813056,
                "explored_percent_none": 14.391691394658753,
                "kept_percent_concrete": 48.828125,
                "kept_percent_lambda": 51.171875,
                "num_examples": 3,
                "num_explored_concrete": 181,
                "num_explored_lambda": 396,
                "num_explored_none": 97,
                "num_inputs": 1,
                "num_kept_concrete": 125,
                "num_kept_lambda": 131,
                "num_values_explored": 674,
                "num_values_kept": 256,
                "temperature": 1.0,
                "total_num_restarts": 90,
                "total_num_values_explored": 271425
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1(lambda u1, u2: Min(u1, u2), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Min(u1, u2), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.5076698418707,
            "num_unique_values": 913,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.69025367156209,
                "explored_percent_lambda": 27.0694259012016,
                "explored_percent_none": 5.240320427236315,
                "kept_percent_concrete": 51.65929203539823,
                "kept_percent_lambda": 48.34070796460177,
                "num_examples": 3,
                "num_explored_concrete": 2028,
                "num_explored_lambda": 811,
                "num_explored_none": 157,
                "num_inputs": 1,
                "num_kept_concrete": 467,
                "num_kept_lambda": 437,
                "num_values_explored": 2996,
                "num_values_kept": 904,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 307888
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1(lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 121.99810175411403,
            "num_unique_values": 266,
            "solution": "Scanl1(lambda u1, u2: (lambda v1: Access(v1, x))(u1), Map(lambda u1: Head(x), x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 28.91566265060241,
                "explored_percent_lambda": 56.82730923694779,
                "explored_percent_none": 14.257028112449799,
                "kept_percent_concrete": 40.46692607003891,
                "kept_percent_lambda": 59.53307392996109,
                "num_examples": 3,
                "num_explored_concrete": 144,
                "num_explored_lambda": 283,
                "num_explored_none": 71,
                "num_inputs": 1,
                "num_kept_concrete": 104,
                "num_kept_lambda": 153,
                "num_values_explored": 498,
                "num_values_kept": 257,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 52085
            },
            "success": true,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1(lambda u1, u2: Access(u1, x), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Access(u1, x), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 471.44797144830227,
            "num_unique_values": 258,
            "solution": "Scanl1(lambda u1, u2: (lambda v1, v2: Max(v1, (lambda v1: Subtract(v1, -1))(v2)))(u2, u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 29.018492176386914,
                "explored_percent_lambda": 51.493598862019915,
                "explored_percent_none": 19.48790896159317,
                "kept_percent_concrete": 48.99598393574297,
                "kept_percent_lambda": 51.00401606425703,
                "num_examples": 3,
                "num_explored_concrete": 204,
                "num_explored_lambda": 362,
                "num_explored_none": 137,
                "num_inputs": 1,
                "num_kept_concrete": 122,
                "num_kept_lambda": 127,
                "num_values_explored": 703,
                "num_values_kept": 249,
                "temperature": 1.0,
                "total_num_restarts": 79,
                "total_num_values_explored": 253628
            },
            "success": true,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1(lambda u1, u2: Max(Add(u1, 1), u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Max(Add(u1, 1), u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.8019295465201,
            "num_unique_values": 966,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.76996914638327,
                "explored_percent_lambda": 31.196434693177924,
                "explored_percent_none": 6.033596160438807,
                "kept_percent_concrete": 49.32079414838036,
                "kept_percent_lambda": 50.67920585161964,
                "num_examples": 3,
                "num_explored_concrete": 1831,
                "num_explored_lambda": 910,
                "num_explored_none": 176,
                "num_inputs": 1,
                "num_kept_concrete": 472,
                "num_kept_lambda": 485,
                "num_values_explored": 2917,
                "num_values_kept": 957,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 282060
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1(lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 603.1195670813322,
            "num_unique_values": 1183,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.7293677981937,
                "explored_percent_lambda": 15.44690127686079,
                "explored_percent_none": 5.8237309249455,
                "kept_percent_concrete": 77.49360613810742,
                "kept_percent_lambda": 22.506393861892583,
                "num_examples": 5,
                "num_explored_concrete": 2528,
                "num_explored_lambda": 496,
                "num_explored_none": 187,
                "num_inputs": 2,
                "num_kept_concrete": 909,
                "num_kept_lambda": 264,
                "num_values_explored": 3211,
                "num_values_kept": 1173,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 327699
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count(lambda u1: Greater(u1, 0), ZipWith(lambda u1, u2: Subtract(u1, u2), a, b))'\n)",
            "task_solution": "Count(lambda u1: Greater(u1, 0), ZipWith(lambda u1, u2: Subtract(u1, u2), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.8260148521513,
            "num_unique_values": 1073,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.90995260663507,
                "explored_percent_lambda": 16.795023696682463,
                "explored_percent_none": 4.295023696682464,
                "kept_percent_concrete": 76.48165569143933,
                "kept_percent_lambda": 23.51834430856068,
                "num_examples": 5,
                "num_explored_concrete": 2664,
                "num_explored_lambda": 567,
                "num_explored_none": 145,
                "num_inputs": 2,
                "num_kept_concrete": 813,
                "num_kept_lambda": 250,
                "num_values_explored": 3376,
                "num_values_kept": 1063,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 336623
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), s, Scanl1(lambda u1, u2: Add(u1, u2), p)))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), s, Scanl1(lambda u1, u2: Add(u1, u2), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.738119676709175,
            "num_unique_values": 250,
            "solution": "Scanl1(lambda u1, u2: (lambda v1: Subtract(v1, -1))(u1), Map(lambda u1: 0, x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 26.256983240223462,
                "explored_percent_lambda": 50.977653631284916,
                "explored_percent_none": 22.76536312849162,
                "kept_percent_concrete": 42.738589211618255,
                "kept_percent_lambda": 57.261410788381745,
                "num_examples": 3,
                "num_explored_concrete": 188,
                "num_explored_lambda": 365,
                "num_explored_none": 163,
                "num_inputs": 1,
                "num_kept_concrete": 103,
                "num_kept_lambda": 138,
                "num_values_explored": 716,
                "num_values_kept": 241,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 716
            },
            "success": true,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1(lambda u1, u2: Add(u1, 1), Map(lambda u1: 0, x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(u1, 1), Map(lambda u1: 0, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.5067436657846,
            "num_unique_values": 982,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.4193962748876,
                "explored_percent_lambda": 24.309569685292228,
                "explored_percent_none": 4.271034039820167,
                "kept_percent_concrete": 61.15107913669065,
                "kept_percent_lambda": 38.84892086330935,
                "num_examples": 3,
                "num_explored_concrete": 2224,
                "num_explored_lambda": 757,
                "num_explored_none": 133,
                "num_inputs": 1,
                "num_kept_concrete": 595,
                "num_kept_lambda": 378,
                "num_values_explored": 3114,
                "num_values_kept": 973,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 310990
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter(lambda u1: IsOdd(u1), ZipWith(lambda u1, u2: Multiply(u2, u1), x, Drop(1, x)))'\n)",
            "task_solution": "Filter(lambda u1: IsOdd(u1), ZipWith(lambda u1, u2: Multiply(u2, u1), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 25.392730712890625,
            "num_unique_values": 269,
            "solution": "Scanl1(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), Filter(lambda u1: (lambda v1: IsOdd(v1))(u1), x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 29.032258064516128,
                "explored_percent_lambda": 55.443548387096776,
                "explored_percent_none": 15.524193548387096,
                "kept_percent_concrete": 42.30769230769231,
                "kept_percent_lambda": 57.69230769230769,
                "num_examples": 3,
                "num_explored_concrete": 144,
                "num_explored_lambda": 275,
                "num_explored_none": 77,
                "num_inputs": 1,
                "num_kept_concrete": 110,
                "num_kept_lambda": 150,
                "num_values_explored": 496,
                "num_values_kept": 260,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 12517
            },
            "success": true,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1(lambda u1, u2: Multiply(u1, u2), Filter(lambda u1: IsOdd(u1), x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Multiply(u1, u2), Filter(lambda u1: IsOdd(u1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.4199609290808,
            "num_unique_values": 909,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.09153869316471,
                "explored_percent_lambda": 20.14453477868112,
                "explored_percent_none": 3.7639265281541703,
                "kept_percent_concrete": 55.7285873192436,
                "kept_percent_lambda": 44.2714126807564,
                "num_examples": 3,
                "num_explored_concrete": 2527,
                "num_explored_lambda": 669,
                "num_explored_none": 125,
                "num_inputs": 2,
                "num_kept_concrete": 501,
                "num_kept_lambda": 398,
                "num_values_explored": 3321,
                "num_values_kept": 899,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 338882
            },
            "success": false,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1(lambda u1, u2: Add(u1, u2), ZipWith(lambda u1, u2: Add(u1, u2), x, y))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(u1, u2), ZipWith(lambda u1, u2: Add(u1, u2), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.6078642103821,
            "num_unique_values": 919,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.46554364471669,
                "explored_percent_lambda": 19.87748851454824,
                "explored_percent_none": 7.656967840735069,
                "kept_percent_concrete": 59.801762114537446,
                "kept_percent_lambda": 40.198237885462554,
                "num_examples": 3,
                "num_explored_concrete": 2366,
                "num_explored_lambda": 649,
                "num_explored_none": 250,
                "num_inputs": 3,
                "num_kept_concrete": 543,
                "num_kept_lambda": 365,
                "num_values_explored": 3265,
                "num_values_kept": 908,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 328124
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith(lambda u1, u2: Add(u1, u2), x, Map(lambda u1: Access(u1, y), i))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Add(u1, u2), x, Map(lambda u1: Access(u1, y), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 603.0297466926277,
            "num_unique_values": 1074,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.46605744125327,
                "explored_percent_lambda": 24.118798955613578,
                "explored_percent_none": 2.4151436031331595,
                "kept_percent_concrete": 65.6015037593985,
                "kept_percent_lambda": 34.3984962406015,
                "num_examples": 3,
                "num_explored_concrete": 2251,
                "num_explored_lambda": 739,
                "num_explored_none": 74,
                "num_inputs": 2,
                "num_kept_concrete": 698,
                "num_kept_lambda": 366,
                "num_values_explored": 3064,
                "num_values_kept": 1064,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 304740
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter(lambda u1: Greater(u1, -1), ZipWith(lambda u1, u2: Subtract(u1, u2), x, y))'\n)",
            "task_solution": "Filter(lambda u1: Greater(u1, -1), ZipWith(lambda u1, u2: Subtract(u1, u2), x, y))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.69
}