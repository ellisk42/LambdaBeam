{
    "num_tasks": 100,
    "num_tasks_solved": 68,
    "results": [
        {
            "elapsed_time": 3.632376417517662,
            "num_unique_values": 757,
            "solution": "Sum(Take(k, Sort(Take(Square(k), b))))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 72.45883021010789,
                "explored_percent_lambda": 17.262918796138557,
                "explored_percent_none": 10.278250993753549,
                "kept_percent_concrete": 80.72289156626506,
                "kept_percent_lambda": 19.27710843373494,
                "num_examples": 5,
                "num_explored_concrete": 1276,
                "num_explored_lambda": 304,
                "num_explored_none": 181,
                "num_inputs": 2,
                "num_kept_concrete": 603,
                "num_kept_lambda": 144,
                "num_values_explored": 1761,
                "num_values_kept": 747,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1761
            },
            "success": true,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 16.145493065938354,
            "num_unique_values": 226,
            "solution": "If(IsEven(x), IntDivide(x, 2), Subtract(Multiply(x, 3), -1))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 37.64940239043825,
                "explored_percent_lambda": 11.314741035856574,
                "explored_percent_none": 51.03585657370518,
                "kept_percent_concrete": 86.17511520737327,
                "kept_percent_lambda": 13.824884792626728,
                "num_examples": 5,
                "num_explored_concrete": 945,
                "num_explored_lambda": 284,
                "num_explored_none": 1281,
                "num_inputs": 1,
                "num_kept_concrete": 187,
                "num_kept_lambda": 30,
                "num_values_explored": 2510,
                "num_values_kept": 217,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 9986
            },
            "success": true,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.0902955811470747,
            "num_unique_values": 149,
            "solution": "Subtract(Multiply(y, Subtract(x, 2)), Subtract(x, y))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 21.891058581706062,
                "explored_percent_lambda": 9.660842754367934,
                "explored_percent_none": 68.448098663926,
                "kept_percent_concrete": 89.20863309352518,
                "kept_percent_lambda": 10.79136690647482,
                "num_examples": 5,
                "num_explored_concrete": 426,
                "num_explored_lambda": 188,
                "num_explored_none": 1332,
                "num_inputs": 2,
                "num_kept_concrete": 124,
                "num_kept_lambda": 15,
                "num_values_explored": 1946,
                "num_values_kept": 139,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1946
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 39.062532076612115,
            "num_unique_values": 156,
            "solution": "Multiply(k, IntDivide(Add(x, k), k))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 21.321631388745484,
                "explored_percent_lambda": 7.847186370676304,
                "explored_percent_none": 70.83118224057822,
                "kept_percent_concrete": 92.46575342465754,
                "kept_percent_lambda": 7.534246575342466,
                "num_examples": 5,
                "num_explored_concrete": 413,
                "num_explored_lambda": 152,
                "num_explored_none": 1372,
                "num_inputs": 2,
                "num_kept_concrete": 135,
                "num_kept_lambda": 11,
                "num_values_explored": 1937,
                "num_values_kept": 146,
                "temperature": 1.0,
                "total_num_restarts": 7,
                "total_num_values_explored": 24814
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.980299286544323,
            "num_unique_values": 152,
            "solution": "Take(Subtract(0, n), x)",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 38.074398249452955,
                "explored_percent_lambda": 40.70021881838074,
                "explored_percent_none": 21.2253829321663,
                "kept_percent_concrete": 40.140845070422536,
                "kept_percent_lambda": 59.859154929577464,
                "num_examples": 3,
                "num_explored_concrete": 174,
                "num_explored_lambda": 186,
                "num_explored_none": 97,
                "num_inputs": 2,
                "num_kept_concrete": 57,
                "num_kept_lambda": 85,
                "num_values_explored": 457,
                "num_values_kept": 142,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 457
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.5164515636861324,
            "num_unique_values": 465,
            "solution": "Reverse(Sort(Drop(Multiply(n, -1), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 49.6742671009772,
                "explored_percent_lambda": 36.56351791530945,
                "explored_percent_none": 13.762214983713354,
                "kept_percent_concrete": 56.7032967032967,
                "kept_percent_lambda": 43.2967032967033,
                "num_examples": 3,
                "num_explored_concrete": 610,
                "num_explored_lambda": 449,
                "num_explored_none": 169,
                "num_inputs": 2,
                "num_kept_concrete": 258,
                "num_kept_lambda": 197,
                "num_values_explored": 1228,
                "num_values_kept": 455,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1228
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.9732976723462343,
            "num_unique_values": 153,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 10.985915492957746,
                "explored_percent_lambda": 71.54929577464789,
                "explored_percent_none": 17.464788732394368,
                "kept_percent_concrete": 18.055555555555557,
                "kept_percent_lambda": 81.94444444444444,
                "num_examples": 3,
                "num_explored_concrete": 39,
                "num_explored_lambda": 254,
                "num_explored_none": 62,
                "num_inputs": 1,
                "num_kept_concrete": 26,
                "num_kept_lambda": 118,
                "num_values_explored": 355,
                "num_values_kept": 144,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 355
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.8954762108623981,
            "num_unique_values": 157,
            "solution": "Drop(i, Take(j, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 29.75,
                "explored_percent_lambda": 46.75,
                "explored_percent_none": 23.5,
                "kept_percent_concrete": 43.15068493150685,
                "kept_percent_lambda": 56.84931506849315,
                "num_examples": 3,
                "num_explored_concrete": 119,
                "num_explored_lambda": 187,
                "num_explored_none": 94,
                "num_inputs": 3,
                "num_kept_concrete": 63,
                "num_kept_lambda": 83,
                "num_values_explored": 400,
                "num_values_kept": 146,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 400
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.606323095038533,
            "num_unique_values": 460,
            "solution": "Reverse(Drop(IntDivide(k, -1), Sort(Take(Head(x), x))))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 52.840466926070036,
                "explored_percent_lambda": 35.175097276264594,
                "explored_percent_none": 11.98443579766537,
                "kept_percent_concrete": 61.111111111111114,
                "kept_percent_lambda": 38.888888888888886,
                "num_examples": 3,
                "num_explored_concrete": 679,
                "num_explored_lambda": 452,
                "num_explored_none": 154,
                "num_inputs": 2,
                "num_kept_concrete": 275,
                "num_kept_lambda": 175,
                "num_values_explored": 1285,
                "num_values_kept": 450,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1285
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.264217460528016,
            "num_unique_values": 686,
            "solution": "Last(Scanl1(lambda u1, u2: Head(Drop(Min(k, 4), x)), Drop(2, Sort(x))))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 72.63922518159806,
                "explored_percent_lambda": 17.61501210653753,
                "explored_percent_none": 9.745762711864407,
                "kept_percent_concrete": 78.55029585798816,
                "kept_percent_lambda": 21.449704142011836,
                "num_examples": 5,
                "num_explored_concrete": 1200,
                "num_explored_lambda": 291,
                "num_explored_none": 161,
                "num_inputs": 2,
                "num_kept_concrete": 531,
                "num_kept_lambda": 145,
                "num_values_explored": 1652,
                "num_values_kept": 676,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1652
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 252.88754153624177,
            "num_unique_values": 1122,
            "solution": "IntDivide(Last(Scanl1(lambda u1, u2: (lambda v1: Add(v1, Last(x)))(u2), Reverse(x))), 2)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 72.57313829787235,
                "explored_percent_lambda": 20.91090425531915,
                "explored_percent_none": 6.51595744680851,
                "kept_percent_concrete": 78.52650494159928,
                "kept_percent_lambda": 21.47349505840072,
                "num_examples": 5,
                "num_explored_concrete": 2183,
                "num_explored_lambda": 629,
                "num_explored_none": 196,
                "num_inputs": 1,
                "num_kept_concrete": 874,
                "num_kept_lambda": 239,
                "num_values_explored": 3008,
                "num_values_kept": 1113,
                "temperature": 1.0,
                "total_num_restarts": 42,
                "total_num_values_explored": 129377
            },
            "success": true,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.037108017131686,
            "num_unique_values": 341,
            "solution": "Max(Minimum(Take(-1, x)), Minimum(Drop(1, x)))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 31.901041666666668,
                "explored_percent_lambda": 46.744791666666664,
                "explored_percent_none": 21.354166666666668,
                "kept_percent_concrete": 48.493975903614455,
                "kept_percent_lambda": 51.506024096385545,
                "num_examples": 5,
                "num_explored_concrete": 245,
                "num_explored_lambda": 359,
                "num_explored_none": 164,
                "num_inputs": 1,
                "num_kept_concrete": 161,
                "num_kept_lambda": 171,
                "num_values_explored": 768,
                "num_values_kept": 332,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 768
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.5590182431042194,
            "num_unique_values": 284,
            "solution": "Subtract(Maximum(x), Minimum(x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 31.758957654723126,
                "explored_percent_lambda": 49.5114006514658,
                "explored_percent_none": 18.729641693811075,
                "kept_percent_concrete": 54.54545454545455,
                "kept_percent_lambda": 45.45454545454545,
                "num_examples": 5,
                "num_explored_concrete": 195,
                "num_explored_lambda": 304,
                "num_explored_none": 115,
                "num_inputs": 1,
                "num_kept_concrete": 150,
                "num_kept_lambda": 125,
                "num_values_explored": 614,
                "num_values_kept": 275,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 614
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.6604651324451,
            "num_unique_values": 1055,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.63944530046226,
                "explored_percent_lambda": 17.28813559322034,
                "explored_percent_none": 17.07241910631741,
                "kept_percent_concrete": 76.55502392344498,
                "kept_percent_lambda": 23.444976076555022,
                "num_examples": 5,
                "num_explored_concrete": 2130,
                "num_explored_lambda": 561,
                "num_explored_none": 554,
                "num_inputs": 2,
                "num_kept_concrete": 800,
                "num_kept_lambda": 245,
                "num_values_explored": 3245,
                "num_values_kept": 1045,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 315383
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.5149854067713,
            "num_unique_values": 944,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.83464566929133,
                "explored_percent_lambda": 16.881889763779526,
                "explored_percent_none": 16.283464566929133,
                "kept_percent_concrete": 75.80299785867237,
                "kept_percent_lambda": 24.197002141327623,
                "num_examples": 5,
                "num_explored_concrete": 2122,
                "num_explored_lambda": 536,
                "num_explored_none": 517,
                "num_inputs": 2,
                "num_kept_concrete": 708,
                "num_kept_lambda": 226,
                "num_values_explored": 3175,
                "num_values_kept": 934,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 320945
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.6454827338457108,
            "num_unique_values": 252,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), x, Map(lambda u1: (lambda v1: Square(v1))(u1), x))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 18.89055472263868,
                "explored_percent_lambda": 57.42128935532234,
                "explored_percent_none": 23.68815592203898,
                "kept_percent_concrete": 37.86008230452675,
                "kept_percent_lambda": 62.13991769547325,
                "num_examples": 3,
                "num_explored_concrete": 126,
                "num_explored_lambda": 383,
                "num_explored_none": 158,
                "num_inputs": 1,
                "num_kept_concrete": 92,
                "num_kept_lambda": 151,
                "num_values_explored": 667,
                "num_values_kept": 243,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 667
            },
            "success": true,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map(lambda u1: Multiply(u1, Square(u1)), x)'\n)",
            "task_solution": "Map(lambda u1: Multiply(u1, Square(u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 296.3557592574507,
            "num_unique_values": 221,
            "solution": "Map(lambda u1: (lambda v1: Max(v1, (lambda v1: Multiply(-1, v1))(v1)))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 23.80106571936057,
                "explored_percent_lambda": 53.99644760213144,
                "explored_percent_none": 22.20248667850799,
                "kept_percent_concrete": 39.15094339622642,
                "kept_percent_lambda": 60.84905660377358,
                "num_examples": 3,
                "num_explored_concrete": 134,
                "num_explored_lambda": 304,
                "num_explored_none": 125,
                "num_inputs": 1,
                "num_kept_concrete": 83,
                "num_kept_lambda": 129,
                "num_values_explored": 563,
                "num_values_kept": 212,
                "temperature": 1.0,
                "total_num_restarts": 50,
                "total_num_values_explored": 152537
            },
            "success": true,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map(lambda u1: Max(u1, Subtract(0, u1)), x)'\n)",
            "task_solution": "Map(lambda u1: Max(u1, Subtract(0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.104294620454311,
            "num_unique_values": 803,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Subtract((lambda v1: Square(v1))(v2), v1))(u2, u1), x, x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 58.97539330375151,
                "explored_percent_lambda": 32.15006050826946,
                "explored_percent_none": 8.874546187979023,
                "kept_percent_concrete": 48.48866498740554,
                "kept_percent_lambda": 51.51133501259446,
                "num_examples": 3,
                "num_explored_concrete": 1462,
                "num_explored_lambda": 797,
                "num_explored_none": 220,
                "num_inputs": 1,
                "num_kept_concrete": 385,
                "num_kept_lambda": 409,
                "num_values_explored": 2479,
                "num_values_kept": 794,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 2479
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map(lambda u1: Subtract(Square(u1), u1), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(Square(u1), u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 388.0016131773591,
            "num_unique_values": 502,
            "solution": "Map(lambda u1: (lambda v1: IntDivide((lambda v1: Add(v1, (lambda v1: Square(v1))(v1)))(v1), 2))(u1), x)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 53.350515463917525,
                "explored_percent_lambda": 39.261168384879724,
                "explored_percent_none": 7.3883161512027495,
                "kept_percent_concrete": 45.84178498985801,
                "kept_percent_lambda": 54.15821501014199,
                "num_examples": 3,
                "num_explored_concrete": 621,
                "num_explored_lambda": 457,
                "num_explored_none": 86,
                "num_inputs": 1,
                "num_kept_concrete": 226,
                "num_kept_lambda": 267,
                "num_values_explored": 1164,
                "num_values_kept": 493,
                "temperature": 1.0,
                "total_num_restarts": 65,
                "total_num_values_explored": 190270
            },
            "success": true,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map(lambda u1: IntDivide(Add(Square(u1), u1), 2), x)'\n)",
            "task_solution": "Map(lambda u1: IntDivide(Add(Square(u1), u1), 2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 20.892109202221036,
            "num_unique_values": 497,
            "solution": "Map(lambda u1: (lambda v1: Add(b, (lambda v1: Multiply(a, v1))(v1)))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 60.230917254650414,
                "explored_percent_lambda": 23.15586914688903,
                "explored_percent_none": 16.61321359846055,
                "kept_percent_concrete": 66.04938271604938,
                "kept_percent_lambda": 33.95061728395062,
                "num_examples": 3,
                "num_explored_concrete": 939,
                "num_explored_lambda": 361,
                "num_explored_none": 259,
                "num_inputs": 3,
                "num_kept_concrete": 321,
                "num_kept_lambda": 165,
                "num_values_explored": 1559,
                "num_values_kept": 486,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 11740
            },
            "success": true,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map(lambda u1: Add(Multiply(a, u1), b), x)'\n)",
            "task_solution": "Map(lambda u1: Add(Multiply(a, u1), b), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 243.7876365687698,
            "num_unique_values": 502,
            "solution": "Map(lambda u1: (lambda v1: Subtract((lambda v1: Multiply(3, v1))(v1), 4))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 54.02906208718626,
                "explored_percent_lambda": 33.48745046235139,
                "explored_percent_none": 12.483487450462352,
                "kept_percent_concrete": 52.53549695740365,
                "kept_percent_lambda": 47.46450304259635,
                "num_examples": 3,
                "num_explored_concrete": 818,
                "num_explored_lambda": 507,
                "num_explored_none": 189,
                "num_inputs": 1,
                "num_kept_concrete": 259,
                "num_kept_lambda": 234,
                "num_values_explored": 1514,
                "num_values_kept": 493,
                "temperature": 1.0,
                "total_num_restarts": 41,
                "total_num_values_explored": 124876
            },
            "success": true,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map(lambda u1: Subtract(Multiply(u1, 3), 4), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(Multiply(u1, 3), 4), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 7.171170795336366,
            "num_unique_values": 222,
            "solution": "Map(lambda u1: (lambda v1: Multiply(v1, (lambda v1: Add(2, v1))(v1)))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 23.2183908045977,
                "explored_percent_lambda": 59.54022988505747,
                "explored_percent_none": 17.24137931034483,
                "kept_percent_concrete": 37.08920187793427,
                "kept_percent_lambda": 62.91079812206573,
                "num_examples": 3,
                "num_explored_concrete": 101,
                "num_explored_lambda": 259,
                "num_explored_none": 75,
                "num_inputs": 1,
                "num_kept_concrete": 79,
                "num_kept_lambda": 134,
                "num_values_explored": 435,
                "num_values_kept": 213,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3361
            },
            "success": true,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map(lambda u1: Multiply(u1, Add(u1, 2)), x)'\n)",
            "task_solution": "Map(lambda u1: Multiply(u1, Add(u1, 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.304663760587573,
            "num_unique_values": 225,
            "solution": "Map(lambda u1: (lambda v1: Max(a, (lambda v1: Min(b, v1))(v1)))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 26.95924764890282,
                "explored_percent_lambda": 46.23824451410658,
                "explored_percent_none": 26.802507836990596,
                "kept_percent_concrete": 46.26168224299065,
                "kept_percent_lambda": 53.73831775700935,
                "num_examples": 3,
                "num_explored_concrete": 172,
                "num_explored_lambda": 295,
                "num_explored_none": 171,
                "num_inputs": 3,
                "num_kept_concrete": 99,
                "num_kept_lambda": 115,
                "num_values_explored": 638,
                "num_values_kept": 214,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 638
            },
            "success": true,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map(lambda u1: Max(Min(u1, b), a), x)'\n)",
            "task_solution": "Map(lambda u1: Max(Min(u1, b), a), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.1481105405837,
            "num_unique_values": 858,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.90147938306579,
                "explored_percent_lambda": 23.449795404469626,
                "explored_percent_none": 7.648725212464589,
                "kept_percent_concrete": 60.30624263839812,
                "kept_percent_lambda": 39.69375736160188,
                "num_examples": 3,
                "num_explored_concrete": 2189,
                "num_explored_lambda": 745,
                "num_explored_none": 243,
                "num_inputs": 1,
                "num_kept_concrete": 512,
                "num_kept_lambda": 337,
                "num_values_explored": 3177,
                "num_values_kept": 849,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 319330
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map(lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1)), x)'\n)",
            "task_solution": "Map(lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.9316035266965628,
            "num_unique_values": 479,
            "solution": "Sort(Reverse(Map(lambda u1: (lambda v1: Square(v1))(u1), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 45.91988130563798,
                "explored_percent_lambda": 40.0593471810089,
                "explored_percent_none": 14.020771513353116,
                "kept_percent_concrete": 43.829787234042556,
                "kept_percent_lambda": 56.170212765957444,
                "num_examples": 3,
                "num_explored_concrete": 619,
                "num_explored_lambda": 540,
                "num_explored_none": 189,
                "num_inputs": 1,
                "num_kept_concrete": 206,
                "num_kept_lambda": 264,
                "num_values_explored": 1348,
                "num_values_kept": 470,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1348
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map(lambda u1: Square(u1), x))'\n)",
            "task_solution": "Sort(Map(lambda u1: Square(u1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 56.98393723927438,
            "num_unique_values": 535,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Subtract(v1, Minimum(x)))(u1), x, Reverse(Sort(x)))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 52.51677852348993,
                "explored_percent_lambda": 39.09395973154363,
                "explored_percent_none": 8.389261744966444,
                "kept_percent_concrete": 47.71863117870723,
                "kept_percent_lambda": 52.28136882129277,
                "num_examples": 3,
                "num_explored_concrete": 626,
                "num_explored_lambda": 466,
                "num_explored_none": 100,
                "num_inputs": 1,
                "num_kept_concrete": 251,
                "num_kept_lambda": 275,
                "num_values_explored": 1192,
                "num_values_kept": 526,
                "temperature": 1.0,
                "total_num_restarts": 10,
                "total_num_values_explored": 26517
            },
            "success": true,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map(lambda u1: Subtract(u1, Minimum(x)), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(u1, Minimum(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 33.01481265202165,
            "num_unique_values": 497,
            "solution": "Map(lambda u1: (lambda v1: Subtract(v1, Access(i, x)))(u1), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 61.853035143769965,
                "explored_percent_lambda": 23.003194888178914,
                "explored_percent_none": 15.143769968051119,
                "kept_percent_concrete": 66.11909650924025,
                "kept_percent_lambda": 33.880903490759756,
                "num_examples": 3,
                "num_explored_concrete": 968,
                "num_explored_lambda": 360,
                "num_explored_none": 237,
                "num_inputs": 2,
                "num_kept_concrete": 322,
                "num_kept_lambda": 165,
                "num_values_explored": 1565,
                "num_values_kept": 487,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 17890
            },
            "success": true,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map(lambda u1: Subtract(u1, Access(i, x)), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(u1, Access(i, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.2774246130139,
            "num_unique_values": 860,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.38158691701999,
                "explored_percent_lambda": 20.442156268927924,
                "explored_percent_none": 9.17625681405209,
                "kept_percent_concrete": 63.411764705882355,
                "kept_percent_lambda": 36.588235294117645,
                "num_examples": 3,
                "num_explored_concrete": 2324,
                "num_explored_lambda": 675,
                "num_explored_none": 303,
                "num_inputs": 2,
                "num_kept_concrete": 539,
                "num_kept_lambda": 311,
                "num_values_explored": 3302,
                "num_values_kept": 850,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 336204
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map(lambda u1: Add(u1, Subtract(t, Head(x))), x)'\n)",
            "task_solution": "Map(lambda u1: Add(u1, Subtract(t, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 25.386684050783515,
            "num_unique_values": 230,
            "solution": "Map(lambda u1: (lambda v1: Access(v1, x))(u1), i)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 22.93577981651376,
                "explored_percent_lambda": 58.71559633027523,
                "explored_percent_none": 18.34862385321101,
                "kept_percent_concrete": 36.81818181818182,
                "kept_percent_lambda": 63.18181818181818,
                "num_examples": 3,
                "num_explored_concrete": 125,
                "num_explored_lambda": 320,
                "num_explored_none": 100,
                "num_inputs": 2,
                "num_kept_concrete": 81,
                "num_kept_lambda": 139,
                "num_values_explored": 545,
                "num_values_kept": 220,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 13259
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map(lambda u1: Access(u1, x), i)'\n)",
            "task_solution": "Map(lambda u1: Access(u1, x), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 53.33384355157614,
            "num_unique_values": 1154,
            "solution": "Max(3, Maximum(ZipWith(lambda u1, u2: (lambda v1: Access(v1, x))(u2), x, Drop(2, i))))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 79.20238538948938,
                "explored_percent_lambda": 16.47409616101379,
                "explored_percent_none": 4.323518449496832,
                "kept_percent_concrete": 79.63286713286713,
                "kept_percent_lambda": 20.367132867132867,
                "num_examples": 5,
                "num_explored_concrete": 2125,
                "num_explored_lambda": 442,
                "num_explored_none": 116,
                "num_inputs": 2,
                "num_kept_concrete": 911,
                "num_kept_lambda": 233,
                "num_values_explored": 2683,
                "num_values_kept": 1144,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 28928
            },
            "success": true,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map(lambda u1: Access(u1, x), i))'\n)",
            "task_solution": "Maximum(Map(lambda u1: Access(u1, x), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.2749483976513147,
            "num_unique_values": 254,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: If((lambda v1: IsEven(v1))(v1), v1, 0))(u1), x, x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 27.235772357723576,
                "explored_percent_lambda": 55.6910569105691,
                "explored_percent_none": 17.073170731707318,
                "kept_percent_concrete": 38.775510204081634,
                "kept_percent_lambda": 61.224489795918366,
                "num_examples": 3,
                "num_explored_concrete": 134,
                "num_explored_lambda": 274,
                "num_explored_none": 84,
                "num_inputs": 1,
                "num_kept_concrete": 95,
                "num_kept_lambda": 150,
                "num_values_explored": 492,
                "num_values_kept": 245,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 492
            },
            "success": true,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map(lambda u1: If(IsOdd(u1), 0, u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(IsOdd(u1), 0, u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 201.84583953022957,
            "num_unique_values": 500,
            "solution": "Map(lambda u1: (lambda v1: If((lambda v1: Equal(f, v1))(v1), r, v1))(u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 61.17445838084379,
                "explored_percent_lambda": 22.80501710376283,
                "explored_percent_none": 16.020524515393387,
                "kept_percent_concrete": 61.758691206543965,
                "kept_percent_lambda": 38.241308793456035,
                "num_examples": 3,
                "num_explored_concrete": 1073,
                "num_explored_lambda": 400,
                "num_explored_none": 281,
                "num_inputs": 3,
                "num_kept_concrete": 302,
                "num_kept_lambda": 187,
                "num_values_explored": 1754,
                "num_values_kept": 489,
                "temperature": 1.0,
                "total_num_restarts": 34,
                "total_num_values_explored": 110864
            },
            "success": true,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map(lambda u1: If(Equal(u1, f), r, u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(Equal(u1, f), r, u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 7.377200393006206,
            "num_unique_values": 224,
            "solution": "Map(lambda u1: (lambda v1: If((lambda v1: Greater(0, v1))(v1), y, v1))(u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 21.900161030595815,
                "explored_percent_lambda": 51.690821256038646,
                "explored_percent_none": 26.40901771336554,
                "kept_percent_concrete": 47.66355140186916,
                "kept_percent_lambda": 52.33644859813084,
                "num_examples": 3,
                "num_explored_concrete": 136,
                "num_explored_lambda": 321,
                "num_explored_none": 164,
                "num_inputs": 2,
                "num_kept_concrete": 102,
                "num_kept_lambda": 112,
                "num_values_explored": 621,
                "num_values_kept": 214,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3382
            },
            "success": true,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map(lambda u1: If(Less(u1, 0), y, u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(Less(u1, 0), y, u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 9.101226083934307,
            "num_unique_values": 529,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Add(v1, Last(x)))(u1), x, Drop(1, x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 59.27802406586447,
                "explored_percent_lambda": 29.702343255224825,
                "explored_percent_none": 11.019632678910703,
                "kept_percent_concrete": 62.69230769230769,
                "kept_percent_lambda": 37.30769230769231,
                "num_examples": 3,
                "num_explored_concrete": 936,
                "num_explored_lambda": 469,
                "num_explored_none": 174,
                "num_inputs": 1,
                "num_kept_concrete": 326,
                "num_kept_lambda": 194,
                "num_values_explored": 1579,
                "num_values_kept": 520,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4766
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map(lambda u1: Add(u1, Last(x)), x))'\n)",
            "task_solution": "Take(-1, Map(lambda u1: Add(u1, Last(x)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.4456066116690636,
            "num_unique_values": 220,
            "solution": "Map(lambda u1: Head(x), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 24.044585987261147,
                "explored_percent_lambda": 61.30573248407644,
                "explored_percent_none": 14.64968152866242,
                "kept_percent_concrete": 36.018957345971565,
                "kept_percent_lambda": 63.981042654028435,
                "num_examples": 3,
                "num_explored_concrete": 151,
                "num_explored_lambda": 385,
                "num_explored_none": 92,
                "num_inputs": 1,
                "num_kept_concrete": 76,
                "num_kept_lambda": 135,
                "num_values_explored": 628,
                "num_values_kept": 211,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 628
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map(lambda u1: Head(x), x)'\n)",
            "task_solution": "Map(lambda u1: Head(x), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.6458759494125843,
            "num_unique_values": 269,
            "solution": "Add(Count(lambda u1: (lambda v1: IsEven(v1))(u1), x), Count(lambda u1: (lambda v1: IsOdd(v1))(u1), x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 23.863636363636363,
                "explored_percent_lambda": 47.01704545454545,
                "explored_percent_none": 29.119318181818183,
                "kept_percent_concrete": 51.92307692307692,
                "kept_percent_lambda": 48.07692307692308,
                "num_examples": 5,
                "num_explored_concrete": 168,
                "num_explored_lambda": 331,
                "num_explored_none": 205,
                "num_inputs": 1,
                "num_kept_concrete": 135,
                "num_kept_lambda": 125,
                "num_values_explored": 704,
                "num_values_kept": 260,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 704
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map(lambda u1: 1, x))'\n)",
            "task_solution": "Sum(Map(lambda u1: 1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.646646497771144,
            "num_unique_values": 601,
            "solution": "Min(Last(Take(-1, x)), Maximum(Take(4, Sort(Drop(1, x)))))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 54.66321243523316,
                "explored_percent_lambda": 32.81519861830743,
                "explored_percent_none": 12.521588946459413,
                "kept_percent_concrete": 70.27027027027027,
                "kept_percent_lambda": 29.72972972972973,
                "num_examples": 5,
                "num_explored_concrete": 633,
                "num_explored_lambda": 380,
                "num_explored_none": 145,
                "num_inputs": 1,
                "num_kept_concrete": 416,
                "num_kept_lambda": 176,
                "num_values_explored": 1158,
                "num_values_kept": 592,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1158
            },
            "success": true,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map(lambda u1: 1, x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map(lambda u1: 1, x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.130106396973133,
            "num_unique_values": 224,
            "solution": "Map(lambda u1: (lambda v1: If((lambda v1: Less(y, v1))(v1), 1, 0))(u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 31.899641577060933,
                "explored_percent_lambda": 39.24731182795699,
                "explored_percent_none": 28.85304659498208,
                "kept_percent_concrete": 59.345794392523366,
                "kept_percent_lambda": 40.654205607476634,
                "num_examples": 3,
                "num_explored_concrete": 178,
                "num_explored_lambda": 219,
                "num_explored_none": 161,
                "num_inputs": 2,
                "num_kept_concrete": 127,
                "num_kept_lambda": 87,
                "num_values_explored": 558,
                "num_values_kept": 214,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 558
            },
            "success": true,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map(lambda u1: If(Greater(u1, y), 1, 0), x)'\n)",
            "task_solution": "Map(lambda u1: If(Greater(u1, y), 1, 0), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 568.8959800079465,
            "num_unique_values": 508,
            "solution": "Map(lambda u1: (lambda v1: If((lambda v1: IsOdd(v1))(v1), v1, (lambda v1: IntDivide(v1, 2))(v1)))(u1), x)",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 59.916782246879336,
                "explored_percent_lambda": 29.68099861303745,
                "explored_percent_none": 10.402219140083218,
                "kept_percent_concrete": 60.521042084168336,
                "kept_percent_lambda": 39.478957915831664,
                "num_examples": 3,
                "num_explored_concrete": 864,
                "num_explored_lambda": 428,
                "num_explored_none": 150,
                "num_inputs": 1,
                "num_kept_concrete": 302,
                "num_kept_lambda": 197,
                "num_values_explored": 1442,
                "num_values_kept": 499,
                "temperature": 1.0,
                "total_num_restarts": 95,
                "total_num_values_explored": 302210
            },
            "success": true,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map(lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.4308748971671,
            "num_unique_values": 867,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.72220601108842,
                "explored_percent_lambda": 16.924423694193173,
                "explored_percent_none": 7.353370294718412,
                "kept_percent_concrete": 66.04434072345391,
                "kept_percent_lambda": 33.95565927654609,
                "num_examples": 3,
                "num_explored_concrete": 2595,
                "num_explored_lambda": 580,
                "num_explored_none": 252,
                "num_inputs": 2,
                "num_kept_concrete": 566,
                "num_kept_lambda": 291,
                "num_values_explored": 3427,
                "num_values_kept": 857,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 338004
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map(lambda u1: If(IsOdd(u1), Multiply(u1, n), u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(IsOdd(u1), Multiply(u1, n), u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 7.386204168200493,
            "num_unique_values": 232,
            "solution": "Filter(lambda u1: (lambda v1: Less(y, v1))(u1), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 28.328173374613,
                "explored_percent_lambda": 42.87925696594427,
                "explored_percent_none": 28.792569659442723,
                "kept_percent_concrete": 56.75675675675676,
                "kept_percent_lambda": 43.24324324324324,
                "num_examples": 3,
                "num_explored_concrete": 183,
                "num_explored_lambda": 277,
                "num_explored_none": 186,
                "num_inputs": 2,
                "num_kept_concrete": 126,
                "num_kept_lambda": 96,
                "num_values_explored": 646,
                "num_values_kept": 222,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 3766
            },
            "success": true,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter(lambda u1: Greater(u1, y), x)'\n)",
            "task_solution": "Filter(lambda u1: Greater(u1, y), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.4779733009636402,
            "num_unique_values": 223,
            "solution": "Filter(lambda u1: (lambda v1: IsEven(v1))(u1), Sort(x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 26.093514328808446,
                "explored_percent_lambda": 54.14781297134238,
                "explored_percent_none": 19.75867269984917,
                "kept_percent_concrete": 40.654205607476634,
                "kept_percent_lambda": 59.345794392523366,
                "num_examples": 3,
                "num_explored_concrete": 173,
                "num_explored_lambda": 359,
                "num_explored_none": 131,
                "num_inputs": 1,
                "num_kept_concrete": 87,
                "num_kept_lambda": 127,
                "num_values_explored": 663,
                "num_values_kept": 214,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 663
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter(lambda u1: IsEven(u1), Sort(x))'\n)",
            "task_solution": "Filter(lambda u1: IsEven(u1), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.8870425634086132,
            "num_unique_values": 462,
            "solution": "Maximum(Filter(lambda u1: (lambda v1: IsOdd(v1))(u1), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 51.59386068476977,
                "explored_percent_lambda": 37.66233766233766,
                "explored_percent_none": 10.743801652892563,
                "kept_percent_concrete": 64.0176600441501,
                "kept_percent_lambda": 35.98233995584989,
                "num_examples": 5,
                "num_explored_concrete": 437,
                "num_explored_lambda": 319,
                "num_explored_none": 91,
                "num_inputs": 1,
                "num_kept_concrete": 290,
                "num_kept_lambda": 163,
                "num_values_explored": 847,
                "num_values_kept": 453,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 847
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter(lambda u1: IsOdd(u1), x))'\n)",
            "task_solution": "Maximum(Filter(lambda u1: IsOdd(u1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.4111788123846054,
            "num_unique_values": 237,
            "solution": "Filter(lambda u1: (lambda v1: IsEven((lambda v1: Min(-1, (lambda v1: Subtract(v1, 3))(v1)))(v1)))(u1), x)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 26.01769911504425,
                "explored_percent_lambda": 56.283185840707965,
                "explored_percent_none": 17.699115044247787,
                "kept_percent_concrete": 44.29824561403509,
                "kept_percent_lambda": 55.70175438596491,
                "num_examples": 3,
                "num_explored_concrete": 147,
                "num_explored_lambda": 318,
                "num_explored_none": 100,
                "num_inputs": 1,
                "num_kept_concrete": 101,
                "num_kept_lambda": 127,
                "num_values_explored": 565,
                "num_values_kept": 228,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 565
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter(lambda u1: IsOdd(Min(u1, 0)), x)'\n)",
            "task_solution": "Filter(lambda u1: IsOdd(Min(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.283221907913685,
            "num_unique_values": 490,
            "solution": "Sum(Filter(lambda u1: (lambda v1: Greater(v1, 0))(u1), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 46.182846371347786,
                "explored_percent_lambda": 41.94156456173421,
                "explored_percent_none": 11.875589066918002,
                "kept_percent_concrete": 64.65696465696466,
                "kept_percent_lambda": 35.343035343035346,
                "num_examples": 5,
                "num_explored_concrete": 490,
                "num_explored_lambda": 445,
                "num_explored_none": 126,
                "num_inputs": 1,
                "num_kept_concrete": 311,
                "num_kept_lambda": 170,
                "num_values_explored": 1061,
                "num_values_kept": 481,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1061
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter(lambda u1: Greater(u1, 0), x))'\n)",
            "task_solution": "Sum(Filter(lambda u1: Greater(u1, 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.5192810483276844,
            "num_unique_values": 467,
            "solution": "Reverse(Take(Count(lambda u1: (lambda v1: Less(v1, 0))(u1), x), Sort(x)))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 50.24630541871921,
                "explored_percent_lambda": 38.095238095238095,
                "explored_percent_none": 11.658456486042693,
                "kept_percent_concrete": 60.480349344978166,
                "kept_percent_lambda": 39.519650655021834,
                "num_examples": 3,
                "num_explored_concrete": 612,
                "num_explored_lambda": 464,
                "num_explored_none": 142,
                "num_inputs": 1,
                "num_kept_concrete": 277,
                "num_kept_lambda": 181,
                "num_values_explored": 1218,
                "num_values_kept": 458,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1218
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter(lambda u1: Less(u1, 0), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter(lambda u1: Less(u1, 0), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 10.763176927343011,
            "num_unique_values": 770,
            "solution": "Filter(lambda u1: (lambda v1: Greater(b, v1))(u1), Filter(lambda u1: (lambda v1: Greater(v1, a))(u1), x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 67.28252501924557,
                "explored_percent_lambda": 19.553502694380292,
                "explored_percent_none": 13.163972286374134,
                "kept_percent_concrete": 71.14624505928853,
                "kept_percent_lambda": 28.85375494071146,
                "num_examples": 3,
                "num_explored_concrete": 1748,
                "num_explored_lambda": 508,
                "num_explored_none": 342,
                "num_inputs": 3,
                "num_kept_concrete": 540,
                "num_kept_lambda": 219,
                "num_values_explored": 2598,
                "num_values_kept": 759,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5785
            },
            "success": true,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter(lambda u1: Less(u1, b), Filter(lambda u1: Greater(u1, a), x))'\n)",
            "task_solution": "Filter(lambda u1: Less(u1, b), Filter(lambda u1: Greater(u1, a), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.4743588585407,
            "num_unique_values": 989,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.81583147143313,
                "explored_percent_lambda": 23.140759655282476,
                "explored_percent_none": 8.043408873284392,
                "kept_percent_concrete": 63.125638406537284,
                "kept_percent_lambda": 36.874361593462716,
                "num_examples": 3,
                "num_explored_concrete": 2156,
                "num_explored_lambda": 725,
                "num_explored_none": 252,
                "num_inputs": 2,
                "num_kept_concrete": 618,
                "num_kept_lambda": 361,
                "num_values_explored": 3133,
                "num_values_kept": 979,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 321795
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter(lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n)), x)'\n)",
            "task_solution": "Filter(lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.8509472161531,
            "num_unique_values": 1012,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.57187017001546,
                "explored_percent_lambda": 22.380216383307573,
                "explored_percent_none": 7.04791344667697,
                "kept_percent_concrete": 65.76846307385229,
                "kept_percent_lambda": 34.231536926147704,
                "num_examples": 3,
                "num_explored_concrete": 2283,
                "num_explored_lambda": 724,
                "num_explored_none": 228,
                "num_inputs": 2,
                "num_kept_concrete": 659,
                "num_kept_lambda": 343,
                "num_values_explored": 3235,
                "num_values_kept": 1002,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 310311
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter(lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1)), x)'\n)",
            "task_solution": "Filter(lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 185.02344018220901,
            "num_unique_values": 775,
            "solution": "Filter(lambda u1: (lambda v1: Equal(v1, (lambda v1: Access(v1, x))(v1)))(u1), Sort(x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 67.78492647058823,
                "explored_percent_lambda": 27.941176470588236,
                "explored_percent_none": 4.273897058823529,
                "kept_percent_concrete": 58.224543080939945,
                "kept_percent_lambda": 41.775456919060055,
                "num_examples": 3,
                "num_explored_concrete": 1475,
                "num_explored_lambda": 608,
                "num_explored_none": 93,
                "num_inputs": 1,
                "num_kept_concrete": 446,
                "num_kept_lambda": 320,
                "num_values_explored": 2176,
                "num_values_kept": 766,
                "temperature": 1.0,
                "total_num_restarts": 31,
                "total_num_values_explored": 95318
            },
            "success": true,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter(lambda u1: Equal(u1, Access(u1, x)), x))'\n)",
            "task_solution": "Sort(Filter(lambda u1: Equal(u1, Access(u1, x)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.7921369727701,
            "num_unique_values": 990,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.60547504025764,
                "explored_percent_lambda": 21.80354267310789,
                "explored_percent_none": 13.59098228663446,
                "kept_percent_concrete": 67.21144024514811,
                "kept_percent_lambda": 32.78855975485189,
                "num_examples": 3,
                "num_explored_concrete": 2006,
                "num_explored_lambda": 677,
                "num_explored_none": 422,
                "num_inputs": 3,
                "num_kept_concrete": 658,
                "num_kept_lambda": 321,
                "num_values_explored": 3105,
                "num_values_kept": 979,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 305781
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter(lambda u1: Equal(Access(u1, x), y), i)'\n)",
            "task_solution": "Filter(lambda u1: Equal(Access(u1, x), y), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 221.93724789470434,
            "num_unique_values": 800,
            "solution": "IntDivide(Sum(Map(lambda u1: 3, Filter(lambda u1: (lambda v1: Equal(n, v1))(u1), x))), 3)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 71.77206851119895,
                "explored_percent_lambda": 10.968379446640316,
                "explored_percent_none": 17.25955204216074,
                "kept_percent_concrete": 82.15189873417721,
                "kept_percent_lambda": 17.848101265822784,
                "num_examples": 5,
                "num_explored_concrete": 2179,
                "num_explored_lambda": 333,
                "num_explored_none": 524,
                "num_inputs": 2,
                "num_kept_concrete": 649,
                "num_kept_lambda": 141,
                "num_values_explored": 3036,
                "num_values_kept": 790,
                "temperature": 1.0,
                "total_num_restarts": 37,
                "total_num_values_explored": 132425
            },
            "success": true,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count(lambda u1: Equal(u1, n), x)'\n)",
            "task_solution": "Count(lambda u1: Equal(u1, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.461888061836362,
            "num_unique_values": 524,
            "solution": "Count(lambda u1: (lambda v1: Less(v1, q))(u1), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 54.53005927180356,
                "explored_percent_lambda": 22.35393734123624,
                "explored_percent_none": 23.1160033869602,
                "kept_percent_concrete": 78.59922178988327,
                "kept_percent_lambda": 21.40077821011673,
                "num_examples": 5,
                "num_explored_concrete": 644,
                "num_explored_lambda": 264,
                "num_explored_none": 273,
                "num_inputs": 2,
                "num_kept_concrete": 404,
                "num_kept_lambda": 110,
                "num_values_explored": 1181,
                "num_values_kept": 514,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1181
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count(lambda u1: Less(u1, q), x)'\n)",
            "task_solution": "Count(lambda u1: Less(u1, q), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 14.652376594021916,
            "num_unique_values": 518,
            "solution": "Count(lambda u1: (lambda v1: Greater(Head(x), v1))(u1), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 49.60063897763578,
                "explored_percent_lambda": 31.94888178913738,
                "explored_percent_none": 18.450479233226837,
                "kept_percent_concrete": 69.9410609037328,
                "kept_percent_lambda": 30.058939096267192,
                "num_examples": 5,
                "num_explored_concrete": 621,
                "num_explored_lambda": 400,
                "num_explored_none": 231,
                "num_inputs": 1,
                "num_kept_concrete": 356,
                "num_kept_lambda": 153,
                "num_values_explored": 1252,
                "num_values_kept": 509,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 7576
            },
            "success": true,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count(lambda u1: Less(u1, Head(x)), x)'\n)",
            "task_solution": "Count(lambda u1: Less(u1, Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 19.197280064225197,
            "num_unique_values": 247,
            "solution": "Count(lambda u1: (lambda v1: Greater(0, v1))(u1), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 31.666666666666668,
                "explored_percent_lambda": 46.875,
                "explored_percent_none": 21.458333333333332,
                "kept_percent_concrete": 50.84033613445378,
                "kept_percent_lambda": 49.15966386554622,
                "num_examples": 5,
                "num_explored_concrete": 152,
                "num_explored_lambda": 225,
                "num_explored_none": 103,
                "num_inputs": 1,
                "num_kept_concrete": 121,
                "num_kept_lambda": 117,
                "num_values_explored": 480,
                "num_values_kept": 238,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 10230
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count(lambda u1: Less(u1, 0), x)'\n)",
            "task_solution": "Count(lambda u1: Less(u1, 0), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 225.2309514656663,
            "num_unique_values": 517,
            "solution": "Count(lambda u1: (lambda v1: Equal(v1, Last(x)))(u1), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 48.9010989010989,
                "explored_percent_lambda": 35.62271062271062,
                "explored_percent_none": 15.476190476190476,
                "kept_percent_concrete": 69.48818897637796,
                "kept_percent_lambda": 30.511811023622048,
                "num_examples": 5,
                "num_explored_concrete": 534,
                "num_explored_lambda": 389,
                "num_explored_none": 169,
                "num_inputs": 1,
                "num_kept_concrete": 353,
                "num_kept_lambda": 155,
                "num_values_explored": 1092,
                "num_values_kept": 508,
                "temperature": 1.0,
                "total_num_restarts": 38,
                "total_num_values_explored": 117758
            },
            "success": true,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count(lambda u1: Equal(u1, Last(x)), x)'\n)",
            "task_solution": "Count(lambda u1: Equal(u1, Last(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.6509815324098,
            "num_unique_values": 1148,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 82.83759666864961,
                "explored_percent_lambda": 9.309934562760262,
                "explored_percent_none": 7.852468768590125,
                "kept_percent_concrete": 85.23725834797891,
                "kept_percent_lambda": 14.76274165202109,
                "num_examples": 5,
                "num_explored_concrete": 2785,
                "num_explored_lambda": 313,
                "num_explored_none": 264,
                "num_inputs": 2,
                "num_kept_concrete": 970,
                "num_kept_lambda": 168,
                "num_values_explored": 3362,
                "num_values_kept": 1138,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 350703
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count(lambda u1: Equal(u1, Access(i, x)), x)'\n)",
            "task_solution": "Count(lambda u1: Equal(u1, Access(i, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 49.7832902148366,
            "num_unique_values": 241,
            "solution": "Count(lambda u1: (lambda v1: IsEven((lambda v1: Min(2, v1))(v1)))(u1), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 25.23076923076923,
                "explored_percent_lambda": 54.30769230769231,
                "explored_percent_none": 20.46153846153846,
                "kept_percent_concrete": 47.8448275862069,
                "kept_percent_lambda": 52.1551724137931,
                "num_examples": 5,
                "num_explored_concrete": 164,
                "num_explored_lambda": 353,
                "num_explored_none": 133,
                "num_inputs": 1,
                "num_kept_concrete": 111,
                "num_kept_lambda": 121,
                "num_values_explored": 650,
                "num_values_kept": 232,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 26497
            },
            "success": true,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count(lambda u1: IsEven(Min(u1, 0)), x)'\n)",
            "task_solution": "Count(lambda u1: IsEven(Min(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.8884147126228,
            "num_unique_values": 1276,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.81145801758109,
                "explored_percent_lambda": 15.51985450136405,
                "explored_percent_none": 6.6686874810548655,
                "kept_percent_concrete": 77.56714060031595,
                "kept_percent_lambda": 22.432859399684045,
                "num_examples": 5,
                "num_explored_concrete": 2567,
                "num_explored_lambda": 512,
                "num_explored_none": 220,
                "num_inputs": 2,
                "num_kept_concrete": 982,
                "num_kept_lambda": 284,
                "num_values_explored": 3299,
                "num_values_kept": 1266,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 324420
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count(lambda u1: Equal(u1, 0), x), Count(lambda u1: Equal(u1, 0), y))'\n)",
            "task_solution": "Add(Count(lambda u1: Equal(u1, 0), x), Count(lambda u1: Equal(u1, 0), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.447755392640829,
            "num_unique_values": 703,
            "solution": "Take(Count(lambda u1: (lambda v1: Less(0, v1))(u1), r), Sort(c))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 60.46966731898239,
                "explored_percent_lambda": 35.15981735159817,
                "explored_percent_none": 4.370515329419439,
                "kept_percent_concrete": 56.56565656565657,
                "kept_percent_lambda": 43.43434343434343,
                "num_examples": 3,
                "num_explored_concrete": 927,
                "num_explored_lambda": 539,
                "num_explored_none": 67,
                "num_inputs": 2,
                "num_kept_concrete": 392,
                "num_kept_lambda": 301,
                "num_values_explored": 1533,
                "num_values_kept": 693,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1533
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count(lambda u1: Greater(u1, 0), r), Sort(c))'\n)",
            "task_solution": "Take(Count(lambda u1: Greater(u1, 0), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.994924383238,
            "num_unique_values": 1177,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.0,
                "explored_percent_lambda": 18.573264781491,
                "explored_percent_none": 6.426735218508997,
                "kept_percent_concrete": 76.26392459297344,
                "kept_percent_lambda": 23.736075407026565,
                "num_examples": 5,
                "num_explored_concrete": 2334,
                "num_explored_lambda": 578,
                "num_explored_none": 200,
                "num_inputs": 2,
                "num_kept_concrete": 890,
                "num_kept_lambda": 277,
                "num_values_explored": 3112,
                "num_values_kept": 1167,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 312997
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith(lambda u1, u2: Add(Multiply(u1, 3), u2), w, t))'\n)",
            "task_solution": "Maximum(ZipWith(lambda u1, u2: Add(Multiply(u1, 3), u2), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.953005336225,
            "num_unique_values": 1138,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 81.08944599195296,
                "explored_percent_lambda": 15.289384091612504,
                "explored_percent_none": 3.6211699164345403,
                "kept_percent_concrete": 78.54609929078015,
                "kept_percent_lambda": 21.45390070921986,
                "num_examples": 5,
                "num_explored_concrete": 2620,
                "num_explored_lambda": 494,
                "num_explored_none": 117,
                "num_inputs": 2,
                "num_kept_concrete": 886,
                "num_kept_lambda": 242,
                "num_values_explored": 3231,
                "num_values_kept": 1128,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 320127
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.2690299525856972,
            "num_unique_values": 252,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Min(v1, v2))(u1, u2), a, Reverse(a))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 29.591836734693878,
                "explored_percent_lambda": 57.95918367346939,
                "explored_percent_none": 12.448979591836734,
                "kept_percent_concrete": 40.74074074074074,
                "kept_percent_lambda": 59.25925925925926,
                "num_examples": 3,
                "num_explored_concrete": 145,
                "num_explored_lambda": 284,
                "num_explored_none": 61,
                "num_inputs": 1,
                "num_kept_concrete": 99,
                "num_kept_lambda": 144,
                "num_values_explored": 490,
                "num_values_kept": 243,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 490
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith(lambda u1, u2: Min(u1, u2), a, Reverse(a))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Min(u1, u2), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 74.51148678548634,
            "num_unique_values": 567,
            "solution": "Subtract(Minimum(ZipWith(lambda u1, u2: (lambda v1, v2: Add(v1, v2))(u2, u1), t, p)), 2)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 56.19565217391305,
                "explored_percent_lambda": 33.15217391304348,
                "explored_percent_none": 10.652173913043478,
                "kept_percent_concrete": 69.83842010771993,
                "kept_percent_lambda": 30.161579892280074,
                "num_examples": 5,
                "num_explored_concrete": 517,
                "num_explored_lambda": 305,
                "num_explored_none": 98,
                "num_inputs": 2,
                "num_kept_concrete": 389,
                "num_kept_lambda": 168,
                "num_values_explored": 920,
                "num_values_kept": 557,
                "temperature": 1.0,
                "total_num_restarts": 13,
                "total_num_values_explored": 39262
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith(lambda u1, u2: Add(u1, u2), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith(lambda u1, u2: Add(u1, u2), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.5337300505489,
            "num_unique_values": 1012,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.21113023522662,
                "explored_percent_lambda": 18.61732644865175,
                "explored_percent_none": 7.171543316121629,
                "kept_percent_concrete": 74.67597208374876,
                "kept_percent_lambda": 25.324027916251246,
                "num_examples": 5,
                "num_explored_concrete": 2587,
                "num_explored_lambda": 649,
                "num_explored_none": 250,
                "num_inputs": 1,
                "num_kept_concrete": 749,
                "num_kept_lambda": 254,
                "num_values_explored": 3486,
                "num_values_kept": 1003,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 345941
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith(lambda u1, u2: Max(Subtract(u1, u2), 0), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Max(Subtract(u1, u2), 0), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 261.43174626491964,
            "num_unique_values": 493,
            "solution": "Sum(ZipWith(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u2, u1), x, y))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 42.50493096646943,
                "explored_percent_lambda": 38.06706114398422,
                "explored_percent_none": 19.42800788954635,
                "kept_percent_concrete": 65.0103519668737,
                "kept_percent_lambda": 34.989648033126294,
                "num_examples": 5,
                "num_explored_concrete": 431,
                "num_explored_lambda": 386,
                "num_explored_none": 197,
                "num_inputs": 2,
                "num_kept_concrete": 314,
                "num_kept_lambda": 169,
                "num_values_explored": 1014,
                "num_values_kept": 483,
                "temperature": 1.0,
                "total_num_restarts": 44,
                "total_num_values_explored": 137361
            },
            "success": true,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, y))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.8567843921483,
            "num_unique_values": 937,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.73616473616474,
                "explored_percent_lambda": 28.474903474903474,
                "explored_percent_none": 6.788931788931789,
                "kept_percent_concrete": 45.52319309600863,
                "kept_percent_lambda": 54.47680690399137,
                "num_examples": 3,
                "num_explored_concrete": 2012,
                "num_explored_lambda": 885,
                "num_explored_none": 211,
                "num_inputs": 2,
                "num_kept_concrete": 422,
                "num_kept_lambda": 505,
                "num_values_explored": 3108,
                "num_values_kept": 927,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 309808
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith(lambda u1, u2: IntDivide(Add(u1, u2), 2), x, y)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: IntDivide(Add(u1, u2), 2), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.6995188202709,
            "num_unique_values": 868,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.15773353751914,
                "explored_percent_lambda": 20.520673813169985,
                "explored_percent_none": 10.321592649310873,
                "kept_percent_concrete": 56.47607934655776,
                "kept_percent_lambda": 43.52392065344224,
                "num_examples": 3,
                "num_explored_concrete": 2258,
                "num_explored_lambda": 670,
                "num_explored_none": 337,
                "num_inputs": 3,
                "num_kept_concrete": 484,
                "num_kept_lambda": 373,
                "num_values_explored": 3265,
                "num_values_kept": 857,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 331799
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith(lambda u1, u2: Add(u1, u2), a, ZipWith(lambda u1, u2: Add(u1, u2), b, c))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Add(u1, u2), a, ZipWith(lambda u1, u2: Add(u1, u2), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.605617443099618,
            "num_unique_values": 484,
            "solution": "Sort(ZipWith(lambda u1, u2: (lambda v1, v2: IntDivide(v1, v2))(u1, u2), m, n))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 53.956292388847025,
                "explored_percent_lambda": 28.862094951017333,
                "explored_percent_none": 17.181612660135645,
                "kept_percent_concrete": 53.164556962025316,
                "kept_percent_lambda": 46.835443037974684,
                "num_examples": 3,
                "num_explored_concrete": 716,
                "num_explored_lambda": 383,
                "num_explored_none": 228,
                "num_inputs": 2,
                "num_kept_concrete": 252,
                "num_kept_lambda": 222,
                "num_values_explored": 1327,
                "num_values_kept": 474,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1327
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith(lambda u1, u2: IntDivide(u1, u2), m, n))'\n)",
            "task_solution": "Sort(ZipWith(lambda u1, u2: IntDivide(u1, u2), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 25.68711726926267,
            "num_unique_values": 250,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Subtract(v1, v2))(u2, u1), x, Drop(1, x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 24.210526315789473,
                "explored_percent_lambda": 52.63157894736842,
                "explored_percent_none": 23.157894736842106,
                "kept_percent_concrete": 46.058091286307054,
                "kept_percent_lambda": 53.941908713692946,
                "num_examples": 3,
                "num_explored_concrete": 161,
                "num_explored_lambda": 350,
                "num_explored_none": 154,
                "num_inputs": 1,
                "num_kept_concrete": 111,
                "num_kept_lambda": 130,
                "num_values_explored": 665,
                "num_values_kept": 241,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 13045
            },
            "success": true,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith(lambda u1, u2: Subtract(u2, u1), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Subtract(u2, u1), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 556.9864938762039,
            "num_unique_values": 491,
            "solution": "Sum(ZipWith(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), x, m))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 46.079380445304935,
                "explored_percent_lambda": 36.689254598257506,
                "explored_percent_none": 17.23136495643756,
                "kept_percent_concrete": 66.73596673596674,
                "kept_percent_lambda": 33.264033264033266,
                "num_examples": 5,
                "num_explored_concrete": 476,
                "num_explored_lambda": 379,
                "num_explored_none": 178,
                "num_inputs": 2,
                "num_kept_concrete": 321,
                "num_kept_lambda": 160,
                "num_values_explored": 1033,
                "num_values_kept": 481,
                "temperature": 1.0,
                "total_num_restarts": 93,
                "total_num_values_explored": 290864
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, m))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.9555887542665,
            "num_unique_values": 973,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.70789203963102,
                "explored_percent_lambda": 31.363170481721898,
                "explored_percent_none": 3.9289374786470788,
                "kept_percent_concrete": 45.69055036344756,
                "kept_percent_lambda": 54.30944963655244,
                "num_examples": 3,
                "num_explored_concrete": 1894,
                "num_explored_lambda": 918,
                "num_explored_none": 115,
                "num_inputs": 2,
                "num_kept_concrete": 440,
                "num_kept_lambda": 523,
                "num_values_explored": 2927,
                "num_values_kept": 963,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 298059
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith(lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1)), x, y)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.9508296772838,
            "num_unique_values": 1072,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.27884313109085,
                "explored_percent_lambda": 19.36497956617416,
                "explored_percent_none": 7.356177302734989,
                "kept_percent_concrete": 76.74199623352166,
                "kept_percent_lambda": 23.258003766478343,
                "num_examples": 5,
                "num_explored_concrete": 2331,
                "num_explored_lambda": 616,
                "num_explored_none": 234,
                "num_inputs": 2,
                "num_kept_concrete": 815,
                "num_kept_lambda": 247,
                "num_values_explored": 3181,
                "num_values_kept": 1062,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 324781
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith(lambda u1, u2: Square(Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Square(Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 603.2354058418423,
            "num_unique_values": 991,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 54.89536621823618,
                "explored_percent_lambda": 35.949177877429,
                "explored_percent_none": 9.155455904334827,
                "kept_percent_concrete": 45.05606523955148,
                "kept_percent_lambda": 54.94393476044852,
                "num_examples": 3,
                "num_explored_concrete": 1469,
                "num_explored_lambda": 962,
                "num_explored_none": 245,
                "num_inputs": 2,
                "num_kept_concrete": 442,
                "num_kept_lambda": 539,
                "num_values_explored": 2676,
                "num_values_kept": 981,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 258242
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith(lambda u1, u2: If(Equal(u1, u2), 1, 0), x, y)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: If(Equal(u1, u2), 1, 0), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 55.51413573883474,
            "num_unique_values": 264,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Min(v1, v2))(u1, u2), Sort(x), Sort(y))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 35.16699410609037,
                "explored_percent_lambda": 46.75834970530452,
                "explored_percent_none": 18.074656188605108,
                "kept_percent_concrete": 49.60629921259842,
                "kept_percent_lambda": 50.39370078740158,
                "num_examples": 3,
                "num_explored_concrete": 179,
                "num_explored_lambda": 238,
                "num_explored_none": 92,
                "num_inputs": 2,
                "num_kept_concrete": 126,
                "num_kept_lambda": 128,
                "num_values_explored": 509,
                "num_values_kept": 254,
                "temperature": 1.0,
                "total_num_restarts": 10,
                "total_num_values_explored": 30123
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith(lambda u1, u2: Min(u1, u2), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Min(u1, u2), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 62.76322985999286,
            "num_unique_values": 538,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Add(v1, v2))(u1, u2), x, Drop(Multiply(-1, 3), x))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 60.96121416526138,
                "explored_percent_lambda": 32.546374367622256,
                "explored_percent_none": 6.492411467116358,
                "kept_percent_concrete": 60.113421550094515,
                "kept_percent_lambda": 39.886578449905485,
                "num_examples": 3,
                "num_explored_concrete": 723,
                "num_explored_lambda": 386,
                "num_explored_none": 77,
                "num_inputs": 1,
                "num_kept_concrete": 318,
                "num_kept_lambda": 211,
                "num_values_explored": 1186,
                "num_values_kept": 529,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 32522
            },
            "success": true,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith(lambda u1, u2: Add(u1, u2), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Add(u1, u2), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 74.13773282803595,
            "num_unique_values": 462,
            "solution": "Maximum(ZipWith(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), x, Reverse(x)))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 51.307596513075964,
                "explored_percent_lambda": 39.10336239103363,
                "explored_percent_none": 9.58904109589041,
                "kept_percent_concrete": 63.57615894039735,
                "kept_percent_lambda": 36.42384105960265,
                "num_examples": 5,
                "num_explored_concrete": 412,
                "num_explored_lambda": 314,
                "num_explored_none": 77,
                "num_inputs": 1,
                "num_kept_concrete": 288,
                "num_kept_lambda": 165,
                "num_values_explored": 803,
                "num_values_kept": 453,
                "temperature": 1.0,
                "total_num_restarts": 13,
                "total_num_values_explored": 38583
            },
            "success": true,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 260.5379284322262,
            "num_unique_values": 258,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Multiply(v1, (lambda v1: Add(1, v1))(v2)))(u1, u2), p, w)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 29.258517034068138,
                "explored_percent_lambda": 54.70941883767535,
                "explored_percent_none": 16.03206412825651,
                "kept_percent_concrete": 38.306451612903224,
                "kept_percent_lambda": 61.693548387096776,
                "num_examples": 3,
                "num_explored_concrete": 146,
                "num_explored_lambda": 273,
                "num_explored_none": 80,
                "num_inputs": 2,
                "num_kept_concrete": 95,
                "num_kept_lambda": 153,
                "num_values_explored": 499,
                "num_values_kept": 248,
                "temperature": 1.0,
                "total_num_restarts": 44,
                "total_num_values_explored": 117872
            },
            "success": true,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith(lambda u1, u2: Multiply(u1, Add(1, u2)), p, w)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Multiply(u1, Add(1, u2)), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.6922902781516,
            "num_unique_values": 1119,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.7723011793166,
                "explored_percent_lambda": 16.480193528878136,
                "explored_percent_none": 4.747505291805261,
                "kept_percent_concrete": 79.27927927927928,
                "kept_percent_lambda": 20.72072072072072,
                "num_examples": 5,
                "num_explored_concrete": 2605,
                "num_explored_lambda": 545,
                "num_explored_none": 157,
                "num_inputs": 1,
                "num_kept_concrete": 880,
                "num_kept_lambda": 230,
                "num_values_explored": 3307,
                "num_values_kept": 1110,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 323319
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1(lambda u1, u2: Min(u1, u2), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1(lambda u1, u2: Min(u1, u2), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 603.069931384176,
            "num_unique_values": 929,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 58.890577507598785,
                "explored_percent_lambda": 35.22036474164134,
                "explored_percent_none": 5.8890577507598785,
                "kept_percent_concrete": 40.97826086956522,
                "kept_percent_lambda": 59.02173913043478,
                "num_examples": 3,
                "num_explored_concrete": 1550,
                "num_explored_lambda": 927,
                "num_explored_none": 155,
                "num_inputs": 1,
                "num_kept_concrete": 377,
                "num_kept_lambda": 543,
                "num_values_explored": 2632,
                "num_values_kept": 920,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 268563
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1(lambda u1, u2: Max(u1, u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Max(u1, u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 9.309946903958917,
            "num_unique_values": 742,
            "solution": "Maximum(ZipWith(lambda u1, u2: (lambda v1: Sum((lambda v1: Take(v1, x))(v1)))(u1), x, x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 66.9620253164557,
                "explored_percent_lambda": 26.139240506329113,
                "explored_percent_none": 6.89873417721519,
                "kept_percent_concrete": 70.25920873124147,
                "kept_percent_lambda": 29.740791268758528,
                "num_examples": 5,
                "num_explored_concrete": 1058,
                "num_explored_lambda": 413,
                "num_explored_none": 109,
                "num_inputs": 1,
                "num_kept_concrete": 515,
                "num_kept_lambda": 218,
                "num_values_explored": 1580,
                "num_values_kept": 733,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4829
            },
            "success": true,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1(lambda u1, u2: Add(u1, u2), x))'\n)",
            "task_solution": "Maximum(Scanl1(lambda u1, u2: Add(u1, u2), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 284.53684690222144,
            "num_unique_values": 269,
            "solution": "Scanl1(lambda u1, u2: (lambda v1, v2: Add(v1, v2))(u1, u2), Reverse(x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 29.013539651837526,
                "explored_percent_lambda": 54.35203094777563,
                "explored_percent_none": 16.634429400386846,
                "kept_percent_concrete": 41.15384615384615,
                "kept_percent_lambda": 58.84615384615385,
                "num_examples": 3,
                "num_explored_concrete": 150,
                "num_explored_lambda": 281,
                "num_explored_none": 86,
                "num_inputs": 1,
                "num_kept_concrete": 107,
                "num_kept_lambda": 153,
                "num_values_explored": 517,
                "num_values_kept": 260,
                "temperature": 1.0,
                "total_num_restarts": 48,
                "total_num_values_explored": 127701
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1(lambda u1, u2: Add(u1, u2), Reverse(x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(u1, u2), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.6872334387153,
            "num_unique_values": 945,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 63.586771224002725,
                "explored_percent_lambda": 31.19672690078418,
                "explored_percent_none": 5.216501875213092,
                "kept_percent_concrete": 46.901709401709404,
                "kept_percent_lambda": 53.098290598290596,
                "num_examples": 3,
                "num_explored_concrete": 1865,
                "num_explored_lambda": 915,
                "num_explored_none": 153,
                "num_inputs": 1,
                "num_kept_concrete": 439,
                "num_kept_lambda": 497,
                "num_values_explored": 2933,
                "num_values_kept": 936,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 288052
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1(lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2)), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.6918809488416,
            "num_unique_values": 899,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.99785210187174,
                "explored_percent_lambda": 19.05492482356551,
                "explored_percent_none": 7.947223074562749,
                "kept_percent_concrete": 65.466816647919,
                "kept_percent_lambda": 34.53318335208099,
                "num_examples": 3,
                "num_explored_concrete": 2379,
                "num_explored_lambda": 621,
                "num_explored_none": 259,
                "num_inputs": 2,
                "num_kept_concrete": 582,
                "num_kept_lambda": 307,
                "num_values_explored": 3259,
                "num_values_kept": 889,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 336968
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1(lambda u1, u2: Add(Add(u1, u2), n), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(Add(u1, u2), n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.8251720368862,
            "num_unique_values": 913,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.18392469225199,
                "explored_percent_lambda": 29.688631426502536,
                "explored_percent_none": 4.127443881245474,
                "kept_percent_concrete": 51.769911504424776,
                "kept_percent_lambda": 48.230088495575224,
                "num_examples": 3,
                "num_explored_concrete": 1828,
                "num_explored_lambda": 820,
                "num_explored_none": 114,
                "num_inputs": 1,
                "num_kept_concrete": 468,
                "num_kept_lambda": 436,
                "num_values_explored": 2762,
                "num_values_kept": 904,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 283958
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1(lambda u1, u2: Add(IntDivide(u1, 2), u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(IntDivide(u1, 2), u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 222.35964475013316,
            "num_unique_values": 805,
            "solution": "Scanl1(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), Take(n, x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 67.08052500886839,
                "explored_percent_lambda": 24.760553387726144,
                "explored_percent_none": 8.158921603405464,
                "kept_percent_concrete": 56.729559748427675,
                "kept_percent_lambda": 43.270440251572325,
                "num_examples": 3,
                "num_explored_concrete": 1891,
                "num_explored_lambda": 698,
                "num_explored_none": 230,
                "num_inputs": 2,
                "num_kept_concrete": 451,
                "num_kept_lambda": 344,
                "num_values_explored": 2819,
                "num_values_kept": 795,
                "temperature": 1.0,
                "total_num_restarts": 37,
                "total_num_values_explored": 115455
            },
            "success": true,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1(lambda u1, u2: Multiply(u1, u2), Take(n, x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Multiply(u1, u2), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 26.154119987040758,
            "num_unique_values": 412,
            "solution": "Last(Scanl1(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), Reverse(x)))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 48.44919786096256,
                "explored_percent_lambda": 38.6096256684492,
                "explored_percent_none": 12.941176470588236,
                "kept_percent_concrete": 61.29032258064516,
                "kept_percent_lambda": 38.70967741935484,
                "num_examples": 5,
                "num_explored_concrete": 453,
                "num_explored_lambda": 361,
                "num_explored_none": 121,
                "num_inputs": 1,
                "num_kept_concrete": 247,
                "num_kept_lambda": 156,
                "num_values_explored": 935,
                "num_values_kept": 403,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 14373
            },
            "success": true,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1(lambda u1, u2: Multiply(u1, u2), x))'\n)",
            "task_solution": "Last(Scanl1(lambda u1, u2: Multiply(u1, u2), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.6166459023952,
            "num_unique_values": 919,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.5535889872173,
                "explored_percent_lambda": 32.94001966568338,
                "explored_percent_none": 5.506391347099312,
                "kept_percent_concrete": 53.51648351648352,
                "kept_percent_lambda": 46.48351648351648,
                "num_examples": 3,
                "num_explored_concrete": 1878,
                "num_explored_lambda": 1005,
                "num_explored_none": 168,
                "num_inputs": 1,
                "num_kept_concrete": 487,
                "num_kept_lambda": 423,
                "num_values_explored": 3051,
                "num_values_kept": 910,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 305318
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1(lambda u1, u2: Min(u1, u2), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Min(u1, u2), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.8173231575638,
            "num_unique_values": 921,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.31450577663671,
                "explored_percent_lambda": 25.449293966623877,
                "explored_percent_none": 4.2362002567394095,
                "kept_percent_concrete": 53.39912280701754,
                "kept_percent_lambda": 46.60087719298246,
                "num_examples": 3,
                "num_explored_concrete": 2191,
                "num_explored_lambda": 793,
                "num_explored_none": 132,
                "num_inputs": 1,
                "num_kept_concrete": 487,
                "num_kept_lambda": 425,
                "num_values_explored": 3116,
                "num_values_kept": 912,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 308004
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1(lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 58.87722486257553,
            "num_unique_values": 830,
            "solution": "Scanl1(lambda u1, u2: (lambda v1: Access((lambda v1: Access(v1, x))(v1), Sort(x)))(u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 50.67991631799163,
                "explored_percent_lambda": 43.25313807531381,
                "explored_percent_none": 6.066945606694561,
                "kept_percent_concrete": 39.46406820950061,
                "kept_percent_lambda": 60.53593179049939,
                "num_examples": 3,
                "num_explored_concrete": 969,
                "num_explored_lambda": 827,
                "num_explored_none": 116,
                "num_inputs": 1,
                "num_kept_concrete": 324,
                "num_kept_lambda": 497,
                "num_values_explored": 1912,
                "num_values_kept": 821,
                "temperature": 1.0,
                "total_num_restarts": 10,
                "total_num_values_explored": 25423
            },
            "success": true,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1(lambda u1, u2: Access(u1, x), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Access(u1, x), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 13.669122053310275,
            "num_unique_values": 256,
            "solution": "Scanl1(lambda u1, u2: (lambda v1, v2: Max(v1, (lambda v1: Subtract(v1, -1))(v2)))(u2, u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 29.420289855072465,
                "explored_percent_lambda": 51.88405797101449,
                "explored_percent_none": 18.695652173913043,
                "kept_percent_concrete": 50.607287449392715,
                "kept_percent_lambda": 49.392712550607285,
                "num_examples": 3,
                "num_explored_concrete": 203,
                "num_explored_lambda": 358,
                "num_explored_none": 129,
                "num_inputs": 1,
                "num_kept_concrete": 125,
                "num_kept_lambda": 122,
                "num_values_explored": 690,
                "num_values_kept": 247,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 7255
            },
            "success": true,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1(lambda u1, u2: Max(Add(u1, 1), u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Max(Add(u1, 1), u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.9688303265721,
            "num_unique_values": 960,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.22947956688788,
                "explored_percent_lambda": 33.32169053440447,
                "explored_percent_none": 5.4488298987076496,
                "kept_percent_concrete": 46.79284963196635,
                "kept_percent_lambda": 53.20715036803365,
                "num_examples": 3,
                "num_explored_concrete": 1753,
                "num_explored_lambda": 954,
                "num_explored_none": 156,
                "num_inputs": 1,
                "num_kept_concrete": 445,
                "num_kept_lambda": 506,
                "num_values_explored": 2863,
                "num_values_kept": 951,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 283566
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1(lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 603.1342253908515,
            "num_unique_values": 1155,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 79.26253687315634,
                "explored_percent_lambda": 13.628318584070797,
                "explored_percent_none": 7.109144542772861,
                "kept_percent_concrete": 79.21397379912663,
                "kept_percent_lambda": 20.786026200873362,
                "num_examples": 5,
                "num_explored_concrete": 2687,
                "num_explored_lambda": 462,
                "num_explored_none": 241,
                "num_inputs": 2,
                "num_kept_concrete": 907,
                "num_kept_lambda": 238,
                "num_values_explored": 3390,
                "num_values_kept": 1145,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 329514
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count(lambda u1: Greater(u1, 0), ZipWith(lambda u1, u2: Subtract(u1, u2), a, b))'\n)",
            "task_solution": "Count(lambda u1: Greater(u1, 0), ZipWith(lambda u1, u2: Subtract(u1, u2), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.8422203157097,
            "num_unique_values": 1127,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 82.98382264829239,
                "explored_percent_lambda": 14.409826243259436,
                "explored_percent_none": 2.6063511084481727,
                "kept_percent_concrete": 79.76723366159355,
                "kept_percent_lambda": 20.232766338406446,
                "num_examples": 5,
                "num_explored_concrete": 2770,
                "num_explored_lambda": 481,
                "num_explored_none": 87,
                "num_inputs": 2,
                "num_kept_concrete": 891,
                "num_kept_lambda": 226,
                "num_values_explored": 3338,
                "num_values_kept": 1117,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 336209
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), s, Scanl1(lambda u1, u2: Add(u1, u2), p)))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), s, Scanl1(lambda u1, u2: Add(u1, u2), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.6672533862292767,
            "num_unique_values": 250,
            "solution": "Scanl1(lambda u1, u2: (lambda v1: Max(1, (lambda v1: Subtract(v1, -1))(v1)))(u1), Map(lambda u1: 0, x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 24.60431654676259,
                "explored_percent_lambda": 52.66187050359712,
                "explored_percent_none": 22.73381294964029,
                "kept_percent_concrete": 41.07883817427386,
                "kept_percent_lambda": 58.92116182572614,
                "num_examples": 3,
                "num_explored_concrete": 171,
                "num_explored_lambda": 366,
                "num_explored_none": 158,
                "num_inputs": 1,
                "num_kept_concrete": 99,
                "num_kept_lambda": 142,
                "num_values_explored": 695,
                "num_values_kept": 241,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 695
            },
            "success": true,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1(lambda u1, u2: Add(u1, 1), Map(lambda u1: 0, x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(u1, 1), Map(lambda u1: 0, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.5954474136233,
            "num_unique_values": 969,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.89632545931758,
                "explored_percent_lambda": 27.329396325459317,
                "explored_percent_none": 5.774278215223097,
                "kept_percent_concrete": 59.895833333333336,
                "kept_percent_lambda": 40.104166666666664,
                "num_examples": 3,
                "num_explored_concrete": 2039,
                "num_explored_lambda": 833,
                "num_explored_none": 176,
                "num_inputs": 1,
                "num_kept_concrete": 575,
                "num_kept_lambda": 385,
                "num_values_explored": 3048,
                "num_values_kept": 960,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 310393
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter(lambda u1: IsOdd(u1), ZipWith(lambda u1, u2: Multiply(u2, u1), x, Drop(1, x)))'\n)",
            "task_solution": "Filter(lambda u1: IsOdd(u1), ZipWith(lambda u1, u2: Multiply(u2, u1), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 75.22329783812165,
            "num_unique_values": 543,
            "solution": "Scanl1(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), Filter(lambda u1: (lambda v1: IsOdd(v1))(u1), x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 56.398809523809526,
                "explored_percent_lambda": 35.416666666666664,
                "explored_percent_none": 8.18452380952381,
                "kept_percent_concrete": 55.243445692883896,
                "kept_percent_lambda": 44.756554307116104,
                "num_examples": 3,
                "num_explored_concrete": 758,
                "num_explored_lambda": 476,
                "num_explored_none": 110,
                "num_inputs": 1,
                "num_kept_concrete": 295,
                "num_kept_lambda": 239,
                "num_values_explored": 1344,
                "num_values_kept": 534,
                "temperature": 1.0,
                "total_num_restarts": 13,
                "total_num_values_explored": 37307
            },
            "success": true,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1(lambda u1, u2: Multiply(u1, u2), Filter(lambda u1: IsOdd(u1), x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Multiply(u1, u2), Filter(lambda u1: IsOdd(u1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.5932301469147,
            "num_unique_values": 903,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.5265562535694,
                "explored_percent_lambda": 17.44717304397487,
                "explored_percent_none": 4.026270702455739,
                "kept_percent_concrete": 60.24636058230683,
                "kept_percent_lambda": 39.75363941769317,
                "num_examples": 3,
                "num_explored_concrete": 2750,
                "num_explored_lambda": 611,
                "num_explored_none": 141,
                "num_inputs": 2,
                "num_kept_concrete": 538,
                "num_kept_lambda": 355,
                "num_values_explored": 3502,
                "num_values_kept": 893,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 339694
            },
            "success": false,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1(lambda u1, u2: Add(u1, u2), ZipWith(lambda u1, u2: Add(u1, u2), x, y))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(u1, u2), ZipWith(lambda u1, u2: Add(u1, u2), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.7150632701814,
            "num_unique_values": 931,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.94774559570021,
                "explored_percent_lambda": 19.767094655120932,
                "explored_percent_none": 5.28515974917886,
                "kept_percent_concrete": 58.69565217391305,
                "kept_percent_lambda": 41.30434782608695,
                "num_examples": 3,
                "num_explored_concrete": 2510,
                "num_explored_lambda": 662,
                "num_explored_none": 177,
                "num_inputs": 3,
                "num_kept_concrete": 540,
                "num_kept_lambda": 380,
                "num_values_explored": 3349,
                "num_values_kept": 920,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 328832
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith(lambda u1, u2: Add(u1, u2), x, Map(lambda u1: Access(u1, y), i))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Add(u1, u2), x, Map(lambda u1: Access(u1, y), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 603.0734714269638,
            "num_unique_values": 1083,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.97265625,
                "explored_percent_lambda": 25.68359375,
                "explored_percent_none": 2.34375,
                "kept_percent_concrete": 64.30568499534017,
                "kept_percent_lambda": 35.694315004659835,
                "num_examples": 3,
                "num_explored_concrete": 2211,
                "num_explored_lambda": 789,
                "num_explored_none": 72,
                "num_inputs": 2,
                "num_kept_concrete": 690,
                "num_kept_lambda": 383,
                "num_values_explored": 3072,
                "num_values_kept": 1073,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 304967
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter(lambda u1: Greater(u1, -1), ZipWith(lambda u1, u2: Subtract(u1, u2), x, y))'\n)",
            "task_solution": "Filter(lambda u1: Greater(u1, -1), ZipWith(lambda u1, u2: Subtract(u1, u2), x, y))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.68
}