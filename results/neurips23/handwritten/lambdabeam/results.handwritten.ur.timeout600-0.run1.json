{
    "num_tasks": 100,
    "num_tasks_solved": 43,
    "results": [
        {
            "elapsed_time": 14.37703956477344,
            "num_unique_values": 2027,
            "solution": "Sum(Reverse(Take(k, Sort(b))))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 87.91814246359701,
                "explored_percent_lambda": 9.353272989636626,
                "explored_percent_none": 2.7285845467663647,
                "kept_percent_concrete": 85.07684680218146,
                "kept_percent_lambda": 14.923153197818543,
                "num_examples": 5,
                "num_explored_concrete": 6702,
                "num_explored_lambda": 713,
                "num_explored_none": 208,
                "num_inputs": 2,
                "num_kept_concrete": 1716,
                "num_kept_lambda": 301,
                "num_values_explored": 7623,
                "num_values_kept": 2017,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 27.88704714551568,
            "num_unique_values": 735,
            "solution": "If(IsOdd(x), Subtract(Multiply(x, 3), -1), IntDivide(x, 2))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 31.946214631659444,
                "explored_percent_lambda": 8.851644149885292,
                "explored_percent_none": 59.20214121845527,
                "kept_percent_concrete": 90.77134986225896,
                "kept_percent_lambda": 9.228650137741047,
                "num_examples": 5,
                "num_explored_concrete": 5013,
                "num_explored_lambda": 1389,
                "num_explored_none": 9290,
                "num_inputs": 1,
                "num_kept_concrete": 659,
                "num_kept_lambda": 67,
                "num_values_explored": 15692,
                "num_values_kept": 726,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 17.67001800239086,
            "num_unique_values": 496,
            "solution": "Subtract(Add(y, Multiply(y, Subtract(x, 2))), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 27.879767906401597,
                "explored_percent_lambda": 7.305241130029487,
                "explored_percent_none": 64.81499096356892,
                "kept_percent_concrete": 91.35802469135803,
                "kept_percent_lambda": 8.641975308641975,
                "num_examples": 5,
                "num_explored_concrete": 2931,
                "num_explored_lambda": 768,
                "num_explored_none": 6814,
                "num_inputs": 2,
                "num_kept_concrete": 444,
                "num_kept_lambda": 42,
                "num_values_explored": 10513,
                "num_values_kept": 486,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 50.70179636962712,
            "num_unique_values": 1171,
            "solution": "Add(k, Multiply(k, IntDivide(x, k)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 32.42472157294102,
                "explored_percent_lambda": 6.458820294238966,
                "explored_percent_none": 61.11645813282002,
                "kept_percent_concrete": 92.50645994832041,
                "kept_percent_lambda": 7.493540051679586,
                "num_examples": 5,
                "num_explored_concrete": 9433,
                "num_explored_lambda": 1879,
                "num_explored_none": 17780,
                "num_inputs": 2,
                "num_kept_concrete": 1074,
                "num_kept_lambda": 87,
                "num_values_explored": 29092,
                "num_values_kept": 1161,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.631283972412348,
            "num_unique_values": 423,
            "solution": "Take(Subtract(1, n), Take(-1, x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 47.768595041322314,
                "explored_percent_lambda": 33.71900826446281,
                "explored_percent_none": 18.512396694214875,
                "kept_percent_concrete": 56.90072639225182,
                "kept_percent_lambda": 43.09927360774818,
                "num_examples": 3,
                "num_explored_concrete": 578,
                "num_explored_lambda": 408,
                "num_explored_none": 224,
                "num_inputs": 2,
                "num_kept_concrete": 235,
                "num_kept_lambda": 178,
                "num_values_explored": 1210,
                "num_values_kept": 413,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.6366684325039387,
            "num_unique_values": 470,
            "solution": "Reverse(Sort(Drop(Multiply(n, -1), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 46.67788057190917,
                "explored_percent_lambda": 37.08999158957107,
                "explored_percent_none": 16.232127838519766,
                "kept_percent_concrete": 56.08695652173913,
                "kept_percent_lambda": 43.91304347826087,
                "num_examples": 3,
                "num_explored_concrete": 555,
                "num_explored_lambda": 441,
                "num_explored_none": 193,
                "num_inputs": 2,
                "num_kept_concrete": 258,
                "num_kept_lambda": 202,
                "num_values_explored": 1189,
                "num_values_kept": 460,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.042655160650611,
            "num_unique_values": 156,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 10.422535211267606,
                "explored_percent_lambda": 72.95774647887323,
                "explored_percent_none": 16.619718309859156,
                "kept_percent_concrete": 19.047619047619047,
                "kept_percent_lambda": 80.95238095238095,
                "num_examples": 3,
                "num_explored_concrete": 37,
                "num_explored_lambda": 259,
                "num_explored_none": 59,
                "num_inputs": 1,
                "num_kept_concrete": 28,
                "num_kept_lambda": 119,
                "num_values_explored": 355,
                "num_values_kept": 147,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.52420362457633,
            "num_unique_values": 415,
            "solution": "Take(Subtract(j, i), Drop(i, x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 45.72457245724573,
                "explored_percent_lambda": 31.593159315931594,
                "explored_percent_none": 22.682268226822682,
                "kept_percent_concrete": 60.396039603960396,
                "kept_percent_lambda": 39.603960396039604,
                "num_examples": 3,
                "num_explored_concrete": 508,
                "num_explored_lambda": 351,
                "num_explored_none": 252,
                "num_inputs": 3,
                "num_kept_concrete": 244,
                "num_kept_lambda": 160,
                "num_values_explored": 1111,
                "num_values_kept": 404,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.13044254668057,
            "num_unique_values": 676,
            "solution": "Take(k, Reverse(Sort(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 58.41995841995842,
                "explored_percent_lambda": 32.06860706860707,
                "explored_percent_none": 9.511434511434512,
                "kept_percent_concrete": 59.609609609609606,
                "kept_percent_lambda": 40.390390390390394,
                "num_examples": 3,
                "num_explored_concrete": 1124,
                "num_explored_lambda": 617,
                "num_explored_none": 183,
                "num_inputs": 2,
                "num_kept_concrete": 397,
                "num_kept_lambda": 269,
                "num_values_explored": 1924,
                "num_values_kept": 666,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 14.111563920974731,
            "num_unique_values": 1872,
            "solution": "Max(Access(k, x), Subtract(Multiply(2, Subtract(4, k)), -1))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 85.62548562548562,
                "explored_percent_lambda": 8.236208236208236,
                "explored_percent_none": 6.138306138306138,
                "kept_percent_concrete": 85.82169709989259,
                "kept_percent_lambda": 14.178302900107411,
                "num_examples": 5,
                "num_explored_concrete": 6612,
                "num_explored_lambda": 636,
                "num_explored_none": 474,
                "num_inputs": 2,
                "num_kept_concrete": 1598,
                "num_kept_lambda": 264,
                "num_values_explored": 7722,
                "num_values_kept": 1862,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0326567031443,
            "num_unique_values": 14742,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 83.98365991655199,
                "explored_percent_lambda": 5.13795137296022,
                "explored_percent_none": 10.8783887104878,
                "kept_percent_concrete": 91.93646915088577,
                "kept_percent_lambda": 8.063530849114233,
                "num_examples": 5,
                "num_explored_concrete": 192226,
                "num_explored_lambda": 11760,
                "num_explored_none": 24899,
                "num_inputs": 1,
                "num_kept_concrete": 13545,
                "num_kept_lambda": 1188,
                "num_values_explored": 228885,
                "num_values_kept": 14733,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.4078417252749205,
            "num_unique_values": 334,
            "solution": "Max(Minimum(Drop(1, x)), Minimum(Take(2, x)))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 32.098765432098766,
                "explored_percent_lambda": 43.95061728395062,
                "explored_percent_none": 23.950617283950617,
                "kept_percent_concrete": 50.76923076923077,
                "kept_percent_lambda": 49.23076923076923,
                "num_examples": 5,
                "num_explored_concrete": 260,
                "num_explored_lambda": 356,
                "num_explored_none": 194,
                "num_inputs": 1,
                "num_kept_concrete": 165,
                "num_kept_lambda": 160,
                "num_values_explored": 810,
                "num_values_kept": 325,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 10.951112104579806,
            "num_unique_values": 1594,
            "solution": "Subtract(Add(Maximum(x), Maximum(Map(lambda u1: (lambda v1: Subtract(1, v1))(u1), x))), 1)",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 84.505772005772,
                "explored_percent_lambda": 11.020923520923521,
                "explored_percent_none": 4.473304473304474,
                "kept_percent_concrete": 82.64984227129338,
                "kept_percent_lambda": 17.350157728706623,
                "num_examples": 5,
                "num_explored_concrete": 4685,
                "num_explored_lambda": 611,
                "num_explored_none": 248,
                "num_inputs": 1,
                "num_kept_concrete": 1310,
                "num_kept_lambda": 275,
                "num_values_explored": 5544,
                "num_values_kept": 1585,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0354938842356,
            "num_unique_values": 16443,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 88.65662326384962,
                "explored_percent_lambda": 2.7208546088545367,
                "explored_percent_none": 8.622522127295834,
                "kept_percent_concrete": 95.78896123653624,
                "kept_percent_lambda": 4.211038763463762,
                "num_examples": 5,
                "num_explored_concrete": 196026,
                "num_explored_lambda": 6016,
                "num_explored_none": 19065,
                "num_inputs": 2,
                "num_kept_concrete": 15741,
                "num_kept_lambda": 692,
                "num_values_explored": 221107,
                "num_values_kept": 16433,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.2872359789908,
            "num_unique_values": 15288,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 86.51580589974935,
                "explored_percent_lambda": 2.375637120766711,
                "explored_percent_none": 11.108556979483938,
                "kept_percent_concrete": 96.88440895405158,
                "kept_percent_lambda": 3.1155910459484226,
                "num_examples": 5,
                "num_explored_concrete": 195710,
                "num_explored_lambda": 5374,
                "num_explored_none": 25129,
                "num_inputs": 2,
                "num_kept_concrete": 14802,
                "num_kept_lambda": 476,
                "num_values_explored": 226213,
                "num_values_kept": 15278,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 24.531748943030834,
            "num_unique_values": 1847,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Multiply(v1, (lambda v1: Square(v1))(v1)))(u1), x, x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 69.89470050060417,
                "explored_percent_lambda": 21.077162092180217,
                "explored_percent_none": 9.028137407215604,
                "kept_percent_concrete": 49.83677910772579,
                "kept_percent_lambda": 50.16322089227421,
                "num_examples": 3,
                "num_explored_concrete": 8098,
                "num_explored_lambda": 2442,
                "num_explored_none": 1046,
                "num_inputs": 1,
                "num_kept_concrete": 916,
                "num_kept_lambda": 922,
                "num_values_explored": 11586,
                "num_values_kept": 1838,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map(lambda u1: Multiply(u1, Square(u1)), x)'\n)",
            "task_solution": "Map(lambda u1: Multiply(u1, Square(u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 47.05918148905039,
            "num_unique_values": 3089,
            "solution": "Map(lambda u1: (lambda v1: Max(v1, (lambda v1: IntDivide(v1, -1))(v1)))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 75.42987641053197,
                "explored_percent_lambda": 18.224968654845064,
                "explored_percent_none": 6.345154934622963,
                "kept_percent_concrete": 60.0,
                "kept_percent_lambda": 40.0,
                "num_examples": 3,
                "num_explored_concrete": 16845,
                "num_explored_lambda": 4070,
                "num_explored_none": 1417,
                "num_inputs": 1,
                "num_kept_concrete": 1848,
                "num_kept_lambda": 1232,
                "num_values_explored": 22332,
                "num_values_kept": 3080,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map(lambda u1: Max(u1, Subtract(0, u1)), x)'\n)",
            "task_solution": "Map(lambda u1: Max(u1, Subtract(0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.496753366664052,
            "num_unique_values": 530,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Subtract((lambda v1: Square(v1))(v2), v1))(u1, u2), x, x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 45.41452677916361,
                "explored_percent_lambda": 42.47982391782832,
                "explored_percent_none": 12.10564930300807,
                "kept_percent_concrete": 46.449136276391556,
                "kept_percent_lambda": 53.550863723608444,
                "num_examples": 3,
                "num_explored_concrete": 619,
                "num_explored_lambda": 579,
                "num_explored_none": 165,
                "num_inputs": 1,
                "num_kept_concrete": 242,
                "num_kept_lambda": 279,
                "num_values_explored": 1363,
                "num_values_kept": 521,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map(lambda u1: Subtract(Square(u1), u1), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(Square(u1), u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0257906671613,
            "num_unique_values": 12539,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.01050447125873,
                "explored_percent_lambda": 21.110270399426547,
                "explored_percent_none": 4.879225129314731,
                "kept_percent_concrete": 54.03830806065443,
                "kept_percent_lambda": 45.96169193934557,
                "num_examples": 3,
                "num_explored_concrete": 167263,
                "num_explored_lambda": 47709,
                "num_explored_none": 11027,
                "num_inputs": 1,
                "num_kept_concrete": 6771,
                "num_kept_lambda": 5759,
                "num_values_explored": 225999,
                "num_values_kept": 12530,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map(lambda u1: IntDivide(Add(Square(u1), u1), 2), x)'\n)",
            "task_solution": "Map(lambda u1: IntDivide(Add(Square(u1), u1), 2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 31.40651724115014,
            "num_unique_values": 2169,
            "solution": "Reverse(Map(lambda u1: (lambda v1: Add(b, (lambda v1: Multiply(v1, a))(v1)))(u1), Reverse(x)))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 73.75038711675441,
                "explored_percent_lambda": 14.128213069061628,
                "explored_percent_none": 12.121399814183958,
                "kept_percent_concrete": 64.73586654309545,
                "kept_percent_lambda": 35.26413345690454,
                "num_examples": 3,
                "num_explored_concrete": 11907,
                "num_explored_lambda": 2281,
                "num_explored_none": 1957,
                "num_inputs": 3,
                "num_kept_concrete": 1397,
                "num_kept_lambda": 761,
                "num_values_explored": 16145,
                "num_values_kept": 2158,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map(lambda u1: Add(Multiply(a, u1), b), x)'\n)",
            "task_solution": "Map(lambda u1: Add(Multiply(a, u1), b), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0551113635302,
            "num_unique_values": 12651,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.5639726698967,
                "explored_percent_lambda": 23.619251204635695,
                "explored_percent_none": 4.8167761254676105,
                "kept_percent_concrete": 59.38142698940041,
                "kept_percent_lambda": 40.61857301059959,
                "num_examples": 3,
                "num_explored_concrete": 162033,
                "num_explored_lambda": 53478,
                "num_explored_none": 10906,
                "num_inputs": 1,
                "num_kept_concrete": 7507,
                "num_kept_lambda": 5135,
                "num_values_explored": 226417,
                "num_values_kept": 12642,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map(lambda u1: Subtract(Multiply(u1, 3), 4), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(Multiply(u1, 3), 4), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3078818563372,
            "num_unique_values": 13342,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.3517954849338,
                "explored_percent_lambda": 24.451360589231196,
                "explored_percent_none": 5.196843925834995,
                "kept_percent_concrete": 57.75894397359934,
                "kept_percent_lambda": 42.24105602640066,
                "num_examples": 3,
                "num_explored_concrete": 154164,
                "num_explored_lambda": 53581,
                "num_explored_none": 11388,
                "num_inputs": 1,
                "num_kept_concrete": 7701,
                "num_kept_lambda": 5632,
                "num_values_explored": 219133,
                "num_values_kept": 13333,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map(lambda u1: Multiply(u1, Add(u1, 2)), x)'\n)",
            "task_solution": "Map(lambda u1: Multiply(u1, Add(u1, 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.0851886570453644,
            "num_unique_values": 225,
            "solution": "Map(lambda u1: (lambda v1: Max(a, (lambda v1: Min(b, v1))(v1)))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 25.069252077562325,
                "explored_percent_lambda": 43.35180055401662,
                "explored_percent_none": 31.57894736842105,
                "kept_percent_concrete": 48.598130841121495,
                "kept_percent_lambda": 51.401869158878505,
                "num_examples": 3,
                "num_explored_concrete": 181,
                "num_explored_lambda": 313,
                "num_explored_none": 228,
                "num_inputs": 3,
                "num_kept_concrete": 104,
                "num_kept_lambda": 110,
                "num_values_explored": 722,
                "num_values_kept": 214,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map(lambda u1: Max(Min(u1, b), a), x)'\n)",
            "task_solution": "Map(lambda u1: Max(Min(u1, b), a), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0081213135272,
            "num_unique_values": 13275,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.24096279625853,
                "explored_percent_lambda": 23.85188831844715,
                "explored_percent_none": 5.907148885294324,
                "kept_percent_concrete": 63.493140358812,
                "kept_percent_lambda": 36.506859641188,
                "num_examples": 3,
                "num_explored_concrete": 159801,
                "num_explored_lambda": 54264,
                "num_explored_none": 13439,
                "num_inputs": 1,
                "num_kept_concrete": 8423,
                "num_kept_lambda": 4843,
                "num_values_explored": 227504,
                "num_values_kept": 13266,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map(lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1)), x)'\n)",
            "task_solution": "Map(lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.2527969535440207,
            "num_unique_values": 481,
            "solution": "Sort(ZipWith(lambda u1, u2: (lambda v1: Square(v1))(u1), Sort(x), Sort(x)))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 46.666666666666664,
                "explored_percent_lambda": 40.08130081300813,
                "explored_percent_none": 13.252032520325203,
                "kept_percent_concrete": 43.00847457627118,
                "kept_percent_lambda": 56.99152542372882,
                "num_examples": 3,
                "num_explored_concrete": 574,
                "num_explored_lambda": 493,
                "num_explored_none": 163,
                "num_inputs": 1,
                "num_kept_concrete": 203,
                "num_kept_lambda": 269,
                "num_values_explored": 1230,
                "num_values_kept": 472,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map(lambda u1: Square(u1), x))'\n)",
            "task_solution": "Sort(Map(lambda u1: Square(u1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 14.281250577419996,
            "num_unique_values": 1457,
            "solution": "Reverse(ZipWith(lambda u1, u2: (lambda v1: Subtract(v1, Minimum(x)))(u2), x, Reverse(x)))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 69.05087319665907,
                "explored_percent_lambda": 26.909643128321942,
                "explored_percent_none": 4.039483675018983,
                "kept_percent_concrete": 46.13259668508287,
                "kept_percent_lambda": 53.86740331491713,
                "num_examples": 3,
                "num_explored_concrete": 4547,
                "num_explored_lambda": 1772,
                "num_explored_none": 266,
                "num_inputs": 1,
                "num_kept_concrete": 668,
                "num_kept_lambda": 780,
                "num_values_explored": 6585,
                "num_values_kept": 1448,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map(lambda u1: Subtract(u1, Minimum(x)), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(u1, Minimum(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 24.204134363681078,
            "num_unique_values": 1824,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Subtract(v1, Access(i, x)))(u1), x, Reverse(x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 78.1626626227153,
                "explored_percent_lambda": 12.985872775161624,
                "explored_percent_none": 8.851464602123075,
                "kept_percent_concrete": 69.45975744211687,
                "kept_percent_lambda": 30.540242557883133,
                "num_examples": 3,
                "num_explored_concrete": 9793,
                "num_explored_lambda": 1627,
                "num_explored_none": 1109,
                "num_inputs": 2,
                "num_kept_concrete": 1260,
                "num_kept_lambda": 554,
                "num_values_explored": 12529,
                "num_values_kept": 1814,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map(lambda u1: Subtract(u1, Access(i, x)), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(u1, Access(i, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0438853465021,
            "num_unique_values": 10867,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.6310243400555,
                "explored_percent_lambda": 20.59632513700875,
                "explored_percent_none": 6.772650522935741,
                "kept_percent_concrete": 59.34420189739339,
                "kept_percent_lambda": 40.65579810260661,
                "num_examples": 3,
                "num_explored_concrete": 175072,
                "num_explored_lambda": 49646,
                "num_explored_none": 16325,
                "num_inputs": 2,
                "num_kept_concrete": 6443,
                "num_kept_lambda": 4414,
                "num_values_explored": 241043,
                "num_values_kept": 10857,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map(lambda u1: Add(u1, Subtract(t, Head(x))), x)'\n)",
            "task_solution": "Map(lambda u1: Add(u1, Subtract(t, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 29.037593960762024,
            "num_unique_values": 2347,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Head((lambda v1: Drop(v1, x))(v1)))(u1), i, i)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 75.27285613040397,
                "explored_percent_lambda": 21.537916371367825,
                "explored_percent_none": 3.189227498228207,
                "kept_percent_concrete": 57.33846812152332,
                "kept_percent_lambda": 42.66153187847668,
                "num_examples": 3,
                "num_explored_concrete": 10621,
                "num_explored_lambda": 3039,
                "num_explored_none": 450,
                "num_inputs": 2,
                "num_kept_concrete": 1340,
                "num_kept_lambda": 997,
                "num_values_explored": 14110,
                "num_values_kept": 2337,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map(lambda u1: Access(u1, x), i)'\n)",
            "task_solution": "Map(lambda u1: Access(u1, x), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 9.19540953449905,
            "num_unique_values": 1522,
            "solution": "Maximum(ZipWith(lambda u1, u2: (lambda v1: Access(v1, x))(u2), i, Drop(1, i)))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 81.64842240824211,
                "explored_percent_lambda": 14.16613007083065,
                "explored_percent_none": 4.185447520927237,
                "kept_percent_concrete": 80.0925925925926,
                "kept_percent_lambda": 19.90740740740741,
                "num_examples": 5,
                "num_explored_concrete": 3804,
                "num_explored_lambda": 660,
                "num_explored_none": 195,
                "num_inputs": 2,
                "num_kept_concrete": 1211,
                "num_kept_lambda": 301,
                "num_values_explored": 4659,
                "num_values_kept": 1512,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map(lambda u1: Access(u1, x), i))'\n)",
            "task_solution": "Maximum(Map(lambda u1: Access(u1, x), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.2680294327437878,
            "num_unique_values": 223,
            "solution": "Map(lambda u1: (lambda v1: If((lambda v1: IsOdd(v1))(v1), 0, v1))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 22.666666666666668,
                "explored_percent_lambda": 61.111111111111114,
                "explored_percent_none": 16.22222222222222,
                "kept_percent_concrete": 35.046728971962615,
                "kept_percent_lambda": 64.95327102803738,
                "num_examples": 3,
                "num_explored_concrete": 102,
                "num_explored_lambda": 275,
                "num_explored_none": 73,
                "num_inputs": 1,
                "num_kept_concrete": 75,
                "num_kept_lambda": 139,
                "num_values_explored": 450,
                "num_values_kept": 214,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map(lambda u1: If(IsOdd(u1), 0, u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(IsOdd(u1), 0, u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0120048578829,
            "num_unique_values": 11898,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.16958097433071,
                "explored_percent_lambda": 21.15795714548157,
                "explored_percent_none": 5.6724618801877185,
                "kept_percent_concrete": 62.41271977790864,
                "kept_percent_lambda": 37.58728022209136,
                "num_examples": 3,
                "num_explored_concrete": 175247,
                "num_explored_lambda": 50675,
                "num_explored_none": 13586,
                "num_inputs": 3,
                "num_kept_concrete": 7419,
                "num_kept_lambda": 4468,
                "num_values_explored": 239508,
                "num_values_kept": 11887,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map(lambda u1: If(Equal(u1, f), r, u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(Equal(u1, f), r, u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.2901666667312,
            "num_unique_values": 12492,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.4428397594749,
                "explored_percent_lambda": 29.107268157069644,
                "explored_percent_none": 4.449892083455461,
                "kept_percent_concrete": 51.546226566255406,
                "kept_percent_lambda": 48.453773433744594,
                "num_examples": 3,
                "num_explored_concrete": 149612,
                "num_explored_lambda": 65542,
                "num_explored_none": 10020,
                "num_inputs": 2,
                "num_kept_concrete": 6434,
                "num_kept_lambda": 6048,
                "num_values_explored": 225174,
                "num_values_kept": 12482,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map(lambda u1: If(Less(u1, 0), y, u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(Less(u1, 0), y, u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.6282222121953964,
            "num_unique_values": 537,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Add(v1, Last(x)))(u1), x, Drop(1, x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 59.18513223731237,
                "explored_percent_lambda": 32.0228734810579,
                "explored_percent_none": 8.791994281629735,
                "kept_percent_concrete": 59.46969696969697,
                "kept_percent_lambda": 40.53030303030303,
                "num_examples": 3,
                "num_explored_concrete": 828,
                "num_explored_lambda": 448,
                "num_explored_none": 123,
                "num_inputs": 1,
                "num_kept_concrete": 314,
                "num_kept_lambda": 214,
                "num_values_explored": 1399,
                "num_values_kept": 528,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map(lambda u1: Add(u1, Last(x)), x))'\n)",
            "task_solution": "Take(-1, Map(lambda u1: Add(u1, Last(x)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.4168088771402836,
            "num_unique_values": 222,
            "solution": "Map(lambda u1: Head(x), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 22.99270072992701,
                "explored_percent_lambda": 64.23357664233576,
                "explored_percent_none": 12.773722627737227,
                "kept_percent_concrete": 37.55868544600939,
                "kept_percent_lambda": 62.44131455399061,
                "num_examples": 3,
                "num_explored_concrete": 126,
                "num_explored_lambda": 352,
                "num_explored_none": 70,
                "num_inputs": 1,
                "num_kept_concrete": 80,
                "num_kept_lambda": 133,
                "num_values_explored": 548,
                "num_values_kept": 213,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map(lambda u1: Head(x), x)'\n)",
            "task_solution": "Map(lambda u1: Head(x), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.8215083349496126,
            "num_unique_values": 515,
            "solution": "Count(lambda u1: IsEven(Minimum(x)), Sort(Scanl1(lambda u1, u2: Square(4), x)))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 41.95162635529608,
                "explored_percent_lambda": 31.359466221851545,
                "explored_percent_none": 26.688907422852377,
                "kept_percent_concrete": 69.96047430830039,
                "kept_percent_lambda": 30.039525691699605,
                "num_examples": 5,
                "num_explored_concrete": 503,
                "num_explored_lambda": 376,
                "num_explored_none": 320,
                "num_inputs": 1,
                "num_kept_concrete": 354,
                "num_kept_lambda": 152,
                "num_values_explored": 1199,
                "num_values_kept": 506,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map(lambda u1: 1, x))'\n)",
            "task_solution": "Sum(Map(lambda u1: 1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0181649103761,
            "num_unique_values": 15630,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 89.04917563621567,
                "explored_percent_lambda": 3.3314403001426482,
                "explored_percent_none": 7.619384063641689,
                "kept_percent_concrete": 92.91978746559118,
                "kept_percent_lambda": 7.080212534408808,
                "num_examples": 5,
                "num_explored_concrete": 199138,
                "num_explored_lambda": 7450,
                "num_explored_none": 17039,
                "num_inputs": 1,
                "num_kept_concrete": 14515,
                "num_kept_lambda": 1106,
                "num_values_explored": 223627,
                "num_values_kept": 15621,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map(lambda u1: 1, x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map(lambda u1: 1, x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.7203954309225082,
            "num_unique_values": 223,
            "solution": "Map(lambda u1: (lambda v1: If((lambda v1: Greater(v1, y))(v1), 1, 0))(u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 28.50609756097561,
                "explored_percent_lambda": 39.63414634146341,
                "explored_percent_none": 31.859756097560975,
                "kept_percent_concrete": 59.624413145539904,
                "kept_percent_lambda": 40.375586854460096,
                "num_examples": 3,
                "num_explored_concrete": 187,
                "num_explored_lambda": 260,
                "num_explored_none": 209,
                "num_inputs": 2,
                "num_kept_concrete": 127,
                "num_kept_lambda": 86,
                "num_values_explored": 656,
                "num_values_kept": 213,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map(lambda u1: If(Greater(u1, y), 1, 0), x)'\n)",
            "task_solution": "Map(lambda u1: If(Greater(u1, y), 1, 0), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.01417273283,
            "num_unique_values": 12480,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.37690697624237,
                "explored_percent_lambda": 22.0283537966899,
                "explored_percent_none": 6.594739227067734,
                "kept_percent_concrete": 55.87362681420896,
                "kept_percent_lambda": 44.12637318579104,
                "num_examples": 3,
                "num_explored_concrete": 165391,
                "num_explored_lambda": 51043,
                "num_explored_none": 15281,
                "num_inputs": 1,
                "num_kept_concrete": 6968,
                "num_kept_lambda": 5503,
                "num_values_explored": 231715,
                "num_values_kept": 12471,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map(lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3218737971038,
            "num_unique_values": 13305,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.07741570132995,
                "explored_percent_lambda": 19.4426169438453,
                "explored_percent_none": 4.4799673548247405,
                "kept_percent_concrete": 66.61902971041745,
                "kept_percent_lambda": 33.38097028958255,
                "num_examples": 3,
                "num_explored_concrete": 182706,
                "num_explored_lambda": 46693,
                "num_explored_none": 10759,
                "num_inputs": 2,
                "num_kept_concrete": 8857,
                "num_kept_lambda": 4438,
                "num_values_explored": 240158,
                "num_values_kept": 13295,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map(lambda u1: If(IsOdd(u1), Multiply(u1, n), u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(IsOdd(u1), Multiply(u1, n), u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 8.141840722411871,
            "num_unique_values": 1034,
            "solution": "Filter(lambda u1: (lambda v1: Greater(v1, y))(u1), Filter(lambda u1: (lambda v1: Greater(v1, Minimum(x)))(u1), x))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 73.75174337517434,
                "explored_percent_lambda": 19.609483960948396,
                "explored_percent_none": 6.638772663877266,
                "kept_percent_concrete": 68.84765625,
                "kept_percent_lambda": 31.15234375,
                "num_examples": 3,
                "num_explored_concrete": 2644,
                "num_explored_lambda": 703,
                "num_explored_none": 238,
                "num_inputs": 2,
                "num_kept_concrete": 705,
                "num_kept_lambda": 319,
                "num_values_explored": 3585,
                "num_values_kept": 1024,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter(lambda u1: Greater(u1, y), x)'\n)",
            "task_solution": "Filter(lambda u1: Greater(u1, y), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.5800783392041922,
            "num_unique_values": 223,
            "solution": "Filter(lambda u1: (lambda v1: IsEven(v1))(u1), Sort(x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 25.714285714285715,
                "explored_percent_lambda": 53.38345864661654,
                "explored_percent_none": 20.902255639097746,
                "kept_percent_concrete": 41.58878504672897,
                "kept_percent_lambda": 58.41121495327103,
                "num_examples": 3,
                "num_explored_concrete": 171,
                "num_explored_lambda": 355,
                "num_explored_none": 139,
                "num_inputs": 1,
                "num_kept_concrete": 89,
                "num_kept_lambda": 125,
                "num_values_explored": 665,
                "num_values_kept": 214,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter(lambda u1: IsEven(u1), Sort(x))'\n)",
            "task_solution": "Filter(lambda u1: IsEven(u1), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.0174020379781723,
            "num_unique_values": 462,
            "solution": "Maximum(Filter(lambda u1: (lambda v1: IsOdd(v1))(u1), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 52.77449822904369,
                "explored_percent_lambda": 35.30106257378985,
                "explored_percent_none": 11.92443919716647,
                "kept_percent_concrete": 64.90066225165563,
                "kept_percent_lambda": 35.09933774834437,
                "num_examples": 5,
                "num_explored_concrete": 447,
                "num_explored_lambda": 299,
                "num_explored_none": 101,
                "num_inputs": 1,
                "num_kept_concrete": 294,
                "num_kept_lambda": 159,
                "num_values_explored": 847,
                "num_values_kept": 453,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter(lambda u1: IsOdd(u1), x))'\n)",
            "task_solution": "Maximum(Filter(lambda u1: IsOdd(u1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 8.89235102944076,
            "num_unique_values": 1288,
            "solution": "Filter(lambda u1: (lambda v1: Greater(3, v1))(u1), Filter(lambda u1: (lambda v1: IsOdd(v1))(u1), x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 71.2597547380156,
                "explored_percent_lambda": 21.29319955406912,
                "explored_percent_none": 7.447045707915273,
                "kept_percent_concrete": 67.08365910867866,
                "kept_percent_lambda": 32.91634089132135,
                "num_examples": 3,
                "num_explored_concrete": 3196,
                "num_explored_lambda": 955,
                "num_explored_none": 334,
                "num_inputs": 1,
                "num_kept_concrete": 858,
                "num_kept_lambda": 421,
                "num_values_explored": 4485,
                "num_values_kept": 1279,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter(lambda u1: IsOdd(Min(u1, 0)), x)'\n)",
            "task_solution": "Filter(lambda u1: IsOdd(Min(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.0824305918067694,
            "num_unique_values": 492,
            "solution": "Sum(Filter(lambda u1: (lambda v1: Greater(v1, -1))(u1), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 52.89351851851852,
                "explored_percent_lambda": 38.425925925925924,
                "explored_percent_none": 8.680555555555555,
                "kept_percent_concrete": 64.59627329192547,
                "kept_percent_lambda": 35.40372670807454,
                "num_examples": 5,
                "num_explored_concrete": 457,
                "num_explored_lambda": 332,
                "num_explored_none": 75,
                "num_inputs": 1,
                "num_kept_concrete": 312,
                "num_kept_lambda": 171,
                "num_values_explored": 864,
                "num_values_kept": 483,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter(lambda u1: Greater(u1, 0), x))'\n)",
            "task_solution": "Sum(Filter(lambda u1: Greater(u1, 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.135363459587097,
            "num_unique_values": 738,
            "solution": "Reverse(Sort(Filter(lambda u1: (lambda v1: Greater(0, v1))(u1), x)))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 66.4700098328417,
                "explored_percent_lambda": 27.826941986234022,
                "explored_percent_none": 5.703048180924287,
                "kept_percent_concrete": 65.98079561042525,
                "kept_percent_lambda": 34.01920438957476,
                "num_examples": 3,
                "num_explored_concrete": 1352,
                "num_explored_lambda": 566,
                "num_explored_none": 116,
                "num_inputs": 1,
                "num_kept_concrete": 481,
                "num_kept_lambda": 248,
                "num_values_explored": 2034,
                "num_values_kept": 729,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter(lambda u1: Less(u1, 0), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter(lambda u1: Less(u1, 0), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 12.38856951892376,
            "num_unique_values": 1542,
            "solution": "Filter(lambda u1: (lambda v1: Greater(b, v1))(u1), Filter(lambda u1: (lambda v1: Greater(v1, a))(u1), x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 75.04504504504504,
                "explored_percent_lambda": 16.68168168168168,
                "explored_percent_none": 8.273273273273274,
                "kept_percent_concrete": 70.86871325930764,
                "kept_percent_lambda": 29.131286740692357,
                "num_examples": 3,
                "num_explored_concrete": 4998,
                "num_explored_lambda": 1111,
                "num_explored_none": 551,
                "num_inputs": 3,
                "num_kept_concrete": 1085,
                "num_kept_lambda": 446,
                "num_values_explored": 6660,
                "num_values_kept": 1531,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter(lambda u1: Less(u1, b), Filter(lambda u1: Greater(u1, a), x))'\n)",
            "task_solution": "Filter(lambda u1: Less(u1, b), Filter(lambda u1: Greater(u1, a), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0351736787707,
            "num_unique_values": 15250,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.63103185409423,
                "explored_percent_lambda": 21.323603932299584,
                "explored_percent_none": 5.045364213606179,
                "kept_percent_concrete": 64.80314960629921,
                "kept_percent_lambda": 35.196850393700785,
                "num_examples": 3,
                "num_explored_concrete": 167099,
                "num_explored_lambda": 48392,
                "num_explored_none": 11450,
                "num_inputs": 2,
                "num_kept_concrete": 9876,
                "num_kept_lambda": 5364,
                "num_values_explored": 226941,
                "num_values_kept": 15240,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter(lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n)), x)'\n)",
            "task_solution": "Filter(lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3555238470435,
            "num_unique_values": 15094,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.02403709997168,
                "explored_percent_lambda": 18.839829368450864,
                "explored_percent_none": 4.136133531577457,
                "kept_percent_concrete": 69.37814903208698,
                "kept_percent_lambda": 30.62185096791302,
                "num_examples": 3,
                "num_explored_concrete": 174062,
                "num_explored_lambda": 42575,
                "num_explored_none": 9347,
                "num_inputs": 2,
                "num_kept_concrete": 10465,
                "num_kept_lambda": 4619,
                "num_values_explored": 225984,
                "num_values_kept": 15084,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter(lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1)), x)'\n)",
            "task_solution": "Filter(lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3457148596644,
            "num_unique_values": 13980,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 81.12453686998917,
                "explored_percent_lambda": 15.943993170757466,
                "explored_percent_none": 2.9314699592533597,
                "kept_percent_concrete": 61.77081096557154,
                "kept_percent_lambda": 38.22918903442846,
                "num_examples": 3,
                "num_explored_concrete": 184362,
                "num_explored_lambda": 36234,
                "num_explored_none": 6662,
                "num_inputs": 1,
                "num_kept_concrete": 8630,
                "num_kept_lambda": 5341,
                "num_values_explored": 227258,
                "num_values_kept": 13971,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter(lambda u1: Equal(u1, Access(u1, x)), x))'\n)",
            "task_solution": "Sort(Filter(lambda u1: Equal(u1, Access(u1, x)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3546069525182,
            "num_unique_values": 15540,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.53789092742298,
                "explored_percent_lambda": 17.79901334149547,
                "explored_percent_none": 6.663095731081543,
                "kept_percent_concrete": 70.93824457466675,
                "kept_percent_lambda": 29.061755425333246,
                "num_examples": 3,
                "num_explored_concrete": 167818,
                "num_explored_lambda": 39543,
                "num_explored_none": 14803,
                "num_inputs": 3,
                "num_kept_concrete": 11016,
                "num_kept_lambda": 4513,
                "num_values_explored": 222164,
                "num_values_kept": 15529,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter(lambda u1: Equal(Access(u1, x), y), i)'\n)",
            "task_solution": "Filter(lambda u1: Equal(Access(u1, x), y), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3587653320283,
            "num_unique_values": 13648,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 92.10231516056758,
                "explored_percent_lambda": 2.2968958015391108,
                "explored_percent_none": 5.600789037893302,
                "kept_percent_concrete": 91.83897932248131,
                "kept_percent_lambda": 8.161020677518698,
                "num_examples": 5,
                "num_explored_concrete": 226918,
                "num_explored_lambda": 5659,
                "num_explored_none": 13799,
                "num_inputs": 2,
                "num_kept_concrete": 12525,
                "num_kept_lambda": 1113,
                "num_values_explored": 246376,
                "num_values_kept": 13638,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count(lambda u1: Equal(u1, n), x)'\n)",
            "task_solution": "Count(lambda u1: Equal(u1, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.639910163357854,
            "num_unique_values": 243,
            "solution": "Count(lambda u1: (lambda v1: Greater(q, v1))(u1), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 39.399293286219084,
                "explored_percent_lambda": 30.21201413427562,
                "explored_percent_none": 30.3886925795053,
                "kept_percent_concrete": 73.81974248927038,
                "kept_percent_lambda": 26.180257510729614,
                "num_examples": 5,
                "num_explored_concrete": 223,
                "num_explored_lambda": 171,
                "num_explored_none": 172,
                "num_inputs": 2,
                "num_kept_concrete": 172,
                "num_kept_lambda": 61,
                "num_values_explored": 566,
                "num_values_kept": 233,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count(lambda u1: Less(u1, q), x)'\n)",
            "task_solution": "Count(lambda u1: Less(u1, q), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 12.696054963395,
            "num_unique_values": 1789,
            "solution": "Count(lambda u1: (lambda v1: Less(v1, Head(x)))(u1), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 81.685360094451,
                "explored_percent_lambda": 11.717827626918536,
                "explored_percent_none": 6.596812278630461,
                "kept_percent_concrete": 80.78651685393258,
                "kept_percent_lambda": 19.213483146067414,
                "num_examples": 5,
                "num_explored_concrete": 5535,
                "num_explored_lambda": 794,
                "num_explored_none": 447,
                "num_inputs": 1,
                "num_kept_concrete": 1438,
                "num_kept_lambda": 342,
                "num_values_explored": 6776,
                "num_values_kept": 1780,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count(lambda u1: Less(u1, Head(x)), x)'\n)",
            "task_solution": "Count(lambda u1: Less(u1, Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 18.774369198828936,
            "num_unique_values": 2552,
            "solution": "Count(lambda u1: (lambda v1: Less(v1, 0))(u1), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 88.12690905507932,
                "explored_percent_lambda": 7.73475219233422,
                "explored_percent_none": 4.138338752586462,
                "kept_percent_concrete": 83.75933936295714,
                "kept_percent_lambda": 16.24066063704286,
                "num_examples": 5,
                "num_explored_concrete": 8944,
                "num_explored_lambda": 785,
                "num_explored_none": 420,
                "num_inputs": 1,
                "num_kept_concrete": 2130,
                "num_kept_lambda": 413,
                "num_values_explored": 10149,
                "num_values_kept": 2543,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count(lambda u1: Less(u1, 0), x)'\n)",
            "task_solution": "Count(lambda u1: Less(u1, 0), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 27.841216303408146,
            "num_unique_values": 2919,
            "solution": "Count(lambda u1: (lambda v1: Equal(v1, Last(x)))(u1), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 86.14320257925846,
                "explored_percent_lambda": 7.475819451907577,
                "explored_percent_none": 6.38097796883396,
                "kept_percent_concrete": 84.19243986254295,
                "kept_percent_lambda": 15.807560137457045,
                "num_examples": 5,
                "num_explored_concrete": 12825,
                "num_explored_lambda": 1113,
                "num_explored_none": 950,
                "num_inputs": 1,
                "num_kept_concrete": 2450,
                "num_kept_lambda": 460,
                "num_values_explored": 14888,
                "num_values_kept": 2910,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count(lambda u1: Equal(u1, Last(x)), x)'\n)",
            "task_solution": "Count(lambda u1: Equal(u1, Last(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0598008874804,
            "num_unique_values": 17678,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 91.05088850112176,
                "explored_percent_lambda": 2.354795057156084,
                "explored_percent_none": 6.594316441722161,
                "kept_percent_concrete": 92.92506225945212,
                "kept_percent_lambda": 7.074937740547883,
                "num_examples": 5,
                "num_explored_concrete": 204544,
                "num_explored_lambda": 5290,
                "num_explored_none": 14814,
                "num_inputs": 2,
                "num_kept_concrete": 16418,
                "num_kept_lambda": 1250,
                "num_values_explored": 224648,
                "num_values_kept": 17668,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count(lambda u1: Equal(u1, Access(i, x)), x)'\n)",
            "task_solution": "Count(lambda u1: Equal(u1, Access(i, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3312788456678,
            "num_unique_values": 17123,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 90.6794155275739,
                "explored_percent_lambda": 4.713487307252037,
                "explored_percent_none": 4.607097165174062,
                "kept_percent_concrete": 89.36543181021386,
                "kept_percent_lambda": 10.63456818978614,
                "num_examples": 5,
                "num_explored_concrete": 202002,
                "num_explored_lambda": 10500,
                "num_explored_none": 10263,
                "num_inputs": 1,
                "num_kept_concrete": 15294,
                "num_kept_lambda": 1820,
                "num_values_explored": 222765,
                "num_values_kept": 17114,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count(lambda u1: IsEven(Min(u1, 0)), x)'\n)",
            "task_solution": "Count(lambda u1: IsEven(Min(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.4166560433805,
            "num_unique_values": 19857,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 86.70365991941904,
                "explored_percent_lambda": 5.603995271297257,
                "explored_percent_none": 7.692344809283698,
                "kept_percent_concrete": 89.70121428931324,
                "kept_percent_lambda": 10.298785710686754,
                "num_examples": 5,
                "num_explored_concrete": 179689,
                "num_explored_lambda": 11614,
                "num_explored_none": 15942,
                "num_inputs": 2,
                "num_kept_concrete": 17803,
                "num_kept_lambda": 2044,
                "num_values_explored": 207245,
                "num_values_kept": 19847,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count(lambda u1: Equal(u1, 0), x), Count(lambda u1: Equal(u1, 0), y))'\n)",
            "task_solution": "Add(Count(lambda u1: Equal(u1, 0), x), Count(lambda u1: Equal(u1, 0), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.070325955748558,
            "num_unique_values": 706,
            "solution": "Take(Count(lambda u1: (lambda v1: Greater(v1, 0))(u1), r), Sort(c))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 61.91381495564005,
                "explored_percent_lambda": 33.90367553865653,
                "explored_percent_none": 4.182509505703422,
                "kept_percent_concrete": 57.04022988505747,
                "kept_percent_lambda": 42.95977011494253,
                "num_examples": 3,
                "num_explored_concrete": 977,
                "num_explored_lambda": 535,
                "num_explored_none": 66,
                "num_inputs": 2,
                "num_kept_concrete": 397,
                "num_kept_lambda": 299,
                "num_values_explored": 1578,
                "num_values_kept": 696,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count(lambda u1: Greater(u1, 0), r), Sort(c))'\n)",
            "task_solution": "Take(Count(lambda u1: Greater(u1, 0), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0282132755965,
            "num_unique_values": 17980,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 94.3923660334562,
                "explored_percent_lambda": 2.490608165579813,
                "explored_percent_none": 3.117025800963992,
                "kept_percent_concrete": 95.92654424040067,
                "kept_percent_lambda": 4.073455759599332,
                "num_examples": 5,
                "num_explored_concrete": 213070,
                "num_explored_lambda": 5622,
                "num_explored_none": 7036,
                "num_inputs": 2,
                "num_kept_concrete": 17238,
                "num_kept_lambda": 732,
                "num_values_explored": 225728,
                "num_values_kept": 17970,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith(lambda u1, u2: Add(Multiply(u1, 3), u2), w, t))'\n)",
            "task_solution": "Maximum(ZipWith(lambda u1, u2: Add(Multiply(u1, 3), u2), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3308586608618,
            "num_unique_values": 18430,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 90.75636234205375,
                "explored_percent_lambda": 3.143352909770422,
                "explored_percent_none": 6.100284748175832,
                "kept_percent_concrete": 96.25950054288816,
                "kept_percent_lambda": 3.740499457111835,
                "num_examples": 5,
                "num_explored_concrete": 203984,
                "num_explored_lambda": 7065,
                "num_explored_none": 13711,
                "num_inputs": 2,
                "num_kept_concrete": 17731,
                "num_kept_lambda": 689,
                "num_values_explored": 224760,
                "num_values_kept": 18420,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.8544172290712595,
            "num_unique_values": 252,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Min(v1, v2))(u1, u2), a, Reverse(a))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 28.09917355371901,
                "explored_percent_lambda": 59.50413223140496,
                "explored_percent_none": 12.396694214876034,
                "kept_percent_concrete": 39.50617283950617,
                "kept_percent_lambda": 60.49382716049383,
                "num_examples": 3,
                "num_explored_concrete": 136,
                "num_explored_lambda": 288,
                "num_explored_none": 60,
                "num_inputs": 1,
                "num_kept_concrete": 96,
                "num_kept_lambda": 147,
                "num_values_explored": 484,
                "num_values_kept": 243,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith(lambda u1, u2: Min(u1, u2), a, Reverse(a))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Min(u1, u2), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.039026806131,
            "num_unique_values": 18693,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 93.79299835513784,
                "explored_percent_lambda": 2.3911007130723965,
                "explored_percent_none": 3.8159009317897623,
                "kept_percent_concrete": 95.49322913878927,
                "kept_percent_lambda": 4.506770861210726,
                "num_examples": 5,
                "num_explored_concrete": 209270,
                "num_explored_lambda": 5335,
                "num_explored_none": 8514,
                "num_inputs": 2,
                "num_kept_concrete": 17841,
                "num_kept_lambda": 842,
                "num_values_explored": 223119,
                "num_values_kept": 18683,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith(lambda u1, u2: Add(u1, u2), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith(lambda u1, u2: Add(u1, u2), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3406888879836,
            "num_unique_values": 15239,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 93.67798511267462,
                "explored_percent_lambda": 3.9142959110839195,
                "explored_percent_none": 2.40771897624146,
                "kept_percent_concrete": 92.73145108338805,
                "kept_percent_lambda": 7.26854891661195,
                "num_examples": 5,
                "num_explored_concrete": 220488,
                "num_explored_lambda": 9213,
                "num_explored_none": 5667,
                "num_inputs": 1,
                "num_kept_concrete": 14123,
                "num_kept_lambda": 1107,
                "num_values_explored": 235368,
                "num_values_kept": 15230,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith(lambda u1, u2: Max(Subtract(u1, u2), 0), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Max(Subtract(u1, u2), 0), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.2810294050723,
            "num_unique_values": 19168,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 90.96362584793067,
                "explored_percent_lambda": 2.6295378021278406,
                "explored_percent_none": 6.406836349941491,
                "kept_percent_concrete": 96.33051466750183,
                "kept_percent_lambda": 3.669485332498173,
                "num_examples": 5,
                "num_explored_concrete": 202888,
                "num_explored_lambda": 5865,
                "num_explored_none": 14290,
                "num_inputs": 2,
                "num_kept_concrete": 18455,
                "num_kept_lambda": 703,
                "num_values_explored": 223043,
                "num_values_kept": 19158,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, y))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3591196928173,
            "num_unique_values": 12887,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.75627032916033,
                "explored_percent_lambda": 23.43885814523329,
                "explored_percent_none": 3.804871525606384,
                "kept_percent_concrete": 57.62211695270638,
                "kept_percent_lambda": 42.37788304729362,
                "num_examples": 3,
                "num_explored_concrete": 184985,
                "num_explored_lambda": 59594,
                "num_explored_none": 9674,
                "num_inputs": 2,
                "num_kept_concrete": 7420,
                "num_kept_lambda": 5457,
                "num_values_explored": 254253,
                "num_values_kept": 12877,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith(lambda u1, u2: IntDivide(Add(u1, u2), 2), x, y)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: IntDivide(Add(u1, u2), 2), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3640890531242,
            "num_unique_values": 12272,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.8750094164796,
                "explored_percent_lambda": 18.4886926913052,
                "explored_percent_none": 4.636297892215208,
                "kept_percent_concrete": 59.70964847891689,
                "kept_percent_lambda": 40.29035152108311,
                "num_examples": 3,
                "num_explored_concrete": 204097,
                "num_explored_lambda": 49086,
                "num_explored_none": 12309,
                "num_inputs": 3,
                "num_kept_concrete": 7321,
                "num_kept_lambda": 4940,
                "num_values_explored": 265492,
                "num_values_kept": 12261,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith(lambda u1, u2: Add(u1, u2), a, ZipWith(lambda u1, u2: Add(u1, u2), b, c))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Add(u1, u2), a, ZipWith(lambda u1, u2: Add(u1, u2), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3009553737938,
            "num_unique_values": 13367,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.01301588680602,
                "explored_percent_lambda": 21.371959767641147,
                "explored_percent_none": 2.6150243455528397,
                "kept_percent_concrete": 60.21561727932919,
                "kept_percent_lambda": 39.78438272067081,
                "num_examples": 3,
                "num_explored_concrete": 192487,
                "num_explored_lambda": 54120,
                "num_explored_none": 6622,
                "num_inputs": 2,
                "num_kept_concrete": 8043,
                "num_kept_lambda": 5314,
                "num_values_explored": 253229,
                "num_values_kept": 13357,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith(lambda u1, u2: IntDivide(u1, u2), m, n))'\n)",
            "task_solution": "Sort(ZipWith(lambda u1, u2: IntDivide(u1, u2), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.159772587940097,
            "num_unique_values": 259,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Subtract(v1, v2))(u2, u1), x, Drop(1, x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 26.3768115942029,
                "explored_percent_lambda": 52.608695652173914,
                "explored_percent_none": 21.014492753623188,
                "kept_percent_concrete": 48.4,
                "kept_percent_lambda": 51.6,
                "num_examples": 3,
                "num_explored_concrete": 182,
                "num_explored_lambda": 363,
                "num_explored_none": 145,
                "num_inputs": 1,
                "num_kept_concrete": 121,
                "num_kept_lambda": 129,
                "num_values_explored": 690,
                "num_values_kept": 250,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith(lambda u1, u2: Subtract(u2, u1), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Subtract(u2, u1), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0734042450786,
            "num_unique_values": 19193,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 88.1261487686095,
                "explored_percent_lambda": 4.413507506406272,
                "explored_percent_none": 7.460343724984236,
                "kept_percent_concrete": 93.39519366105405,
                "kept_percent_lambda": 6.6048063389459415,
                "num_examples": 5,
                "num_explored_concrete": 197058,
                "num_explored_lambda": 9869,
                "num_explored_none": 16682,
                "num_inputs": 2,
                "num_kept_concrete": 17916,
                "num_kept_lambda": 1267,
                "num_values_explored": 223609,
                "num_values_kept": 19183,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, m))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3580521419644,
            "num_unique_values": 14053,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.18424153831624,
                "explored_percent_lambda": 25.684592611450324,
                "explored_percent_none": 4.131165850233433,
                "kept_percent_concrete": 57.345296589047926,
                "kept_percent_lambda": 42.654703410952074,
                "num_examples": 3,
                "num_explored_concrete": 170926,
                "num_explored_lambda": 62552,
                "num_explored_none": 10061,
                "num_inputs": 2,
                "num_kept_concrete": 8053,
                "num_kept_lambda": 5990,
                "num_values_explored": 243539,
                "num_values_kept": 14043,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith(lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1)), x, y)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.350575864315,
            "num_unique_values": 16406,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 87.38692795157758,
                "explored_percent_lambda": 2.5089036400421354,
                "explored_percent_none": 10.10416840838029,
                "kept_percent_concrete": 96.72481092949499,
                "kept_percent_lambda": 3.275189070505001,
                "num_examples": 5,
                "num_explored_concrete": 209054,
                "num_explored_lambda": 6002,
                "num_explored_none": 24172,
                "num_inputs": 2,
                "num_kept_concrete": 15859,
                "num_kept_lambda": 537,
                "num_values_explored": 239228,
                "num_values_kept": 16396,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith(lambda u1, u2: Square(Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Square(Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3069094512612,
            "num_unique_values": 14054,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.25936146371649,
                "explored_percent_lambda": 22.615105447125917,
                "explored_percent_none": 8.125533089157594,
                "kept_percent_concrete": 52.178866419823414,
                "kept_percent_lambda": 47.821133580176586,
                "num_examples": 3,
                "num_explored_concrete": 165649,
                "num_explored_lambda": 54089,
                "num_explored_none": 19434,
                "num_inputs": 2,
                "num_kept_concrete": 7328,
                "num_kept_lambda": 6716,
                "num_values_explored": 239172,
                "num_values_kept": 14044,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith(lambda u1, u2: If(Equal(u1, u2), 1, 0), x, y)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: If(Equal(u1, u2), 1, 0), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3479670956731,
            "num_unique_values": 12750,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.93983142525819,
                "explored_percent_lambda": 18.215177952976518,
                "explored_percent_none": 2.8449906217652874,
                "kept_percent_concrete": 63.64207221350078,
                "kept_percent_lambda": 36.35792778649922,
                "num_examples": 3,
                "num_explored_concrete": 202858,
                "num_explored_lambda": 46809,
                "num_explored_none": 7311,
                "num_inputs": 2,
                "num_kept_concrete": 8108,
                "num_kept_lambda": 4632,
                "num_values_explored": 256978,
                "num_values_kept": 12740,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith(lambda u1, u2: Min(u1, u2), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Min(u1, u2), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3069814890623,
            "num_unique_values": 12359,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.32574597525142,
                "explored_percent_lambda": 22.61143069983032,
                "explored_percent_none": 4.062823324918264,
                "kept_percent_concrete": 56.963562753036435,
                "kept_percent_lambda": 43.036437246963565,
                "num_examples": 3,
                "num_explored_concrete": 177177,
                "num_explored_lambda": 54636,
                "num_explored_none": 9817,
                "num_inputs": 1,
                "num_kept_concrete": 7035,
                "num_kept_lambda": 5315,
                "num_values_explored": 241630,
                "num_values_kept": 12350,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith(lambda u1, u2: Add(u1, u2), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Add(u1, u2), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3291843477637,
            "num_unique_values": 19196,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 92.69150599270453,
                "explored_percent_lambda": 2.642745477555274,
                "explored_percent_none": 4.665748529740192,
                "kept_percent_concrete": 96.21097618178975,
                "kept_percent_lambda": 3.7890238182102465,
                "num_examples": 5,
                "num_explored_concrete": 199220,
                "num_explored_lambda": 5680,
                "num_explored_none": 10028,
                "num_inputs": 1,
                "num_kept_concrete": 18460,
                "num_kept_lambda": 727,
                "num_values_explored": 214928,
                "num_values_kept": 19187,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.364960251376,
            "num_unique_values": 12772,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.78795694738464,
                "explored_percent_lambda": 24.71429382517783,
                "explored_percent_none": 2.497749227437526,
                "kept_percent_concrete": 55.257796583607586,
                "kept_percent_lambda": 44.742203416392414,
                "num_examples": 3,
                "num_explored_concrete": 179482,
                "num_explored_lambda": 60941,
                "num_explored_none": 6159,
                "num_inputs": 2,
                "num_kept_concrete": 7052,
                "num_kept_lambda": 5710,
                "num_values_explored": 246582,
                "num_values_kept": 12762,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith(lambda u1, u2: Multiply(u1, Add(1, u2)), p, w)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Multiply(u1, Add(1, u2)), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3354068957269,
            "num_unique_values": 17553,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 93.99842063700974,
                "explored_percent_lambda": 3.395630429060279,
                "explored_percent_none": 2.6059489339299815,
                "kept_percent_concrete": 92.41336069311446,
                "kept_percent_lambda": 7.586639306885545,
                "num_examples": 5,
                "num_explored_concrete": 210689,
                "num_explored_lambda": 7611,
                "num_explored_none": 5841,
                "num_inputs": 1,
                "num_kept_concrete": 16213,
                "num_kept_lambda": 1331,
                "num_values_explored": 224141,
                "num_values_kept": 17544,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1(lambda u1, u2: Min(u1, u2), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1(lambda u1, u2: Min(u1, u2), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3361010290682,
            "num_unique_values": 13018,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.47586800668907,
                "explored_percent_lambda": 23.389406758613838,
                "explored_percent_none": 4.134725234697088,
                "kept_percent_concrete": 53.46298716273349,
                "kept_percent_lambda": 46.53701283726651,
                "num_examples": 3,
                "num_explored_concrete": 175093,
                "num_explored_lambda": 56506,
                "num_explored_none": 9989,
                "num_inputs": 1,
                "num_kept_concrete": 6955,
                "num_kept_lambda": 6054,
                "num_values_explored": 241588,
                "num_values_kept": 13009,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1(lambda u1, u2: Max(u1, u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Max(u1, u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 10.52750140056014,
            "num_unique_values": 1622,
            "solution": "Subtract(Sum(x), Minimum(Map(lambda u1: (lambda v1: Sum((lambda v1: Drop(v1, x))(v1)))(u1), x)))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 84.72402899089388,
                "explored_percent_lambda": 12.116706931797063,
                "explored_percent_none": 3.1592640773090506,
                "kept_percent_concrete": 80.47117172969622,
                "kept_percent_lambda": 19.52882827030378,
                "num_examples": 5,
                "num_explored_concrete": 4559,
                "num_explored_lambda": 652,
                "num_explored_none": 170,
                "num_inputs": 1,
                "num_kept_concrete": 1298,
                "num_kept_lambda": 315,
                "num_values_explored": 5381,
                "num_values_kept": 1613,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1(lambda u1, u2: Add(u1, u2), x))'\n)",
            "task_solution": "Maximum(Scanl1(lambda u1, u2: Add(u1, u2), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0916862990707,
            "num_unique_values": 12551,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.47163423298116,
                "explored_percent_lambda": 28.25374483094644,
                "explored_percent_none": 5.2746209360723935,
                "kept_percent_concrete": 51.7859990432148,
                "kept_percent_lambda": 48.2140009567852,
                "num_examples": 3,
                "num_explored_concrete": 159619,
                "num_explored_lambda": 67846,
                "num_explored_none": 12666,
                "num_inputs": 1,
                "num_kept_concrete": 6495,
                "num_kept_lambda": 6047,
                "num_values_explored": 240131,
                "num_values_kept": 12542,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1(lambda u1, u2: Add(u1, u2), Reverse(x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(u1, u2), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3274189308286,
            "num_unique_values": 14704,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.57700347264402,
                "explored_percent_lambda": 22.360643926224117,
                "explored_percent_none": 5.062352601131856,
                "kept_percent_concrete": 57.99251446070092,
                "kept_percent_lambda": 42.00748553929908,
                "num_examples": 3,
                "num_explored_concrete": 173258,
                "num_explored_lambda": 53380,
                "num_explored_none": 12085,
                "num_inputs": 1,
                "num_kept_concrete": 8522,
                "num_kept_lambda": 6173,
                "num_values_explored": 238723,
                "num_values_kept": 14695,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1(lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2)), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3633389379829,
            "num_unique_values": 14998,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.51057328449724,
                "explored_percent_lambda": 17.643725843333264,
                "explored_percent_none": 4.8457008721694965,
                "kept_percent_concrete": 66.9669068588204,
                "kept_percent_lambda": 33.03309314117961,
                "num_examples": 3,
                "num_explored_concrete": 191517,
                "num_explored_lambda": 43595,
                "num_explored_none": 11973,
                "num_inputs": 2,
                "num_kept_concrete": 10037,
                "num_kept_lambda": 4951,
                "num_values_explored": 247085,
                "num_values_kept": 14988,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1(lambda u1, u2: Add(Add(u1, u2), n), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(Add(u1, u2), n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.371970390901,
            "num_unique_values": 12747,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.53169832624867,
                "explored_percent_lambda": 24.422572396386823,
                "explored_percent_none": 4.045729277364506,
                "kept_percent_concrete": 50.49458313707019,
                "kept_percent_lambda": 49.50541686292981,
                "num_examples": 3,
                "num_explored_concrete": 172317,
                "num_explored_lambda": 58833,
                "num_explored_none": 9746,
                "num_inputs": 1,
                "num_kept_concrete": 6432,
                "num_kept_lambda": 6306,
                "num_values_explored": 240896,
                "num_values_kept": 12738,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1(lambda u1, u2: Add(IntDivide(u1, 2), u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(IntDivide(u1, 2), u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3526777494699,
            "num_unique_values": 12030,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.72207390642558,
                "explored_percent_lambda": 22.699090713483102,
                "explored_percent_none": 2.578835380091327,
                "kept_percent_concrete": 56.123128119800334,
                "kept_percent_lambda": 43.876871880199666,
                "num_examples": 3,
                "num_explored_concrete": 187527,
                "num_explored_lambda": 56967,
                "num_explored_none": 6472,
                "num_inputs": 2,
                "num_kept_concrete": 6746,
                "num_kept_lambda": 5274,
                "num_values_explored": 250966,
                "num_values_kept": 12020,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1(lambda u1, u2: Multiply(u1, u2), Take(n, x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Multiply(u1, u2), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3288605157286,
            "num_unique_values": 17751,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 88.73692240627724,
                "explored_percent_lambda": 4.385534728276664,
                "explored_percent_none": 6.877542865446091,
                "kept_percent_concrete": 96.7083756059069,
                "kept_percent_lambda": 3.2916243940931125,
                "num_examples": 5,
                "num_explored_concrete": 195420,
                "num_explored_lambda": 9658,
                "num_explored_none": 15146,
                "num_inputs": 1,
                "num_kept_concrete": 17158,
                "num_kept_lambda": 584,
                "num_values_explored": 220224,
                "num_values_kept": 17742,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1(lambda u1, u2: Multiply(u1, u2), x))'\n)",
            "task_solution": "Last(Scanl1(lambda u1, u2: Multiply(u1, u2), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3330914657563,
            "num_unique_values": 10846,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.86031606396682,
                "explored_percent_lambda": 22.770900750887556,
                "explored_percent_none": 3.368783185145622,
                "kept_percent_concrete": 42.95469225800498,
                "kept_percent_lambda": 57.04530774199502,
                "num_examples": 3,
                "num_explored_concrete": 188072,
                "num_explored_lambda": 57982,
                "num_explored_none": 8578,
                "num_inputs": 1,
                "num_kept_concrete": 4655,
                "num_kept_lambda": 6182,
                "num_values_explored": 254632,
                "num_values_kept": 10837,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1(lambda u1, u2: Min(u1, u2), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Min(u1, u2), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3214733954519,
            "num_unique_values": 12993,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.67832998054283,
                "explored_percent_lambda": 22.334943772054217,
                "explored_percent_none": 4.986726247402961,
                "kept_percent_concrete": 58.99568699938386,
                "kept_percent_lambda": 41.00431300061614,
                "num_examples": 3,
                "num_explored_concrete": 176306,
                "num_explored_lambda": 54181,
                "num_explored_none": 12097,
                "num_inputs": 1,
                "num_kept_concrete": 7660,
                "num_kept_lambda": 5324,
                "num_values_explored": 242584,
                "num_values_kept": 12984,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1(lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3415157776326,
            "num_unique_values": 13683,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.3126798982889,
                "explored_percent_lambda": 33.298769915197724,
                "explored_percent_none": 4.388550186513383,
                "kept_percent_concrete": 44.81497732923797,
                "kept_percent_lambda": 55.18502267076203,
                "num_examples": 3,
                "num_explored_concrete": 144829,
                "num_explored_lambda": 77394,
                "num_explored_none": 10200,
                "num_inputs": 1,
                "num_kept_concrete": 6128,
                "num_kept_lambda": 7546,
                "num_values_explored": 232423,
                "num_values_kept": 13674,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1(lambda u1, u2: Access(u1, x), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Access(u1, x), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3899239972234,
            "num_unique_values": 12985,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.33967606345117,
                "explored_percent_lambda": 16.745602837725524,
                "explored_percent_none": 4.914721098823314,
                "kept_percent_concrete": 59.2093094944513,
                "kept_percent_lambda": 40.7906905055487,
                "num_examples": 3,
                "num_explored_concrete": 197000,
                "num_explored_lambda": 42110,
                "num_explored_none": 12359,
                "num_inputs": 1,
                "num_kept_concrete": 7683,
                "num_kept_lambda": 5293,
                "num_values_explored": 251469,
                "num_values_kept": 12976,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1(lambda u1, u2: Max(Add(u1, 1), u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Max(Add(u1, 1), u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3623976986855,
            "num_unique_values": 14484,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.47419162470183,
                "explored_percent_lambda": 25.453882851842035,
                "explored_percent_none": 6.071925523456136,
                "kept_percent_concrete": 54.58376511226252,
                "kept_percent_lambda": 45.41623488773748,
                "num_examples": 3,
                "num_explored_concrete": 165346,
                "num_explored_lambda": 61464,
                "num_explored_none": 14662,
                "num_inputs": 1,
                "num_kept_concrete": 7901,
                "num_kept_lambda": 6574,
                "num_values_explored": 241472,
                "num_values_kept": 14475,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1(lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3972892537713,
            "num_unique_values": 17772,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 90.65262252794497,
                "explored_percent_lambda": 5.282459157351677,
                "explored_percent_none": 4.064918314703354,
                "kept_percent_concrete": 87.03974777615133,
                "kept_percent_lambda": 12.960252223848666,
                "num_examples": 5,
                "num_explored_concrete": 210858,
                "num_explored_lambda": 12287,
                "num_explored_none": 9455,
                "num_inputs": 2,
                "num_kept_concrete": 15460,
                "num_kept_lambda": 2302,
                "num_values_explored": 232600,
                "num_values_kept": 17762,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count(lambda u1: Greater(u1, 0), ZipWith(lambda u1, u2: Subtract(u1, u2), a, b))'\n)",
            "task_solution": "Count(lambda u1: Greater(u1, 0), ZipWith(lambda u1, u2: Subtract(u1, u2), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.6803736332804,
            "num_unique_values": 18021,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 91.07238743000332,
                "explored_percent_lambda": 3.6402533091274814,
                "explored_percent_none": 5.287359260869195,
                "kept_percent_concrete": 95.4971961579035,
                "kept_percent_lambda": 4.502803842096497,
                "num_examples": 5,
                "num_explored_concrete": 213705,
                "num_explored_lambda": 8542,
                "num_explored_none": 12407,
                "num_inputs": 2,
                "num_kept_concrete": 17200,
                "num_kept_lambda": 811,
                "num_values_explored": 234654,
                "num_values_kept": 18011,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), s, Scanl1(lambda u1, u2: Add(u1, u2), p)))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), s, Scanl1(lambda u1, u2: Add(u1, u2), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.2662585116922855,
            "num_unique_values": 257,
            "solution": "Scanl1(lambda u1, u2: (lambda v1: Add(1, v1))(u1), Map(lambda u1: 0, x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 26.436781609195403,
                "explored_percent_lambda": 52.01149425287356,
                "explored_percent_none": 21.551724137931036,
                "kept_percent_concrete": 45.564516129032256,
                "kept_percent_lambda": 54.435483870967744,
                "num_examples": 3,
                "num_explored_concrete": 184,
                "num_explored_lambda": 362,
                "num_explored_none": 150,
                "num_inputs": 1,
                "num_kept_concrete": 113,
                "num_kept_lambda": 135,
                "num_values_explored": 696,
                "num_values_kept": 248,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1(lambda u1, u2: Add(u1, 1), Map(lambda u1: 0, x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(u1, 1), Map(lambda u1: 0, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0156295485795,
            "num_unique_values": 16918,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.77010925808904,
                "explored_percent_lambda": 22.376386332206867,
                "explored_percent_none": 5.8535044097040965,
                "kept_percent_concrete": 65.26110355432019,
                "kept_percent_lambda": 34.73889644567981,
                "num_examples": 3,
                "num_explored_concrete": 156733,
                "num_explored_lambda": 48866,
                "num_explored_none": 12783,
                "num_inputs": 1,
                "num_kept_concrete": 11035,
                "num_kept_lambda": 5874,
                "num_values_explored": 218382,
                "num_values_kept": 16909,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter(lambda u1: IsOdd(u1), ZipWith(lambda u1, u2: Multiply(u2, u1), x, Drop(1, x)))'\n)",
            "task_solution": "Filter(lambda u1: IsOdd(u1), ZipWith(lambda u1, u2: Multiply(u2, u1), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3899888806045,
            "num_unique_values": 14804,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.08679785147048,
                "explored_percent_lambda": 18.571759001464905,
                "explored_percent_none": 3.3414431470646186,
                "kept_percent_concrete": 62.72389320716458,
                "kept_percent_lambda": 37.27610679283542,
                "num_examples": 3,
                "num_explored_concrete": 182303,
                "num_explored_lambda": 43358,
                "num_explored_none": 7801,
                "num_inputs": 1,
                "num_kept_concrete": 9280,
                "num_kept_lambda": 5515,
                "num_values_explored": 233462,
                "num_values_kept": 14795,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1(lambda u1, u2: Multiply(u1, u2), Filter(lambda u1: IsOdd(u1), x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Multiply(u1, u2), Filter(lambda u1: IsOdd(u1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.363088587299,
            "num_unique_values": 13688,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.30691767798878,
                "explored_percent_lambda": 20.80232858383606,
                "explored_percent_none": 3.8907537381751602,
                "kept_percent_concrete": 63.4888141541161,
                "kept_percent_lambda": 36.5111858458839,
                "num_examples": 3,
                "num_explored_concrete": 192489,
                "num_explored_lambda": 53172,
                "num_explored_none": 9945,
                "num_inputs": 2,
                "num_kept_concrete": 8684,
                "num_kept_lambda": 4994,
                "num_values_explored": 255606,
                "num_values_kept": 13678,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1(lambda u1, u2: Add(u1, u2), ZipWith(lambda u1, u2: Add(u1, u2), x, y))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(u1, u2), ZipWith(lambda u1, u2: Add(u1, u2), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3190034795552,
            "num_unique_values": 12722,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.44293028628516,
                "explored_percent_lambda": 20.74903999250726,
                "explored_percent_none": 3.80802972120758,
                "kept_percent_concrete": 63.13429313193297,
                "kept_percent_lambda": 36.86570686806703,
                "num_examples": 3,
                "num_explored_concrete": 193321,
                "num_explored_lambda": 53169,
                "num_explored_none": 9758,
                "num_inputs": 3,
                "num_kept_concrete": 8025,
                "num_kept_lambda": 4686,
                "num_values_explored": 256248,
                "num_values_kept": 12711,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith(lambda u1, u2: Add(u1, u2), x, Map(lambda u1: Access(u1, y), i))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Add(u1, u2), x, Map(lambda u1: Access(u1, y), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3353300448507,
            "num_unique_values": 16555,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.6088945454216,
                "explored_percent_lambda": 23.321119449967615,
                "explored_percent_none": 4.0699860046107785,
                "kept_percent_concrete": 71.50800846177093,
                "kept_percent_lambda": 28.491991538229072,
                "num_examples": 3,
                "num_explored_concrete": 160311,
                "num_explored_lambda": 51490,
                "num_explored_none": 8986,
                "num_inputs": 2,
                "num_kept_concrete": 11831,
                "num_kept_lambda": 4714,
                "num_values_explored": 220787,
                "num_values_kept": 16545,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter(lambda u1: Greater(u1, -1), ZipWith(lambda u1, u2: Subtract(u1, u2), x, y))'\n)",
            "task_solution": "Filter(lambda u1: Greater(u1, -1), ZipWith(lambda u1, u2: Subtract(u1, u2), x, y))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.43
}