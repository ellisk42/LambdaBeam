{
    "num_tasks": 100,
    "num_tasks_solved": 68,
    "results": [
        {
            "elapsed_time": 26.209970271214843,
            "num_unique_values": 492,
            "solution": "Sum(Reverse(Take(k, Sort(b))))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 57.259713701431494,
                "explored_percent_lambda": 25.664621676891617,
                "explored_percent_none": 17.075664621676893,
                "kept_percent_concrete": 74.89626556016597,
                "kept_percent_lambda": 25.103734439834025,
                "num_examples": 5,
                "num_explored_concrete": 560,
                "num_explored_lambda": 251,
                "num_explored_none": 167,
                "num_inputs": 2,
                "num_kept_concrete": 361,
                "num_kept_lambda": 121,
                "num_values_explored": 978,
                "num_values_kept": 482,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 12921
            },
            "success": true,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 16.230841986835003,
            "num_unique_values": 221,
            "solution": "If(IsEven(x), IntDivide(x, 2), Subtract(Multiply(x, 3), -1))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 37.97770700636943,
                "explored_percent_lambda": 9.992038216560509,
                "explored_percent_none": 52.03025477707006,
                "kept_percent_concrete": 84.90566037735849,
                "kept_percent_lambda": 15.09433962264151,
                "num_examples": 5,
                "num_explored_concrete": 954,
                "num_explored_lambda": 251,
                "num_explored_none": 1307,
                "num_inputs": 1,
                "num_kept_concrete": 180,
                "num_kept_lambda": 32,
                "num_values_explored": 2512,
                "num_values_kept": 212,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 9819
            },
            "success": true,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 159.352341927588,
            "num_unique_values": 152,
            "solution": "Subtract(Multiply(y, Subtract(x, 1)), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 22.78031456113648,
                "explored_percent_lambda": 9.284627092846272,
                "explored_percent_none": 67.93505834601724,
                "kept_percent_concrete": 90.84507042253522,
                "kept_percent_lambda": 9.154929577464788,
                "num_examples": 5,
                "num_explored_concrete": 449,
                "num_explored_lambda": 183,
                "num_explored_none": 1339,
                "num_inputs": 2,
                "num_kept_concrete": 129,
                "num_kept_lambda": 13,
                "num_values_explored": 1971,
                "num_values_kept": 142,
                "temperature": 1.0,
                "total_num_restarts": 27,
                "total_num_values_explored": 100735
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 9.062774661928415,
            "num_unique_values": 155,
            "solution": "Multiply(k, IntDivide(Add(x, k), k))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 21.09617373319545,
                "explored_percent_lambda": 8.479834539813858,
                "explored_percent_none": 70.42399172699069,
                "kept_percent_concrete": 91.03448275862068,
                "kept_percent_lambda": 8.96551724137931,
                "num_examples": 5,
                "num_explored_concrete": 408,
                "num_explored_lambda": 164,
                "num_explored_none": 1362,
                "num_inputs": 2,
                "num_kept_concrete": 132,
                "num_kept_lambda": 13,
                "num_values_explored": 1934,
                "num_values_kept": 145,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5733
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.432923449203372,
            "num_unique_values": 419,
            "solution": "Take(-1, Take(Subtract(1, n), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 50.617283950617285,
                "explored_percent_lambda": 32.98059964726632,
                "explored_percent_none": 16.402116402116402,
                "kept_percent_concrete": 56.72371638141809,
                "kept_percent_lambda": 43.27628361858191,
                "num_examples": 3,
                "num_explored_concrete": 574,
                "num_explored_lambda": 374,
                "num_explored_none": 186,
                "num_inputs": 2,
                "num_kept_concrete": 232,
                "num_kept_lambda": 177,
                "num_values_explored": 1134,
                "num_values_kept": 409,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1134
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.5228940434753895,
            "num_unique_values": 468,
            "solution": "Reverse(Sort(Drop(Multiply(n, -1), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 48.772504091653026,
                "explored_percent_lambda": 34.779050736497545,
                "explored_percent_none": 16.44844517184943,
                "kept_percent_concrete": 57.64192139737991,
                "kept_percent_lambda": 42.35807860262009,
                "num_examples": 3,
                "num_explored_concrete": 596,
                "num_explored_lambda": 425,
                "num_explored_none": 201,
                "num_inputs": 2,
                "num_kept_concrete": 264,
                "num_kept_lambda": 194,
                "num_values_explored": 1222,
                "num_values_kept": 458,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1222
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.0221585780382156,
            "num_unique_values": 155,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 10.30640668523677,
                "explored_percent_lambda": 72.70194986072423,
                "explored_percent_none": 16.991643454038996,
                "kept_percent_concrete": 17.80821917808219,
                "kept_percent_lambda": 82.1917808219178,
                "num_examples": 3,
                "num_explored_concrete": 37,
                "num_explored_lambda": 261,
                "num_explored_none": 61,
                "num_inputs": 1,
                "num_kept_concrete": 26,
                "num_kept_lambda": 120,
                "num_values_explored": 359,
                "num_values_kept": 146,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 359
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.8950663451105356,
            "num_unique_values": 156,
            "solution": "Drop(i, Take(j, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 23.94736842105263,
                "explored_percent_lambda": 53.421052631578945,
                "explored_percent_none": 22.63157894736842,
                "kept_percent_concrete": 37.241379310344826,
                "kept_percent_lambda": 62.758620689655174,
                "num_examples": 3,
                "num_explored_concrete": 91,
                "num_explored_lambda": 203,
                "num_explored_none": 86,
                "num_inputs": 3,
                "num_kept_concrete": 54,
                "num_kept_lambda": 91,
                "num_values_explored": 380,
                "num_values_kept": 145,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 380
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.1499877851456404,
            "num_unique_values": 535,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Max(4, v1))(u1), Reverse(Sort(x)), Take(k, x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 55.06849315068493,
                "explored_percent_lambda": 32.945205479452056,
                "explored_percent_none": 11.986301369863014,
                "kept_percent_concrete": 63.42857142857143,
                "kept_percent_lambda": 36.57142857142857,
                "num_examples": 3,
                "num_explored_concrete": 804,
                "num_explored_lambda": 481,
                "num_explored_none": 175,
                "num_inputs": 2,
                "num_kept_concrete": 333,
                "num_kept_lambda": 192,
                "num_values_explored": 1460,
                "num_values_kept": 525,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1460
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.5392570532858372,
            "num_unique_values": 332,
            "solution": "Max(Access(Min(k, 4), x), Multiply(3, Subtract(3, k)))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 43.54838709677419,
                "explored_percent_lambda": 30.205278592375368,
                "explored_percent_none": 26.24633431085044,
                "kept_percent_concrete": 73.2919254658385,
                "kept_percent_lambda": 26.70807453416149,
                "num_examples": 5,
                "num_explored_concrete": 297,
                "num_explored_lambda": 206,
                "num_explored_none": 179,
                "num_inputs": 2,
                "num_kept_concrete": 236,
                "num_kept_lambda": 86,
                "num_values_explored": 682,
                "num_values_kept": 322,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 682
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 76.72396572120488,
            "num_unique_values": 854,
            "solution": "IntDivide(Head(Map(lambda u1: (lambda v1: Add(v1, Last(x)))(u1), x)), 2)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 65.03038803179055,
                "explored_percent_lambda": 23.51566152407667,
                "explored_percent_none": 11.453950444132772,
                "kept_percent_concrete": 77.98816568047337,
                "kept_percent_lambda": 22.011834319526628,
                "num_examples": 5,
                "num_explored_concrete": 1391,
                "num_explored_lambda": 503,
                "num_explored_none": 245,
                "num_inputs": 1,
                "num_kept_concrete": 659,
                "num_kept_lambda": 186,
                "num_values_explored": 2139,
                "num_values_kept": 845,
                "temperature": 1.0,
                "total_num_restarts": 13,
                "total_num_values_explored": 38695
            },
            "success": true,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.2151408828794956,
            "num_unique_values": 330,
            "solution": "Max(Minimum(Drop(1, x)), Minimum(Take(-1, x)))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 29.02137232845894,
                "explored_percent_lambda": 45.219347581552306,
                "explored_percent_none": 25.759280089988753,
                "kept_percent_concrete": 49.532710280373834,
                "kept_percent_lambda": 50.467289719626166,
                "num_examples": 5,
                "num_explored_concrete": 258,
                "num_explored_lambda": 402,
                "num_explored_none": 229,
                "num_inputs": 1,
                "num_kept_concrete": 159,
                "num_kept_lambda": 162,
                "num_values_explored": 889,
                "num_values_kept": 321,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 889
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.842301417142153,
            "num_unique_values": 853,
            "solution": "Multiply(Minimum(Map(lambda u1: (lambda v1: Subtract(Minimum(x), v1))(u1), x)), -1)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 72.78003482298317,
                "explored_percent_lambda": 21.822402785838655,
                "explored_percent_none": 5.397562391178178,
                "kept_percent_concrete": 76.65876777251185,
                "kept_percent_lambda": 23.341232227488153,
                "num_examples": 5,
                "num_explored_concrete": 1254,
                "num_explored_lambda": 376,
                "num_explored_none": 93,
                "num_inputs": 1,
                "num_kept_concrete": 647,
                "num_kept_lambda": 197,
                "num_values_explored": 1723,
                "num_values_kept": 844,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1723
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.545599302277,
            "num_unique_values": 1073,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.47826086956522,
                "explored_percent_lambda": 18.0306905370844,
                "explored_percent_none": 13.491048593350383,
                "kept_percent_concrete": 76.38758231420508,
                "kept_percent_lambda": 23.61241768579492,
                "num_examples": 5,
                "num_explored_concrete": 2142,
                "num_explored_lambda": 564,
                "num_explored_none": 422,
                "num_inputs": 2,
                "num_kept_concrete": 812,
                "num_kept_lambda": 251,
                "num_values_explored": 3128,
                "num_values_kept": 1063,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 309165
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.385336369276,
            "num_unique_values": 953,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.222366710013,
                "explored_percent_lambda": 18.270481144343304,
                "explored_percent_none": 15.507152145643692,
                "kept_percent_concrete": 74.76139978791092,
                "kept_percent_lambda": 25.23860021208908,
                "num_examples": 5,
                "num_explored_concrete": 2037,
                "num_explored_lambda": 562,
                "num_explored_none": 477,
                "num_inputs": 2,
                "num_kept_concrete": 705,
                "num_kept_lambda": 238,
                "num_values_explored": 3076,
                "num_values_kept": 943,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 311072
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.7306005954742432,
            "num_unique_values": 254,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), x, Map(lambda u1: (lambda v1: Square(v1))(u1), x))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 19.94047619047619,
                "explored_percent_lambda": 58.035714285714285,
                "explored_percent_none": 22.023809523809526,
                "kept_percent_concrete": 38.775510204081634,
                "kept_percent_lambda": 61.224489795918366,
                "num_examples": 3,
                "num_explored_concrete": 134,
                "num_explored_lambda": 390,
                "num_explored_none": 148,
                "num_inputs": 1,
                "num_kept_concrete": 95,
                "num_kept_lambda": 150,
                "num_values_explored": 672,
                "num_values_kept": 245,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 672
            },
            "success": true,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map(lambda u1: Multiply(u1, Square(u1)), x)'\n)",
            "task_solution": "Map(lambda u1: Multiply(u1, Square(u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 109.89589451998472,
            "num_unique_values": 214,
            "solution": "Map(lambda u1: (lambda v1: Max(v1, (lambda v1: Multiply(-1, v1))(v1)))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 22.171253822629968,
                "explored_percent_lambda": 53.97553516819572,
                "explored_percent_none": 23.853211009174313,
                "kept_percent_concrete": 40.97560975609756,
                "kept_percent_lambda": 59.02439024390244,
                "num_examples": 3,
                "num_explored_concrete": 145,
                "num_explored_lambda": 353,
                "num_explored_none": 156,
                "num_inputs": 1,
                "num_kept_concrete": 84,
                "num_kept_lambda": 121,
                "num_values_explored": 654,
                "num_values_kept": 205,
                "temperature": 1.0,
                "total_num_restarts": 19,
                "total_num_values_explored": 54883
            },
            "success": true,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map(lambda u1: Max(u1, Subtract(0, u1)), x)'\n)",
            "task_solution": "Map(lambda u1: Max(u1, Subtract(0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.2074997797608376,
            "num_unique_values": 799,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Subtract((lambda v1: Square(v1))(v2), v1))(u2, u1), x, x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 59.052589321557605,
                "explored_percent_lambda": 32.958651144118825,
                "explored_percent_none": 7.988759534323565,
                "kept_percent_concrete": 47.59493670886076,
                "kept_percent_lambda": 52.40506329113924,
                "num_examples": 3,
                "num_explored_concrete": 1471,
                "num_explored_lambda": 821,
                "num_explored_none": 199,
                "num_inputs": 1,
                "num_kept_concrete": 376,
                "num_kept_lambda": 414,
                "num_values_explored": 2491,
                "num_values_kept": 790,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 2491
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map(lambda u1: Subtract(Square(u1), u1), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(Square(u1), u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 155.21340480074286,
            "num_unique_values": 768,
            "solution": "Map(lambda u1: (lambda v1: IntDivide((lambda v1: Add(v1, (lambda v1: Square(v1))(v1)))(v1), 2))(u1), x)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 65.53846153846153,
                "explored_percent_lambda": 29.406593406593405,
                "explored_percent_none": 5.054945054945055,
                "kept_percent_concrete": 49.670619235836625,
                "kept_percent_lambda": 50.329380764163375,
                "num_examples": 3,
                "num_explored_concrete": 1491,
                "num_explored_lambda": 669,
                "num_explored_none": 115,
                "num_inputs": 1,
                "num_kept_concrete": 377,
                "num_kept_lambda": 382,
                "num_values_explored": 2275,
                "num_values_kept": 759,
                "temperature": 1.0,
                "total_num_restarts": 26,
                "total_num_values_explored": 72740
            },
            "success": true,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map(lambda u1: IntDivide(Add(Square(u1), u1), 2), x)'\n)",
            "task_solution": "Map(lambda u1: IntDivide(Add(Square(u1), u1), 2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 14.968787929043174,
            "num_unique_values": 495,
            "solution": "Map(lambda u1: (lambda v1: Add(b, (lambda v1: Multiply(a, v1))(v1)))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 61.41338336460288,
                "explored_percent_lambda": 22.013758599124454,
                "explored_percent_none": 16.57285803627267,
                "kept_percent_concrete": 66.73553719008264,
                "kept_percent_lambda": 33.264462809917354,
                "num_examples": 3,
                "num_explored_concrete": 982,
                "num_explored_lambda": 352,
                "num_explored_none": 265,
                "num_inputs": 3,
                "num_kept_concrete": 323,
                "num_kept_lambda": 161,
                "num_values_explored": 1599,
                "num_values_kept": 484,
                "temperature": 1.0,
                "total_num_restarts": 3,
                "total_num_values_explored": 8050
            },
            "success": true,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map(lambda u1: Add(Multiply(a, u1), b), x)'\n)",
            "task_solution": "Map(lambda u1: Add(Multiply(a, u1), b), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 286.121326347813,
            "num_unique_values": 503,
            "solution": "Map(lambda u1: (lambda v1: Subtract((lambda v1: Multiply(3, v1))(v1), 4))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 50.65113091158327,
                "explored_percent_lambda": 35.915010281014396,
                "explored_percent_none": 13.43385880740233,
                "kept_percent_concrete": 51.012145748987855,
                "kept_percent_lambda": 48.987854251012145,
                "num_examples": 3,
                "num_explored_concrete": 739,
                "num_explored_lambda": 524,
                "num_explored_none": 196,
                "num_inputs": 1,
                "num_kept_concrete": 252,
                "num_kept_lambda": 242,
                "num_values_explored": 1459,
                "num_values_kept": 494,
                "temperature": 1.0,
                "total_num_restarts": 48,
                "total_num_values_explored": 140067
            },
            "success": true,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map(lambda u1: Subtract(Multiply(u1, 3), 4), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(Multiply(u1, 3), 4), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 38.99647316895425,
            "num_unique_values": 532,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Multiply(v1, (lambda v1: Add(2, v1))(v2)))(u1, u2), x, x)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 51.9134775374376,
                "explored_percent_lambda": 39.43427620632279,
                "explored_percent_none": 8.6522462562396,
                "kept_percent_concrete": 45.31548757170172,
                "kept_percent_lambda": 54.68451242829828,
                "num_examples": 3,
                "num_explored_concrete": 624,
                "num_explored_lambda": 474,
                "num_explored_none": 104,
                "num_inputs": 1,
                "num_kept_concrete": 237,
                "num_kept_lambda": 286,
                "num_values_explored": 1202,
                "num_values_kept": 523,
                "temperature": 1.0,
                "total_num_restarts": 7,
                "total_num_values_explored": 17482
            },
            "success": true,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map(lambda u1: Multiply(u1, Add(u1, 2)), x)'\n)",
            "task_solution": "Map(lambda u1: Multiply(u1, Add(u1, 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.6843149978667498,
            "num_unique_values": 250,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Max(a, (lambda v1: Min(b, v1))(v1)))(u1), x, x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 25.984251968503937,
                "explored_percent_lambda": 45.275590551181104,
                "explored_percent_none": 28.74015748031496,
                "kept_percent_concrete": 46.44351464435147,
                "kept_percent_lambda": 53.55648535564853,
                "num_examples": 3,
                "num_explored_concrete": 198,
                "num_explored_lambda": 345,
                "num_explored_none": 219,
                "num_inputs": 3,
                "num_kept_concrete": 111,
                "num_kept_lambda": 128,
                "num_values_explored": 762,
                "num_values_kept": 239,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 762
            },
            "success": true,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map(lambda u1: Max(Min(u1, b), a), x)'\n)",
            "task_solution": "Map(lambda u1: Max(Min(u1, b), a), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.2772384881973,
            "num_unique_values": 845,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 65.41737649063032,
                "explored_percent_lambda": 26.74616695059625,
                "explored_percent_none": 7.836456558773424,
                "kept_percent_concrete": 54.186602870813395,
                "kept_percent_lambda": 45.813397129186605,
                "num_examples": 3,
                "num_explored_concrete": 1920,
                "num_explored_lambda": 785,
                "num_explored_none": 230,
                "num_inputs": 1,
                "num_kept_concrete": 453,
                "num_kept_lambda": 383,
                "num_values_explored": 2935,
                "num_values_kept": 836,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 305105
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map(lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1)), x)'\n)",
            "task_solution": "Map(lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.9339788276702166,
            "num_unique_values": 481,
            "solution": "Sort(Reverse(Map(lambda u1: (lambda v1: Square(v1))(u1), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 46.677215189873415,
                "explored_percent_lambda": 42.00949367088607,
                "explored_percent_none": 11.313291139240507,
                "kept_percent_concrete": 41.52542372881356,
                "kept_percent_lambda": 58.47457627118644,
                "num_examples": 3,
                "num_explored_concrete": 590,
                "num_explored_lambda": 531,
                "num_explored_none": 143,
                "num_inputs": 1,
                "num_kept_concrete": 196,
                "num_kept_lambda": 276,
                "num_values_explored": 1264,
                "num_values_kept": 472,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1264
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map(lambda u1: Square(u1), x))'\n)",
            "task_solution": "Sort(Map(lambda u1: Square(u1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 22.66393376328051,
            "num_unique_values": 744,
            "solution": "Reverse(ZipWith(lambda u1, u2: (lambda v1: Subtract(v1, Minimum(x)))(u2), x, Reverse(x)))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 61.55285313376988,
                "explored_percent_lambda": 33.20860617399439,
                "explored_percent_none": 5.238540692235734,
                "kept_percent_concrete": 44.48979591836735,
                "kept_percent_lambda": 55.51020408163265,
                "num_examples": 3,
                "num_explored_concrete": 1316,
                "num_explored_lambda": 710,
                "num_explored_none": 112,
                "num_inputs": 1,
                "num_kept_concrete": 327,
                "num_kept_lambda": 408,
                "num_values_explored": 2138,
                "num_values_kept": 735,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 10166
            },
            "success": true,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map(lambda u1: Subtract(u1, Minimum(x)), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(u1, Minimum(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 21.172738494351506,
            "num_unique_values": 497,
            "solution": "Map(lambda u1: (lambda v1: Subtract(v1, Access(i, x)))(u1), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 62.910216718266255,
                "explored_percent_lambda": 22.6625386996904,
                "explored_percent_none": 14.427244582043343,
                "kept_percent_concrete": 66.32443531827515,
                "kept_percent_lambda": 33.67556468172484,
                "num_examples": 3,
                "num_explored_concrete": 1016,
                "num_explored_lambda": 366,
                "num_explored_none": 233,
                "num_inputs": 2,
                "num_kept_concrete": 323,
                "num_kept_lambda": 164,
                "num_values_explored": 1615,
                "num_values_kept": 487,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 11012
            },
            "success": true,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map(lambda u1: Subtract(u1, Access(i, x)), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(u1, Access(i, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.1438943464309,
            "num_unique_values": 859,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.70240295748614,
                "explored_percent_lambda": 19.56253850893407,
                "explored_percent_none": 9.73505853357979,
                "kept_percent_concrete": 67.02002355712602,
                "kept_percent_lambda": 32.97997644287397,
                "num_examples": 3,
                "num_explored_concrete": 2295,
                "num_explored_lambda": 635,
                "num_explored_none": 316,
                "num_inputs": 2,
                "num_kept_concrete": 569,
                "num_kept_lambda": 280,
                "num_values_explored": 3246,
                "num_values_kept": 849,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 322252
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map(lambda u1: Add(u1, Subtract(t, Head(x))), x)'\n)",
            "task_solution": "Map(lambda u1: Add(u1, Subtract(t, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 92.8036449123174,
            "num_unique_values": 512,
            "solution": "Map(lambda u1: (lambda v1: Access((lambda v1: Min(v1, Square(3)))(v1), x))(u1), i)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 48.87983706720978,
                "explored_percent_lambda": 43.4826883910387,
                "explored_percent_none": 7.637474541751527,
                "kept_percent_concrete": 46.21513944223108,
                "kept_percent_lambda": 53.78486055776892,
                "num_examples": 3,
                "num_explored_concrete": 480,
                "num_explored_lambda": 427,
                "num_explored_none": 75,
                "num_inputs": 2,
                "num_kept_concrete": 232,
                "num_kept_lambda": 270,
                "num_values_explored": 982,
                "num_values_kept": 502,
                "temperature": 1.0,
                "total_num_restarts": 16,
                "total_num_values_explored": 45072
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map(lambda u1: Access(u1, x), i)'\n)",
            "task_solution": "Map(lambda u1: Access(u1, x), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 9.135358108207583,
            "num_unique_values": 743,
            "solution": "Maximum(ZipWith(lambda u1, u2: (lambda v1: Access(v1, x))(u2), i, Reverse(i)))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 68.28103683492496,
                "explored_percent_lambda": 25.10231923601637,
                "explored_percent_none": 6.616643929058663,
                "kept_percent_concrete": 72.8512960436562,
                "kept_percent_lambda": 27.14870395634379,
                "num_examples": 5,
                "num_explored_concrete": 1001,
                "num_explored_lambda": 368,
                "num_explored_none": 97,
                "num_inputs": 2,
                "num_kept_concrete": 534,
                "num_kept_lambda": 199,
                "num_values_explored": 1466,
                "num_values_kept": 733,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4524
            },
            "success": true,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map(lambda u1: Access(u1, x), i))'\n)",
            "task_solution": "Maximum(Map(lambda u1: Access(u1, x), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.3602070305496454,
            "num_unique_values": 256,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: If((lambda v1: IsEven(v1))(v2), v1, 0))(u1, u2), x, x)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 29.05811623246493,
                "explored_percent_lambda": 54.70941883767535,
                "explored_percent_none": 16.23246492985972,
                "kept_percent_concrete": 40.89068825910931,
                "kept_percent_lambda": 59.10931174089069,
                "num_examples": 3,
                "num_explored_concrete": 145,
                "num_explored_lambda": 273,
                "num_explored_none": 81,
                "num_inputs": 1,
                "num_kept_concrete": 101,
                "num_kept_lambda": 146,
                "num_values_explored": 499,
                "num_values_kept": 247,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 499
            },
            "success": true,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map(lambda u1: If(IsOdd(u1), 0, u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(IsOdd(u1), 0, u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 97.83130623027682,
            "num_unique_values": 216,
            "solution": "Map(lambda u1: (lambda v1: If((lambda v1: Equal(f, v1))(v1), r, v1))(u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 41.65680473372781,
                "explored_percent_lambda": 27.337278106508876,
                "explored_percent_none": 31.005917159763314,
                "kept_percent_concrete": 69.26829268292683,
                "kept_percent_lambda": 30.73170731707317,
                "num_examples": 3,
                "num_explored_concrete": 352,
                "num_explored_lambda": 231,
                "num_explored_none": 262,
                "num_inputs": 3,
                "num_kept_concrete": 142,
                "num_kept_lambda": 63,
                "num_values_explored": 845,
                "num_values_kept": 205,
                "temperature": 1.0,
                "total_num_restarts": 17,
                "total_num_values_explored": 52385
            },
            "success": true,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map(lambda u1: If(Equal(u1, f), r, u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(Equal(u1, f), r, u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 25.54361991211772,
            "num_unique_values": 223,
            "solution": "Map(lambda u1: (lambda v1: If((lambda v1: Less(v1, -1))(v1), y, v1))(u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 22.168284789644012,
                "explored_percent_lambda": 51.13268608414239,
                "explored_percent_none": 26.699029126213592,
                "kept_percent_concrete": 48.82629107981221,
                "kept_percent_lambda": 51.17370892018779,
                "num_examples": 3,
                "num_explored_concrete": 137,
                "num_explored_lambda": 316,
                "num_explored_none": 165,
                "num_inputs": 2,
                "num_kept_concrete": 104,
                "num_kept_lambda": 109,
                "num_values_explored": 618,
                "num_values_kept": 213,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 11420
            },
            "success": true,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map(lambda u1: If(Less(u1, 0), y, u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(Less(u1, 0), y, u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 11.276839956641197,
            "num_unique_values": 791,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Add(v1, Last(x)))(u1), x, Drop(1, x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 71.55863073561544,
                "explored_percent_lambda": 21.412964311726146,
                "explored_percent_none": 7.028404952658412,
                "kept_percent_concrete": 61.76470588235294,
                "kept_percent_lambda": 38.23529411764706,
                "num_examples": 3,
                "num_explored_concrete": 1965,
                "num_explored_lambda": 588,
                "num_explored_none": 193,
                "num_inputs": 1,
                "num_kept_concrete": 483,
                "num_kept_lambda": 299,
                "num_values_explored": 2746,
                "num_values_kept": 782,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 5822
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map(lambda u1: Add(u1, Last(x)), x))'\n)",
            "task_solution": "Take(-1, Map(lambda u1: Add(u1, Last(x)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.4926445428282022,
            "num_unique_values": 214,
            "solution": "Map(lambda u1: Head(x), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 23.993558776167472,
                "explored_percent_lambda": 65.05636070853463,
                "explored_percent_none": 10.950080515297907,
                "kept_percent_concrete": 38.048780487804876,
                "kept_percent_lambda": 61.951219512195124,
                "num_examples": 3,
                "num_explored_concrete": 149,
                "num_explored_lambda": 404,
                "num_explored_none": 68,
                "num_inputs": 1,
                "num_kept_concrete": 78,
                "num_kept_lambda": 127,
                "num_values_explored": 621,
                "num_values_kept": 205,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 621
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map(lambda u1: Head(x), x)'\n)",
            "task_solution": "Map(lambda u1: Head(x), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.9226570818573236,
            "num_unique_values": 551,
            "solution": "Add(Count(lambda u1: (lambda v1: IsEven(v1))(u1), x), Count(lambda u1: (lambda v1: IsOdd(v1))(u1), x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 43.789308176100626,
                "explored_percent_lambda": 31.28930817610063,
                "explored_percent_none": 24.92138364779874,
                "kept_percent_concrete": 70.11070110701107,
                "kept_percent_lambda": 29.88929889298893,
                "num_examples": 5,
                "num_explored_concrete": 557,
                "num_explored_lambda": 398,
                "num_explored_none": 317,
                "num_inputs": 1,
                "num_kept_concrete": 380,
                "num_kept_lambda": 162,
                "num_values_explored": 1272,
                "num_values_kept": 542,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1272
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map(lambda u1: 1, x))'\n)",
            "task_solution": "Sum(Map(lambda u1: 1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 497.0599647164345,
            "num_unique_values": 597,
            "solution": "Min(Last(Take(-1, x)), Maximum(Take(4, Sort(Drop(1, x)))))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 52.3921568627451,
                "explored_percent_lambda": 33.333333333333336,
                "explored_percent_none": 14.27450980392157,
                "kept_percent_concrete": 71.7687074829932,
                "kept_percent_lambda": 28.231292517006803,
                "num_examples": 5,
                "num_explored_concrete": 668,
                "num_explored_lambda": 425,
                "num_explored_none": 182,
                "num_inputs": 1,
                "num_kept_concrete": 422,
                "num_kept_lambda": 166,
                "num_values_explored": 1275,
                "num_values_kept": 588,
                "temperature": 1.0,
                "total_num_restarts": 83,
                "total_num_values_explored": 257077
            },
            "success": true,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map(lambda u1: 1, x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map(lambda u1: 1, x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.198109382763505,
            "num_unique_values": 222,
            "solution": "Map(lambda u1: (lambda v1: If((lambda v1: Greater(v1, y))(v1), 1, 0))(u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 34.57627118644068,
                "explored_percent_lambda": 33.728813559322035,
                "explored_percent_none": 31.694915254237287,
                "kept_percent_concrete": 61.79245283018868,
                "kept_percent_lambda": 38.20754716981132,
                "num_examples": 3,
                "num_explored_concrete": 204,
                "num_explored_lambda": 199,
                "num_explored_none": 187,
                "num_inputs": 2,
                "num_kept_concrete": 131,
                "num_kept_lambda": 81,
                "num_values_explored": 590,
                "num_values_kept": 212,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 590
            },
            "success": true,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map(lambda u1: If(Greater(u1, y), 1, 0), x)'\n)",
            "task_solution": "Map(lambda u1: If(Greater(u1, y), 1, 0), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 382.33953906595707,
            "num_unique_values": 500,
            "solution": "Map(lambda u1: (lambda v1: If((lambda v1: IsOdd(v1))(v1), v1, (lambda v1: IntDivide(v1, 2))(v1)))(u1), x)",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 54.975978037062454,
                "explored_percent_lambda": 34.66026080988332,
                "explored_percent_none": 10.36376115305422,
                "kept_percent_concrete": 56.211812627291245,
                "kept_percent_lambda": 43.788187372708755,
                "num_examples": 3,
                "num_explored_concrete": 801,
                "num_explored_lambda": 505,
                "num_explored_none": 151,
                "num_inputs": 1,
                "num_kept_concrete": 276,
                "num_kept_lambda": 215,
                "num_values_explored": 1457,
                "num_values_kept": 491,
                "temperature": 1.0,
                "total_num_restarts": 64,
                "total_num_values_explored": 195421
            },
            "success": true,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map(lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.3220328018069,
            "num_unique_values": 871,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.60446373217607,
                "explored_percent_lambda": 17.575945443273405,
                "explored_percent_none": 6.819590824550527,
                "kept_percent_concrete": 65.96980255516841,
                "kept_percent_lambda": 34.03019744483159,
                "num_examples": 3,
                "num_explored_concrete": 2439,
                "num_explored_lambda": 567,
                "num_explored_none": 220,
                "num_inputs": 2,
                "num_kept_concrete": 568,
                "num_kept_lambda": 293,
                "num_values_explored": 3226,
                "num_values_kept": 861,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 326721
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map(lambda u1: If(IsOdd(u1), Multiply(u1, n), u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(IsOdd(u1), Multiply(u1, n), u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.981722293421626,
            "num_unique_values": 514,
            "solution": "Filter(lambda u1: (lambda v1: Greater(v1, y))(u1), Scanl1(lambda u1, u2: (lambda v1: Max(y, v1))(u2), x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 57.0427470217239,
                "explored_percent_lambda": 26.62929222144359,
                "explored_percent_none": 16.327960756832514,
                "kept_percent_concrete": 66.66666666666667,
                "kept_percent_lambda": 33.333333333333336,
                "num_examples": 3,
                "num_explored_concrete": 814,
                "num_explored_lambda": 380,
                "num_explored_none": 233,
                "num_inputs": 2,
                "num_kept_concrete": 336,
                "num_kept_lambda": 168,
                "num_values_explored": 1427,
                "num_values_kept": 504,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1427
            },
            "success": true,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter(lambda u1: Greater(u1, y), x)'\n)",
            "task_solution": "Filter(lambda u1: Greater(u1, y), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.6638038381934166,
            "num_unique_values": 221,
            "solution": "Filter(lambda u1: (lambda v1: IsEven(v1))(u1), Sort(x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 27.994791666666668,
                "explored_percent_lambda": 48.958333333333336,
                "explored_percent_none": 23.046875,
                "kept_percent_concrete": 43.39622641509434,
                "kept_percent_lambda": 56.60377358490566,
                "num_examples": 3,
                "num_explored_concrete": 215,
                "num_explored_lambda": 376,
                "num_explored_none": 177,
                "num_inputs": 1,
                "num_kept_concrete": 92,
                "num_kept_lambda": 120,
                "num_values_explored": 768,
                "num_values_kept": 212,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 768
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter(lambda u1: IsEven(u1), Sort(x))'\n)",
            "task_solution": "Filter(lambda u1: IsEven(u1), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.2951243445277214,
            "num_unique_values": 458,
            "solution": "Maximum(Take(4, Filter(lambda u1: (lambda v1: IsOdd(v1))(u1), x)))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 47.591522157996145,
                "explored_percent_lambda": 39.017341040462426,
                "explored_percent_none": 13.391136801541426,
                "kept_percent_concrete": 64.81069042316258,
                "kept_percent_lambda": 35.18930957683742,
                "num_examples": 5,
                "num_explored_concrete": 494,
                "num_explored_lambda": 405,
                "num_explored_none": 139,
                "num_inputs": 1,
                "num_kept_concrete": 291,
                "num_kept_lambda": 158,
                "num_values_explored": 1038,
                "num_values_kept": 449,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1038
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter(lambda u1: IsOdd(u1), x))'\n)",
            "task_solution": "Maximum(Filter(lambda u1: IsOdd(u1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.8988577984273434,
            "num_unique_values": 512,
            "solution": "Filter(lambda u1: (lambda v1: Less(v1, 1))(u1), Filter(lambda u1: (lambda v1: IsOdd(v1))(u1), x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 49.12,
                "explored_percent_lambda": 38.72,
                "explored_percent_none": 12.16,
                "kept_percent_concrete": 61.0337972166998,
                "kept_percent_lambda": 38.9662027833002,
                "num_examples": 3,
                "num_explored_concrete": 614,
                "num_explored_lambda": 484,
                "num_explored_none": 152,
                "num_inputs": 1,
                "num_kept_concrete": 307,
                "num_kept_lambda": 196,
                "num_values_explored": 1250,
                "num_values_kept": 503,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1250
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter(lambda u1: IsOdd(Min(u1, 0)), x)'\n)",
            "task_solution": "Filter(lambda u1: IsOdd(Min(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.9552059173583984,
            "num_unique_values": 492,
            "solution": "Sum(Filter(lambda u1: (lambda v1: Greater(v1, -1))(u1), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 52.21556886227545,
                "explored_percent_lambda": 39.40119760479042,
                "explored_percent_none": 8.383233532934131,
                "kept_percent_concrete": 63.14699792960663,
                "kept_percent_lambda": 36.85300207039337,
                "num_examples": 5,
                "num_explored_concrete": 436,
                "num_explored_lambda": 329,
                "num_explored_none": 70,
                "num_inputs": 1,
                "num_kept_concrete": 305,
                "num_kept_lambda": 178,
                "num_values_explored": 835,
                "num_values_kept": 483,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 835
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter(lambda u1: Greater(u1, 0), x))'\n)",
            "task_solution": "Sum(Filter(lambda u1: Greater(u1, 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.544464925304055,
            "num_unique_values": 466,
            "solution": "Reverse(Take(Count(lambda u1: (lambda v1: Less(v1, 0))(u1), x), Sort(x)))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 48.35640138408304,
                "explored_percent_lambda": 40.65743944636678,
                "explored_percent_none": 10.986159169550174,
                "kept_percent_concrete": 61.050328227571114,
                "kept_percent_lambda": 38.949671772428886,
                "num_examples": 3,
                "num_explored_concrete": 559,
                "num_explored_lambda": 470,
                "num_explored_none": 127,
                "num_inputs": 1,
                "num_kept_concrete": 279,
                "num_kept_lambda": 178,
                "num_values_explored": 1156,
                "num_values_kept": 457,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 1156
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter(lambda u1: Less(u1, 0), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter(lambda u1: Less(u1, 0), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.19587456434965,
            "num_unique_values": 767,
            "solution": "Filter(lambda u1: (lambda v1: Greater(b, v1))(u1), Filter(lambda u1: (lambda v1: Less(a, v1))(u1), x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 67.85304247990815,
                "explored_percent_lambda": 18.867202449292,
                "explored_percent_none": 13.279755070799848,
                "kept_percent_concrete": 70.76719576719577,
                "kept_percent_lambda": 29.232804232804234,
                "num_examples": 3,
                "num_explored_concrete": 1773,
                "num_explored_lambda": 493,
                "num_explored_none": 347,
                "num_inputs": 3,
                "num_kept_concrete": 535,
                "num_kept_lambda": 221,
                "num_values_explored": 2613,
                "num_values_kept": 756,
                "temperature": 1.0,
                "total_num_restarts": 17,
                "total_num_values_explored": 51327
            },
            "success": true,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter(lambda u1: Less(u1, b), Filter(lambda u1: Greater(u1, a), x))'\n)",
            "task_solution": "Filter(lambda u1: Less(u1, b), Filter(lambda u1: Greater(u1, a), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.5728746578097,
            "num_unique_values": 965,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.21475625823452,
                "explored_percent_lambda": 24.308300395256918,
                "explored_percent_none": 7.4769433465085635,
                "kept_percent_concrete": 62.931937172774866,
                "kept_percent_lambda": 37.068062827225134,
                "num_examples": 3,
                "num_explored_concrete": 2071,
                "num_explored_lambda": 738,
                "num_explored_none": 227,
                "num_inputs": 2,
                "num_kept_concrete": 601,
                "num_kept_lambda": 354,
                "num_values_explored": 3036,
                "num_values_kept": 955,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 301268
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter(lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n)), x)'\n)",
            "task_solution": "Filter(lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.7311682645231,
            "num_unique_values": 941,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.27867168777816,
                "explored_percent_lambda": 24.546388223211228,
                "explored_percent_none": 9.174940089010613,
                "kept_percent_concrete": 63.80236305048335,
                "kept_percent_lambda": 36.19763694951665,
                "num_examples": 3,
                "num_explored_concrete": 1936,
                "num_explored_lambda": 717,
                "num_explored_none": 268,
                "num_inputs": 2,
                "num_kept_concrete": 594,
                "num_kept_lambda": 337,
                "num_values_explored": 2921,
                "num_values_kept": 931,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 290735
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter(lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1)), x)'\n)",
            "task_solution": "Filter(lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 27.02443315833807,
            "num_unique_values": 505,
            "solution": "Filter(lambda u1: (lambda v1: Equal(v1, (lambda v1: Access(v1, x))(v1)))(u1), Sort(x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 55.010660980810236,
                "explored_percent_lambda": 34.9680170575693,
                "explored_percent_none": 10.021321961620469,
                "kept_percent_concrete": 60.88709677419355,
                "kept_percent_lambda": 39.11290322580645,
                "num_examples": 3,
                "num_explored_concrete": 774,
                "num_explored_lambda": 492,
                "num_explored_none": 141,
                "num_inputs": 1,
                "num_kept_concrete": 302,
                "num_kept_lambda": 194,
                "num_values_explored": 1407,
                "num_values_kept": 496,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 13038
            },
            "success": true,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter(lambda u1: Equal(u1, Access(u1, x)), x))'\n)",
            "task_solution": "Sort(Filter(lambda u1: Equal(u1, Access(u1, x)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.6733629405499,
            "num_unique_values": 984,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.24368293527172,
                "explored_percent_lambda": 23.052959501557634,
                "explored_percent_none": 12.703357563170647,
                "kept_percent_concrete": 65.775950668037,
                "kept_percent_lambda": 34.224049331963,
                "num_examples": 3,
                "num_explored_concrete": 1856,
                "num_explored_lambda": 666,
                "num_explored_none": 367,
                "num_inputs": 3,
                "num_kept_concrete": 640,
                "num_kept_lambda": 333,
                "num_values_explored": 2889,
                "num_values_kept": 973,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 285735
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter(lambda u1: Equal(Access(u1, x), y), i)'\n)",
            "task_solution": "Filter(lambda u1: Equal(Access(u1, x), y), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.45631442591548,
            "num_unique_values": 840,
            "solution": "Max(Subtract(Square(3), n), Count(lambda u1: (lambda v1: Equal(v1, Head(x)))(u1), x))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 73.75643224699829,
                "explored_percent_lambda": 13.13893653516295,
                "explored_percent_none": 13.104631217838765,
                "kept_percent_concrete": 80.0,
                "kept_percent_lambda": 20.0,
                "num_examples": 5,
                "num_explored_concrete": 2150,
                "num_explored_lambda": 383,
                "num_explored_none": 382,
                "num_inputs": 2,
                "num_kept_concrete": 664,
                "num_kept_lambda": 166,
                "num_values_explored": 2915,
                "num_values_kept": 830,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 2915
            },
            "success": true,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count(lambda u1: Equal(u1, n), x)'\n)",
            "task_solution": "Count(lambda u1: Equal(u1, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.387795589864254,
            "num_unique_values": 238,
            "solution": "Count(lambda u1: (lambda v1: Less(v1, q))(u1), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 32.71604938271605,
                "explored_percent_lambda": 33.641975308641975,
                "explored_percent_none": 33.641975308641975,
                "kept_percent_concrete": 69.73684210526316,
                "kept_percent_lambda": 30.263157894736842,
                "num_examples": 5,
                "num_explored_concrete": 212,
                "num_explored_lambda": 218,
                "num_explored_none": 218,
                "num_inputs": 2,
                "num_kept_concrete": 159,
                "num_kept_lambda": 69,
                "num_values_explored": 648,
                "num_values_kept": 228,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 648
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count(lambda u1: Less(u1, q), x)'\n)",
            "task_solution": "Count(lambda u1: Less(u1, q), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 41.9477849714458,
            "num_unique_values": 1046,
            "solution": "Count(lambda u1: (lambda v1: Greater(Head(x), v1))(u1), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 74.51165721487082,
                "explored_percent_lambda": 17.076244486452428,
                "explored_percent_none": 8.41209829867675,
                "kept_percent_concrete": 77.43490838958535,
                "kept_percent_lambda": 22.565091610414658,
                "num_examples": 5,
                "num_explored_concrete": 2365,
                "num_explored_lambda": 542,
                "num_explored_none": 267,
                "num_inputs": 1,
                "num_kept_concrete": 803,
                "num_kept_lambda": 234,
                "num_values_explored": 3174,
                "num_values_kept": 1037,
                "temperature": 1.0,
                "total_num_restarts": 7,
                "total_num_values_explored": 21786
            },
            "success": true,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count(lambda u1: Less(u1, Head(x)), x)'\n)",
            "task_solution": "Count(lambda u1: Less(u1, Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.203171320259571,
            "num_unique_values": 245,
            "solution": "Count(lambda u1: (lambda v1: Less(v1, 0))(u1), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 31.634819532908704,
                "explored_percent_lambda": 48.61995753715499,
                "explored_percent_none": 19.745222929936304,
                "kept_percent_concrete": 50.847457627118644,
                "kept_percent_lambda": 49.152542372881356,
                "num_examples": 5,
                "num_explored_concrete": 149,
                "num_explored_lambda": 229,
                "num_explored_none": 93,
                "num_inputs": 1,
                "num_kept_concrete": 120,
                "num_kept_lambda": 116,
                "num_values_explored": 471,
                "num_values_kept": 236,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 471
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count(lambda u1: Less(u1, 0), x)'\n)",
            "task_solution": "Count(lambda u1: Less(u1, 0), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 83.86869909986854,
            "num_unique_values": 1054,
            "solution": "Count(lambda u1: (lambda v1: Equal(v1, Last(x)))(u1), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 76.37362637362638,
                "explored_percent_lambda": 16.17445054945055,
                "explored_percent_none": 7.451923076923077,
                "kept_percent_concrete": 78.85167464114832,
                "kept_percent_lambda": 21.148325358851675,
                "num_examples": 5,
                "num_explored_concrete": 2224,
                "num_explored_lambda": 471,
                "num_explored_none": 217,
                "num_inputs": 1,
                "num_kept_concrete": 824,
                "num_kept_lambda": 221,
                "num_values_explored": 2912,
                "num_values_kept": 1045,
                "temperature": 1.0,
                "total_num_restarts": 14,
                "total_num_values_explored": 42592
            },
            "success": true,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count(lambda u1: Equal(u1, Last(x)), x)'\n)",
            "task_solution": "Count(lambda u1: Equal(u1, Last(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.5264769084752,
            "num_unique_values": 1115,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 86.95143358689292,
                "explored_percent_lambda": 8.016383850204798,
                "explored_percent_none": 5.032182562902282,
                "kept_percent_concrete": 86.5158371040724,
                "kept_percent_lambda": 13.484162895927602,
                "num_examples": 5,
                "num_explored_concrete": 2972,
                "num_explored_lambda": 274,
                "num_explored_none": 172,
                "num_inputs": 2,
                "num_kept_concrete": 956,
                "num_kept_lambda": 149,
                "num_values_explored": 3418,
                "num_values_kept": 1105,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 337909
            },
            "success": false,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count(lambda u1: Equal(u1, Access(i, x)), x)'\n)",
            "task_solution": "Count(lambda u1: Equal(u1, Access(i, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 171.37538482621312,
            "num_unique_values": 519,
            "solution": "Count(lambda u1: (lambda v1: IsEven((lambda v1: Min(2, (lambda v1: Multiply(3, v1))(v1)))(v1)))(u1), x)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 50.55793991416309,
                "explored_percent_lambda": 33.562231759656655,
                "explored_percent_none": 15.879828326180258,
                "kept_percent_concrete": 68.03921568627452,
                "kept_percent_lambda": 31.96078431372549,
                "num_examples": 5,
                "num_explored_concrete": 589,
                "num_explored_lambda": 391,
                "num_explored_none": 185,
                "num_inputs": 1,
                "num_kept_concrete": 347,
                "num_kept_lambda": 163,
                "num_values_explored": 1165,
                "num_values_kept": 510,
                "temperature": 1.0,
                "total_num_restarts": 29,
                "total_num_values_explored": 87233
            },
            "success": true,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count(lambda u1: IsEven(Min(u1, 0)), x)'\n)",
            "task_solution": "Count(lambda u1: IsEven(Min(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.9831367433071,
            "num_unique_values": 1200,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.18157273034087,
                "explored_percent_lambda": 16.40229497131286,
                "explored_percent_none": 9.416132298346271,
                "kept_percent_concrete": 76.89075630252101,
                "kept_percent_lambda": 23.10924369747899,
                "num_examples": 5,
                "num_explored_concrete": 2198,
                "num_explored_lambda": 486,
                "num_explored_none": 279,
                "num_inputs": 2,
                "num_kept_concrete": 915,
                "num_kept_lambda": 275,
                "num_values_explored": 2963,
                "num_values_kept": 1190,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 302389
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count(lambda u1: Equal(u1, 0), x), Count(lambda u1: Equal(u1, 0), y))'\n)",
            "task_solution": "Add(Count(lambda u1: Equal(u1, 0), x), Count(lambda u1: Equal(u1, 0), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.115782519802451,
            "num_unique_values": 423,
            "solution": "Take(Count(lambda u1: (lambda v1: Greater(v1, 0))(u1), r), Sort(c))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 39.64912280701754,
                "explored_percent_lambda": 49.473684210526315,
                "explored_percent_none": 10.87719298245614,
                "kept_percent_concrete": 47.45762711864407,
                "kept_percent_lambda": 52.54237288135593,
                "num_examples": 3,
                "num_explored_concrete": 339,
                "num_explored_lambda": 423,
                "num_explored_none": 93,
                "num_inputs": 2,
                "num_kept_concrete": 196,
                "num_kept_lambda": 217,
                "num_values_explored": 855,
                "num_values_kept": 413,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 855
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count(lambda u1: Greater(u1, 0), r), Sort(c))'\n)",
            "task_solution": "Take(Count(lambda u1: Greater(u1, 0), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.8287095613778,
            "num_unique_values": 1180,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.3660744217231,
                "explored_percent_lambda": 19.007710358699295,
                "explored_percent_none": 4.626215219577606,
                "kept_percent_concrete": 75.04273504273505,
                "kept_percent_lambda": 24.957264957264957,
                "num_examples": 5,
                "num_explored_concrete": 2278,
                "num_explored_lambda": 567,
                "num_explored_none": 138,
                "num_inputs": 2,
                "num_kept_concrete": 878,
                "num_kept_lambda": 292,
                "num_values_explored": 2983,
                "num_values_kept": 1170,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 299695
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith(lambda u1, u2: Add(Multiply(u1, 3), u2), w, t))'\n)",
            "task_solution": "Maximum(ZipWith(lambda u1, u2: Add(Multiply(u1, 3), u2), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.8947475142777,
            "num_unique_values": 1098,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.14207650273224,
                "explored_percent_lambda": 16.90774670523947,
                "explored_percent_none": 4.950176792028286,
                "kept_percent_concrete": 79.04411764705883,
                "kept_percent_lambda": 20.955882352941178,
                "num_examples": 5,
                "num_explored_concrete": 2431,
                "num_explored_lambda": 526,
                "num_explored_none": 154,
                "num_inputs": 2,
                "num_kept_concrete": 860,
                "num_kept_lambda": 228,
                "num_values_explored": 3111,
                "num_values_kept": 1088,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 309745
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.3492235150188208,
            "num_unique_values": 252,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Min(v1, v2))(u1, u2), a, Reverse(a))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 27.25409836065574,
                "explored_percent_lambda": 60.24590163934426,
                "explored_percent_none": 12.5,
                "kept_percent_concrete": 38.27160493827161,
                "kept_percent_lambda": 61.72839506172839,
                "num_examples": 3,
                "num_explored_concrete": 133,
                "num_explored_lambda": 294,
                "num_explored_none": 61,
                "num_inputs": 1,
                "num_kept_concrete": 93,
                "num_kept_lambda": 150,
                "num_values_explored": 488,
                "num_values_kept": 243,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 488
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith(lambda u1, u2: Min(u1, u2), a, Reverse(a))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Min(u1, u2), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 62.55741429142654,
            "num_unique_values": 571,
            "solution": "Subtract(Minimum(ZipWith(lambda u1, u2: (lambda v1, v2: Add(v1, v2))(u1, u2), t, p)), 2)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 58.50052798310454,
                "explored_percent_lambda": 32.101372756071804,
                "explored_percent_none": 9.398099260823654,
                "kept_percent_concrete": 70.05347593582887,
                "kept_percent_lambda": 29.946524064171122,
                "num_examples": 5,
                "num_explored_concrete": 554,
                "num_explored_lambda": 304,
                "num_explored_none": 89,
                "num_inputs": 2,
                "num_kept_concrete": 393,
                "num_kept_lambda": 168,
                "num_values_explored": 947,
                "num_values_kept": 561,
                "temperature": 1.0,
                "total_num_restarts": 11,
                "total_num_values_explored": 31695
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith(lambda u1, u2: Add(u1, u2), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith(lambda u1, u2: Add(u1, u2), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.3396369330585,
            "num_unique_values": 963,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.74078624078624,
                "explored_percent_lambda": 19.318181818181817,
                "explored_percent_none": 6.941031941031941,
                "kept_percent_concrete": 74.73794549266248,
                "kept_percent_lambda": 25.262054507337528,
                "num_examples": 5,
                "num_explored_concrete": 2401,
                "num_explored_lambda": 629,
                "num_explored_none": 226,
                "num_inputs": 1,
                "num_kept_concrete": 713,
                "num_kept_lambda": 241,
                "num_values_explored": 3256,
                "num_values_kept": 954,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 324115
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith(lambda u1, u2: Max(Subtract(u1, u2), 0), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Max(Subtract(u1, u2), 0), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 50.40880346298218,
            "num_unique_values": 494,
            "solution": "Sum(ZipWith(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), y, x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 46.43237486687966,
                "explored_percent_lambda": 36.74121405750799,
                "explored_percent_none": 16.826411075612352,
                "kept_percent_concrete": 64.87603305785125,
                "kept_percent_lambda": 35.12396694214876,
                "num_examples": 5,
                "num_explored_concrete": 436,
                "num_explored_lambda": 345,
                "num_explored_none": 158,
                "num_inputs": 2,
                "num_kept_concrete": 314,
                "num_kept_lambda": 170,
                "num_values_explored": 939,
                "num_values_kept": 484,
                "temperature": 1.0,
                "total_num_restarts": 9,
                "total_num_values_explored": 25536
            },
            "success": true,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, y))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.8303223066032,
            "num_unique_values": 924,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.09983633387888,
                "explored_percent_lambda": 26.382978723404257,
                "explored_percent_none": 4.517184942716858,
                "kept_percent_concrete": 48.6870897155361,
                "kept_percent_lambda": 51.3129102844639,
                "num_examples": 3,
                "num_explored_concrete": 2111,
                "num_explored_lambda": 806,
                "num_explored_none": 138,
                "num_inputs": 2,
                "num_kept_concrete": 445,
                "num_kept_lambda": 469,
                "num_values_explored": 3055,
                "num_values_kept": 914,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 294235
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith(lambda u1, u2: IntDivide(Add(u1, u2), 2), x, y)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: IntDivide(Add(u1, u2), 2), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.6221491936594,
            "num_unique_values": 870,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.98833911125118,
                "explored_percent_lambda": 20.327765521588404,
                "explored_percent_none": 10.683895367160416,
                "kept_percent_concrete": 56.57741559953434,
                "kept_percent_lambda": 43.42258440046566,
                "num_examples": 3,
                "num_explored_concrete": 2189,
                "num_explored_lambda": 645,
                "num_explored_none": 339,
                "num_inputs": 3,
                "num_kept_concrete": 486,
                "num_kept_lambda": 373,
                "num_values_explored": 3173,
                "num_values_kept": 859,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 316381
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith(lambda u1, u2: Add(u1, u2), a, ZipWith(lambda u1, u2: Add(u1, u2), b, c))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Add(u1, u2), a, ZipWith(lambda u1, u2: Add(u1, u2), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 8.889877481386065,
            "num_unique_values": 482,
            "solution": "Sort(ZipWith(lambda u1, u2: (lambda v1, v2: IntDivide(v1, v2))(u2, u1), n, m))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 53.89705882352941,
                "explored_percent_lambda": 29.779411764705884,
                "explored_percent_none": 16.323529411764707,
                "kept_percent_concrete": 56.144067796610166,
                "kept_percent_lambda": 43.855932203389834,
                "num_examples": 3,
                "num_explored_concrete": 733,
                "num_explored_lambda": 405,
                "num_explored_none": 222,
                "num_inputs": 2,
                "num_kept_concrete": 265,
                "num_kept_lambda": 207,
                "num_values_explored": 1360,
                "num_values_kept": 472,
                "temperature": 1.0,
                "total_num_restarts": 2,
                "total_num_values_explored": 4527
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith(lambda u1, u2: IntDivide(u1, u2), m, n))'\n)",
            "task_solution": "Sort(ZipWith(lambda u1, u2: IntDivide(u1, u2), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.6246561352163553,
            "num_unique_values": 251,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Subtract(v1, v2))(u2, u1), x, Drop(1, x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 23.582089552238806,
                "explored_percent_lambda": 51.04477611940298,
                "explored_percent_none": 25.37313432835821,
                "kept_percent_concrete": 46.28099173553719,
                "kept_percent_lambda": 53.71900826446281,
                "num_examples": 3,
                "num_explored_concrete": 158,
                "num_explored_lambda": 342,
                "num_explored_none": 170,
                "num_inputs": 1,
                "num_kept_concrete": 112,
                "num_kept_lambda": 130,
                "num_values_explored": 670,
                "num_values_kept": 242,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 670
            },
            "success": true,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith(lambda u1, u2: Subtract(u2, u1), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Subtract(u2, u1), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 158.88145559839904,
            "num_unique_values": 490,
            "solution": "Sum(ZipWith(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u2, u1), x, m))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 44.99494438827098,
                "explored_percent_lambda": 37.71486349848332,
                "explored_percent_none": 17.290192113245702,
                "kept_percent_concrete": 65.625,
                "kept_percent_lambda": 34.375,
                "num_examples": 5,
                "num_explored_concrete": 445,
                "num_explored_lambda": 373,
                "num_explored_none": 171,
                "num_inputs": 2,
                "num_kept_concrete": 315,
                "num_kept_lambda": 165,
                "num_values_explored": 989,
                "num_values_kept": 480,
                "temperature": 1.0,
                "total_num_restarts": 27,
                "total_num_values_explored": 78758
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, m))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.7657022997737,
            "num_unique_values": 926,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.96182685753237,
                "explored_percent_lambda": 27.062031356509884,
                "explored_percent_none": 4.976141785957737,
                "kept_percent_concrete": 49.672489082969435,
                "kept_percent_lambda": 50.327510917030565,
                "num_examples": 3,
                "num_explored_concrete": 1994,
                "num_explored_lambda": 794,
                "num_explored_none": 146,
                "num_inputs": 2,
                "num_kept_concrete": 455,
                "num_kept_lambda": 461,
                "num_values_explored": 2934,
                "num_values_kept": 916,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 282148
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith(lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1)), x, y)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.7922396659851,
            "num_unique_values": 1020,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.9247311827957,
                "explored_percent_lambda": 17.71206690561529,
                "explored_percent_none": 8.363201911589009,
                "kept_percent_concrete": 76.13861386138613,
                "kept_percent_lambda": 23.861386138613863,
                "num_examples": 5,
                "num_explored_concrete": 2475,
                "num_explored_lambda": 593,
                "num_explored_none": 280,
                "num_inputs": 2,
                "num_kept_concrete": 769,
                "num_kept_lambda": 241,
                "num_values_explored": 3348,
                "num_values_kept": 1010,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 315861
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith(lambda u1, u2: Square(Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Square(Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 603.1783104743809,
            "num_unique_values": 958,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 52.51742835011619,
                "explored_percent_lambda": 36.94810224632068,
                "explored_percent_none": 10.53446940356313,
                "kept_percent_concrete": 44.51476793248945,
                "kept_percent_lambda": 55.48523206751055,
                "num_examples": 3,
                "num_explored_concrete": 1356,
                "num_explored_lambda": 954,
                "num_explored_none": 272,
                "num_inputs": 2,
                "num_kept_concrete": 422,
                "num_kept_lambda": 526,
                "num_values_explored": 2582,
                "num_values_kept": 948,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 245764
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith(lambda u1, u2: If(Equal(u1, u2), 1, 0), x, y)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: If(Equal(u1, u2), 1, 0), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 31.461394786834717,
            "num_unique_values": 257,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Min(v1, v2))(u1, u2), Sort(y), Sort(x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 32.860040567951316,
                "explored_percent_lambda": 48.275862068965516,
                "explored_percent_none": 18.864097363083165,
                "kept_percent_concrete": 48.582995951417004,
                "kept_percent_lambda": 51.417004048582996,
                "num_examples": 3,
                "num_explored_concrete": 162,
                "num_explored_lambda": 238,
                "num_explored_none": 93,
                "num_inputs": 2,
                "num_kept_concrete": 120,
                "num_kept_lambda": 127,
                "num_values_explored": 493,
                "num_values_kept": 247,
                "temperature": 1.0,
                "total_num_restarts": 6,
                "total_num_values_explored": 15813
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith(lambda u1, u2: Min(u1, u2), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Min(u1, u2), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 44.75474178045988,
            "num_unique_values": 537,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Add(v1, v2))(u1, u2), x, Drop(Multiply(-1, 3), x))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 60.317460317460316,
                "explored_percent_lambda": 32.83208020050125,
                "explored_percent_none": 6.8504594820384295,
                "kept_percent_concrete": 59.09090909090909,
                "kept_percent_lambda": 40.90909090909091,
                "num_examples": 3,
                "num_explored_concrete": 722,
                "num_explored_lambda": 393,
                "num_explored_none": 82,
                "num_inputs": 1,
                "num_kept_concrete": 312,
                "num_kept_lambda": 216,
                "num_values_explored": 1197,
                "num_values_kept": 528,
                "temperature": 1.0,
                "total_num_restarts": 8,
                "total_num_values_explored": 21972
            },
            "success": true,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith(lambda u1, u2: Add(u1, u2), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Add(u1, u2), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.5994334015995,
            "num_unique_values": 1161,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 79.02233732599547,
                "explored_percent_lambda": 16.67206215603755,
                "explored_percent_none": 4.30560051796698,
                "kept_percent_concrete": 79.94791666666667,
                "kept_percent_lambda": 20.052083333333332,
                "num_examples": 5,
                "num_explored_concrete": 2441,
                "num_explored_lambda": 515,
                "num_explored_none": 133,
                "num_inputs": 1,
                "num_kept_concrete": 921,
                "num_kept_lambda": 231,
                "num_values_explored": 3089,
                "num_values_kept": 1152,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 303416
            },
            "success": false,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 441.54406668804586,
            "num_unique_values": 259,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Multiply(v1, (lambda v1: Add(1, v1))(v2)))(u2, u1), w, p)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 29.718875502008032,
                "explored_percent_lambda": 53.01204819277108,
                "explored_percent_none": 17.269076305220885,
                "kept_percent_concrete": 38.95582329317269,
                "kept_percent_lambda": 61.04417670682731,
                "num_examples": 3,
                "num_explored_concrete": 148,
                "num_explored_lambda": 264,
                "num_explored_none": 86,
                "num_inputs": 2,
                "num_kept_concrete": 97,
                "num_kept_lambda": 152,
                "num_values_explored": 498,
                "num_values_kept": 249,
                "temperature": 1.0,
                "total_num_restarts": 74,
                "total_num_values_explored": 188333
            },
            "success": true,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith(lambda u1, u2: Multiply(u1, Add(1, u2)), p, w)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Multiply(u1, Add(1, u2)), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.6393996216357,
            "num_unique_values": 1141,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 79.71061093247589,
                "explored_percent_lambda": 16.463022508038584,
                "explored_percent_none": 3.8263665594855305,
                "kept_percent_concrete": 78.97526501766785,
                "kept_percent_lambda": 21.024734982332156,
                "num_examples": 5,
                "num_explored_concrete": 2479,
                "num_explored_lambda": 512,
                "num_explored_none": 119,
                "num_inputs": 1,
                "num_kept_concrete": 894,
                "num_kept_lambda": 238,
                "num_values_explored": 3110,
                "num_values_kept": 1132,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 313307
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1(lambda u1, u2: Min(u1, u2), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1(lambda u1, u2: Min(u1, u2), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 501.864613359794,
            "num_unique_values": 264,
            "solution": "Scanl1(lambda u1, u2: (lambda v1, v2: Max(v1, v2))(u2, u1), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 29.921259842519685,
                "explored_percent_lambda": 53.74015748031496,
                "explored_percent_none": 16.338582677165356,
                "kept_percent_concrete": 42.35294117647059,
                "kept_percent_lambda": 57.64705882352941,
                "num_examples": 3,
                "num_explored_concrete": 152,
                "num_explored_lambda": 273,
                "num_explored_none": 83,
                "num_inputs": 1,
                "num_kept_concrete": 108,
                "num_kept_lambda": 147,
                "num_values_explored": 508,
                "num_values_kept": 255,
                "temperature": 1.0,
                "total_num_restarts": 84,
                "total_num_values_explored": 210519
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1(lambda u1, u2: Max(u1, u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Max(u1, u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 80.40777135267854,
            "num_unique_values": 462,
            "solution": "Maximum(ZipWith(lambda u1, u2: (lambda v1: Sum((lambda v1: Take(v1, x))(v1)))(u2), x, x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 52.81030444964871,
                "explored_percent_lambda": 37.23653395784543,
                "explored_percent_none": 9.953161592505856,
                "kept_percent_concrete": 61.36865342163355,
                "kept_percent_lambda": 38.63134657836645,
                "num_examples": 5,
                "num_explored_concrete": 451,
                "num_explored_lambda": 318,
                "num_explored_none": 85,
                "num_inputs": 1,
                "num_kept_concrete": 278,
                "num_kept_lambda": 175,
                "num_values_explored": 854,
                "num_values_kept": 453,
                "temperature": 1.0,
                "total_num_restarts": 14,
                "total_num_values_explored": 40867
            },
            "success": true,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1(lambda u1, u2: Add(u1, u2), x))'\n)",
            "task_solution": "Maximum(Scanl1(lambda u1, u2: Add(u1, u2), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 137.68017074093223,
            "num_unique_values": 828,
            "solution": "Scanl1(lambda u1, u2: (lambda v1, v2: Add(v1, v2))(u1, u2), Reverse(x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 51.121281464530895,
                "explored_percent_lambda": 41.1441647597254,
                "explored_percent_none": 7.7345537757437075,
                "kept_percent_concrete": 41.26984126984127,
                "kept_percent_lambda": 58.73015873015873,
                "num_examples": 3,
                "num_explored_concrete": 1117,
                "num_explored_lambda": 899,
                "num_explored_none": 169,
                "num_inputs": 1,
                "num_kept_concrete": 338,
                "num_kept_lambda": 481,
                "num_values_explored": 2185,
                "num_values_kept": 819,
                "temperature": 1.0,
                "total_num_restarts": 23,
                "total_num_values_explored": 58740
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1(lambda u1, u2: Add(u1, u2), Reverse(x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(u1, u2), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.7389544546604,
            "num_unique_values": 926,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.714285714285715,
                "explored_percent_lambda": 33.51934523809524,
                "explored_percent_none": 5.7663690476190474,
                "kept_percent_concrete": 46.56488549618321,
                "kept_percent_lambda": 53.43511450381679,
                "num_examples": 3,
                "num_explored_concrete": 1632,
                "num_explored_lambda": 901,
                "num_explored_none": 155,
                "num_inputs": 1,
                "num_kept_concrete": 427,
                "num_kept_lambda": 490,
                "num_values_explored": 2688,
                "num_values_kept": 917,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 271005
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1(lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2)), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.5756941698492,
            "num_unique_values": 888,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.70710245128849,
                "explored_percent_lambda": 17.347580138277813,
                "explored_percent_none": 6.94531741043369,
                "kept_percent_concrete": 66.97038724373576,
                "kept_percent_lambda": 33.029612756264235,
                "num_examples": 3,
                "num_explored_concrete": 2409,
                "num_explored_lambda": 552,
                "num_explored_none": 221,
                "num_inputs": 2,
                "num_kept_concrete": 588,
                "num_kept_lambda": 290,
                "num_values_explored": 3182,
                "num_values_kept": 878,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 320645
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1(lambda u1, u2: Add(Add(u1, u2), n), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(Add(u1, u2), n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 47.394139882177114,
            "num_unique_values": 819,
            "solution": "Scanl1(lambda u1, u2: (lambda v1, v2: Add(v1, (lambda v1: IntDivide(v1, 2))(v2)))(u2, u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 66.14671163575042,
                "explored_percent_lambda": 27.866779089376053,
                "explored_percent_none": 5.986509274873525,
                "kept_percent_concrete": 53.95061728395062,
                "kept_percent_lambda": 46.04938271604938,
                "num_examples": 3,
                "num_explored_concrete": 1569,
                "num_explored_lambda": 661,
                "num_explored_none": 142,
                "num_inputs": 1,
                "num_kept_concrete": 437,
                "num_kept_lambda": 373,
                "num_values_explored": 2372,
                "num_values_kept": 810,
                "temperature": 1.0,
                "total_num_restarts": 8,
                "total_num_values_explored": 21288
            },
            "success": true,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1(lambda u1, u2: Add(IntDivide(u1, 2), u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(IntDivide(u1, 2), u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 471.3945639282465,
            "num_unique_values": 261,
            "solution": "Scanl1(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), Take(n, x))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 32.03463203463203,
                "explored_percent_lambda": 43.001443001443,
                "explored_percent_none": 24.963924963924963,
                "kept_percent_concrete": 54.9800796812749,
                "kept_percent_lambda": 45.0199203187251,
                "num_examples": 3,
                "num_explored_concrete": 222,
                "num_explored_lambda": 298,
                "num_explored_none": 173,
                "num_inputs": 2,
                "num_kept_concrete": 138,
                "num_kept_lambda": 113,
                "num_values_explored": 693,
                "num_values_kept": 251,
                "temperature": 1.0,
                "total_num_restarts": 79,
                "total_num_values_explored": 235911
            },
            "success": true,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1(lambda u1, u2: Multiply(u1, u2), Take(n, x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Multiply(u1, u2), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 26.268589405342937,
            "num_unique_values": 408,
            "solution": "Last(Scanl1(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 42.252066115702476,
                "explored_percent_lambda": 42.252066115702476,
                "explored_percent_none": 15.49586776859504,
                "kept_percent_concrete": 62.40601503759399,
                "kept_percent_lambda": 37.59398496240601,
                "num_examples": 5,
                "num_explored_concrete": 409,
                "num_explored_lambda": 409,
                "num_explored_none": 150,
                "num_inputs": 1,
                "num_kept_concrete": 249,
                "num_kept_lambda": 150,
                "num_values_explored": 968,
                "num_values_kept": 399,
                "temperature": 1.0,
                "total_num_restarts": 5,
                "total_num_values_explored": 13948
            },
            "success": true,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1(lambda u1, u2: Multiply(u1, u2), x))'\n)",
            "task_solution": "Last(Scanl1(lambda u1, u2: Multiply(u1, u2), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.593139834702,
            "num_unique_values": 907,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 61.21068650659452,
                "explored_percent_lambda": 33.88569496110923,
                "explored_percent_none": 4.903618532296246,
                "kept_percent_concrete": 53.4521158129176,
                "kept_percent_lambda": 46.5478841870824,
                "num_examples": 3,
                "num_explored_concrete": 1810,
                "num_explored_lambda": 1002,
                "num_explored_none": 145,
                "num_inputs": 1,
                "num_kept_concrete": 480,
                "num_kept_lambda": 418,
                "num_values_explored": 2957,
                "num_values_kept": 898,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 291145
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1(lambda u1, u2: Min(u1, u2), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Min(u1, u2), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.7615169454366,
            "num_unique_values": 918,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.1303602058319,
                "explored_percent_lambda": 26.92967409948542,
                "explored_percent_none": 4.939965694682676,
                "kept_percent_concrete": 52.25522552255226,
                "kept_percent_lambda": 47.74477447744774,
                "num_examples": 3,
                "num_explored_concrete": 1986,
                "num_explored_lambda": 785,
                "num_explored_none": 144,
                "num_inputs": 1,
                "num_kept_concrete": 475,
                "num_kept_lambda": 434,
                "num_values_explored": 2915,
                "num_values_kept": 909,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 291846
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1(lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 23.019786002114415,
            "num_unique_values": 829,
            "solution": "Scanl1(lambda u1, u2: (lambda v1: Min(Maximum(x), (lambda v1: Access(v1, x))(v1)))(u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 48.459958932238195,
                "explored_percent_lambda": 45.02053388090349,
                "explored_percent_none": 6.519507186858316,
                "kept_percent_concrete": 38.90243902439025,
                "kept_percent_lambda": 61.09756097560975,
                "num_examples": 3,
                "num_explored_concrete": 944,
                "num_explored_lambda": 877,
                "num_explored_none": 127,
                "num_inputs": 1,
                "num_kept_concrete": 319,
                "num_kept_lambda": 501,
                "num_values_explored": 1948,
                "num_values_kept": 820,
                "temperature": 1.0,
                "total_num_restarts": 4,
                "total_num_values_explored": 9602
            },
            "success": true,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1(lambda u1, u2: Access(u1, x), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Access(u1, x), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.2290295995772,
            "num_unique_values": 863,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.91395045632333,
                "explored_percent_lambda": 20.73011734028683,
                "explored_percent_none": 6.3559322033898304,
                "kept_percent_concrete": 62.88056206088993,
                "kept_percent_lambda": 37.11943793911007,
                "num_examples": 3,
                "num_explored_concrete": 2237,
                "num_explored_lambda": 636,
                "num_explored_none": 195,
                "num_inputs": 1,
                "num_kept_concrete": 537,
                "num_kept_lambda": 317,
                "num_values_explored": 3068,
                "num_values_kept": 854,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 312534
            },
            "success": false,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1(lambda u1, u2: Max(Add(u1, 1), u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Max(Add(u1, 1), u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.9417426846921,
            "num_unique_values": 932,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 60.86626139817629,
                "explored_percent_lambda": 32.56079027355623,
                "explored_percent_none": 6.572948328267477,
                "kept_percent_concrete": 49.40411700975081,
                "kept_percent_lambda": 50.59588299024919,
                "num_examples": 3,
                "num_explored_concrete": 1602,
                "num_explored_lambda": 857,
                "num_explored_none": 173,
                "num_inputs": 1,
                "num_kept_concrete": 456,
                "num_kept_lambda": 467,
                "num_values_explored": 2632,
                "num_values_kept": 923,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 266564
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1(lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 603.0874096248299,
            "num_unique_values": 1191,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.02779616148246,
                "explored_percent_lambda": 15.949702183984117,
                "explored_percent_none": 6.022501654533421,
                "kept_percent_concrete": 78.1541066892464,
                "kept_percent_lambda": 21.8458933107536,
                "num_examples": 5,
                "num_explored_concrete": 2358,
                "num_explored_lambda": 482,
                "num_explored_none": 182,
                "num_inputs": 2,
                "num_kept_concrete": 923,
                "num_kept_lambda": 258,
                "num_values_explored": 3022,
                "num_values_kept": 1181,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 316401
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count(lambda u1: Greater(u1, 0), ZipWith(lambda u1, u2: Subtract(u1, u2), a, b))'\n)",
            "task_solution": "Count(lambda u1: Greater(u1, 0), ZipWith(lambda u1, u2: Subtract(u1, u2), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.8707941286266,
            "num_unique_values": 1053,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.77112135176651,
                "explored_percent_lambda": 17.327188940092167,
                "explored_percent_none": 3.901689708141321,
                "kept_percent_concrete": 77.2770853307766,
                "kept_percent_lambda": 22.722914669223393,
                "num_examples": 5,
                "num_explored_concrete": 2564,
                "num_explored_lambda": 564,
                "num_explored_none": 127,
                "num_inputs": 2,
                "num_kept_concrete": 806,
                "num_kept_lambda": 237,
                "num_values_explored": 3255,
                "num_values_kept": 1043,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 326504
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), s, Scanl1(lambda u1, u2: Add(u1, u2), p)))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), s, Scanl1(lambda u1, u2: Add(u1, u2), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.7485558688640594,
            "num_unique_values": 251,
            "solution": "Scanl1(lambda u1, u2: (lambda v1: Add(1, v1))(u1), Map(lambda u1: 0, x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 24.198250728862973,
                "explored_percent_lambda": 53.498542274052475,
                "explored_percent_none": 22.303206997084548,
                "kept_percent_concrete": 41.32231404958678,
                "kept_percent_lambda": 58.67768595041322,
                "num_examples": 3,
                "num_explored_concrete": 166,
                "num_explored_lambda": 367,
                "num_explored_none": 153,
                "num_inputs": 1,
                "num_kept_concrete": 100,
                "num_kept_lambda": 142,
                "num_values_explored": 686,
                "num_values_kept": 242,
                "temperature": 1.0,
                "total_num_restarts": 1,
                "total_num_values_explored": 686
            },
            "success": true,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1(lambda u1, u2: Add(u1, 1), Map(lambda u1: 0, x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(u1, 1), Map(lambda u1: 0, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.5706885997206,
            "num_unique_values": 949,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 64.4639718804921,
                "explored_percent_lambda": 29.31458699472759,
                "explored_percent_none": 6.221441124780316,
                "kept_percent_concrete": 57.765957446808514,
                "kept_percent_lambda": 42.234042553191486,
                "num_examples": 3,
                "num_explored_concrete": 1834,
                "num_explored_lambda": 834,
                "num_explored_none": 177,
                "num_inputs": 1,
                "num_kept_concrete": 543,
                "num_kept_lambda": 397,
                "num_values_explored": 2845,
                "num_values_kept": 940,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 291793
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter(lambda u1: IsOdd(u1), ZipWith(lambda u1, u2: Multiply(u2, u1), x, Drop(1, x)))'\n)",
            "task_solution": "Filter(lambda u1: IsOdd(u1), ZipWith(lambda u1, u2: Multiply(u2, u1), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 123.49899093993008,
            "num_unique_values": 545,
            "solution": "Scanl1(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), Filter(lambda u1: (lambda v1: IsOdd(v1))(u1), x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 54.89296636085627,
                "explored_percent_lambda": 37.46177370030581,
                "explored_percent_none": 7.6452599388379205,
                "kept_percent_concrete": 53.54477611940298,
                "kept_percent_lambda": 46.45522388059702,
                "num_examples": 3,
                "num_explored_concrete": 718,
                "num_explored_lambda": 490,
                "num_explored_none": 100,
                "num_inputs": 1,
                "num_kept_concrete": 287,
                "num_kept_lambda": 249,
                "num_values_explored": 1308,
                "num_values_kept": 536,
                "temperature": 1.0,
                "total_num_restarts": 21,
                "total_num_values_explored": 57408
            },
            "success": true,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1(lambda u1, u2: Multiply(u1, u2), Filter(lambda u1: IsOdd(u1), x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Multiply(u1, u2), Filter(lambda u1: IsOdd(u1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.5816413220018,
            "num_unique_values": 894,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.62658032685785,
                "explored_percent_lambda": 19.17977181621955,
                "explored_percent_none": 4.193647856922603,
                "kept_percent_concrete": 57.918552036199095,
                "kept_percent_lambda": 42.081447963800905,
                "num_examples": 3,
                "num_explored_concrete": 2485,
                "num_explored_lambda": 622,
                "num_explored_none": 136,
                "num_inputs": 2,
                "num_kept_concrete": 512,
                "num_kept_lambda": 372,
                "num_values_explored": 3243,
                "num_values_kept": 884,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 319338
            },
            "success": false,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1(lambda u1, u2: Add(u1, u2), ZipWith(lambda u1, u2: Add(u1, u2), x, y))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(u1, u2), ZipWith(lambda u1, u2: Add(u1, u2), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 602.6961753424257,
            "num_unique_values": 899,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.50378413951958,
                "explored_percent_lambda": 21.09246462652188,
                "explored_percent_none": 7.403751233958539,
                "kept_percent_concrete": 59.009009009009006,
                "kept_percent_lambda": 40.990990990990994,
                "num_examples": 3,
                "num_explored_concrete": 2173,
                "num_explored_lambda": 641,
                "num_explored_none": 225,
                "num_inputs": 3,
                "num_kept_concrete": 524,
                "num_kept_lambda": 364,
                "num_values_explored": 3039,
                "num_values_kept": 888,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 308917
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith(lambda u1, u2: Add(u1, u2), x, Map(lambda u1: Access(u1, y), i))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Add(u1, u2), x, Map(lambda u1: Access(u1, y), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 603.0449489019811,
            "num_unique_values": 1056,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.70049099836334,
                "explored_percent_lambda": 24.779050736497545,
                "explored_percent_none": 2.520458265139116,
                "kept_percent_concrete": 64.62715105162523,
                "kept_percent_lambda": 35.37284894837476,
                "num_examples": 3,
                "num_explored_concrete": 2221,
                "num_explored_lambda": 757,
                "num_explored_none": 77,
                "num_inputs": 2,
                "num_kept_concrete": 676,
                "num_kept_lambda": 370,
                "num_values_explored": 3055,
                "num_values_kept": 1046,
                "temperature": 1.0,
                "total_num_restarts": 100,
                "total_num_values_explored": 295617
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter(lambda u1: Greater(u1, -1), ZipWith(lambda u1, u2: Subtract(u1, u2), x, y))'\n)",
            "task_solution": "Filter(lambda u1: Greater(u1, -1), ZipWith(lambda u1, u2: Subtract(u1, u2), x, y))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.68
}