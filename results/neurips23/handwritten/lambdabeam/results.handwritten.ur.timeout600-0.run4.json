{
    "num_tasks": 100,
    "num_tasks_solved": 53,
    "results": [
        {
            "elapsed_time": 3.7114671617746353,
            "num_unique_values": 757,
            "solution": "Sum(Take(k, Sort(Take(Square(k), b))))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 72.45883021010789,
                "explored_percent_lambda": 17.262918796138557,
                "explored_percent_none": 10.278250993753549,
                "kept_percent_concrete": 80.72289156626506,
                "kept_percent_lambda": 19.27710843373494,
                "num_examples": 5,
                "num_explored_concrete": 1276,
                "num_explored_lambda": 304,
                "num_explored_none": 181,
                "num_inputs": 2,
                "num_kept_concrete": 603,
                "num_kept_lambda": 144,
                "num_values_explored": 1761,
                "num_values_kept": 747,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 88.37224630825222,
            "num_unique_values": 1873,
            "solution": "If(IsEven(x), IntDivide(x, 2), Subtract(Multiply(x, 3), -1))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 34.61267605633803,
                "explored_percent_lambda": 7.343505477308295,
                "explored_percent_none": 58.04381846635368,
                "kept_percent_concrete": 93.93776824034335,
                "kept_percent_lambda": 6.062231759656652,
                "num_examples": 5,
                "num_explored_concrete": 17694,
                "num_explored_lambda": 3754,
                "num_explored_none": 29672,
                "num_inputs": 1,
                "num_kept_concrete": 1751,
                "num_kept_lambda": 113,
                "num_values_explored": 51120,
                "num_values_kept": 1864,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 16.694922039285302,
            "num_unique_values": 502,
            "solution": "Subtract(y, Subtract(x, Multiply(y, Subtract(x, 2))))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 28.2212086659065,
                "explored_percent_lambda": 7.126567844925884,
                "explored_percent_none": 64.65222348916761,
                "kept_percent_concrete": 91.46341463414635,
                "kept_percent_lambda": 8.536585365853659,
                "num_examples": 5,
                "num_explored_concrete": 2970,
                "num_explored_lambda": 750,
                "num_explored_none": 6804,
                "num_inputs": 2,
                "num_kept_concrete": 450,
                "num_kept_lambda": 42,
                "num_values_explored": 10524,
                "num_values_kept": 492,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 52.143688801676035,
            "num_unique_values": 1252,
            "solution": "Add(Multiply(k, 2), Multiply(k, IntDivide(Subtract(x, k), k)))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 34.01144705735971,
                "explored_percent_lambda": 6.432748538011696,
                "explored_percent_none": 59.555804404628596,
                "kept_percent_concrete": 92.02898550724638,
                "kept_percent_lambda": 7.971014492753623,
                "num_examples": 5,
                "num_explored_concrete": 10934,
                "num_explored_lambda": 2068,
                "num_explored_none": 19146,
                "num_inputs": 2,
                "num_kept_concrete": 1143,
                "num_kept_lambda": 99,
                "num_values_explored": 32148,
                "num_values_kept": 1242,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.635268848389387,
            "num_unique_values": 467,
            "solution": "Reverse(Drop(n, Reverse(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 58.408408408408405,
                "explored_percent_lambda": 26.8018018018018,
                "explored_percent_none": 14.78978978978979,
                "kept_percent_concrete": 60.61269146608315,
                "kept_percent_lambda": 39.38730853391685,
                "num_examples": 3,
                "num_explored_concrete": 778,
                "num_explored_lambda": 357,
                "num_explored_none": 197,
                "num_inputs": 2,
                "num_kept_concrete": 277,
                "num_kept_lambda": 180,
                "num_values_explored": 1332,
                "num_values_kept": 457,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.5268498361110687,
            "num_unique_values": 469,
            "solution": "Reverse(Sort(Drop(Multiply(n, -1), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 51.271860095389506,
                "explored_percent_lambda": 33.38632750397456,
                "explored_percent_none": 15.34181240063593,
                "kept_percent_concrete": 59.47712418300654,
                "kept_percent_lambda": 40.52287581699346,
                "num_examples": 3,
                "num_explored_concrete": 645,
                "num_explored_lambda": 420,
                "num_explored_none": 193,
                "num_inputs": 2,
                "num_kept_concrete": 273,
                "num_kept_lambda": 186,
                "num_values_explored": 1258,
                "num_values_kept": 459,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.9257214162498713,
            "num_unique_values": 156,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 10.734463276836157,
                "explored_percent_lambda": 70.90395480225989,
                "explored_percent_none": 18.361581920903955,
                "kept_percent_concrete": 19.727891156462587,
                "kept_percent_lambda": 80.27210884353741,
                "num_examples": 3,
                "num_explored_concrete": 38,
                "num_explored_lambda": 251,
                "num_explored_none": 65,
                "num_inputs": 1,
                "num_kept_concrete": 29,
                "num_kept_lambda": 118,
                "num_values_explored": 354,
                "num_values_kept": 147,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.8684755694121122,
            "num_unique_values": 157,
            "solution": "Drop(i, Take(j, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 24.345549738219894,
                "explored_percent_lambda": 53.1413612565445,
                "explored_percent_none": 22.513089005235603,
                "kept_percent_concrete": 37.67123287671233,
                "kept_percent_lambda": 62.32876712328767,
                "num_examples": 3,
                "num_explored_concrete": 93,
                "num_explored_lambda": 203,
                "num_explored_none": 86,
                "num_inputs": 3,
                "num_kept_concrete": 55,
                "num_kept_lambda": 91,
                "num_values_explored": 382,
                "num_values_kept": 146,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.053392428904772,
            "num_unique_values": 519,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Max(4, v1))(u1), Reverse(Sort(x)), Take(k, x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 56.23342175066313,
                "explored_percent_lambda": 30.57029177718833,
                "explored_percent_none": 13.196286472148541,
                "kept_percent_concrete": 63.06483300589391,
                "kept_percent_lambda": 36.93516699410609,
                "num_examples": 3,
                "num_explored_concrete": 848,
                "num_explored_lambda": 461,
                "num_explored_none": 199,
                "num_inputs": 2,
                "num_kept_concrete": 321,
                "num_kept_lambda": 188,
                "num_values_explored": 1508,
                "num_values_kept": 509,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 9.035722211003304,
            "num_unique_values": 1471,
            "solution": "Maximum(Scanl1(lambda u1, u2: Minimum(Drop(2, Sort(x))), Drop(k, Take(-1, x))))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 84.33602347762289,
                "explored_percent_lambda": 9.427732942039619,
                "explored_percent_none": 6.236243580337491,
                "kept_percent_concrete": 84.05201916495551,
                "kept_percent_lambda": 15.94798083504449,
                "num_examples": 5,
                "num_explored_concrete": 4598,
                "num_explored_lambda": 514,
                "num_explored_none": 340,
                "num_inputs": 2,
                "num_kept_concrete": 1228,
                "num_kept_lambda": 233,
                "num_values_explored": 5452,
                "num_values_kept": 1461,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 573.7754568327218,
            "num_unique_values": 15290,
            "solution": "IntDivide(Subtract(Last(x), Subtract(0, Head(x))), 2)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 83.98514713512077,
                "explored_percent_lambda": 5.275682721538798,
                "explored_percent_none": 10.739170143340436,
                "kept_percent_concrete": 91.83953929716641,
                "kept_percent_lambda": 8.160460702833584,
                "num_examples": 5,
                "num_explored_concrete": 195871,
                "num_explored_lambda": 12304,
                "num_explored_none": 25046,
                "num_inputs": 1,
                "num_kept_concrete": 14034,
                "num_kept_lambda": 1247,
                "num_values_explored": 233221,
                "num_values_kept": 15281,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.7914941646158695,
            "num_unique_values": 335,
            "solution": "Max(Minimum(Drop(1, x)), Minimum(Take(-1, x)))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 31.919905771495877,
                "explored_percent_lambda": 43.81625441696113,
                "explored_percent_none": 24.26383981154299,
                "kept_percent_concrete": 49.693251533742334,
                "kept_percent_lambda": 50.306748466257666,
                "num_examples": 5,
                "num_explored_concrete": 271,
                "num_explored_lambda": 372,
                "num_explored_none": 206,
                "num_inputs": 1,
                "num_kept_concrete": 162,
                "num_kept_lambda": 164,
                "num_values_explored": 849,
                "num_values_kept": 326,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 66.32855985499918,
            "num_unique_values": 5043,
            "solution": "Add(3, Subtract(Maximum(Map(lambda u1: (lambda v1: Subtract(v1, 3))(u1), x)), Minimum(x)))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 86.56191369606003,
                "explored_percent_lambda": 5.871833958724203,
                "explored_percent_none": 7.5662523452157595,
                "kept_percent_concrete": 88.41875248311482,
                "kept_percent_lambda": 11.581247516885181,
                "num_examples": 5,
                "num_explored_concrete": 29528,
                "num_explored_lambda": 2003,
                "num_explored_none": 2581,
                "num_inputs": 1,
                "num_kept_concrete": 4451,
                "num_kept_lambda": 583,
                "num_values_explored": 34112,
                "num_values_kept": 5034,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0928648300469,
            "num_unique_values": 17438,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 87.99489523357275,
                "explored_percent_lambda": 2.6859381492253815,
                "explored_percent_none": 9.319166617201876,
                "kept_percent_concrete": 95.72526968097314,
                "kept_percent_lambda": 4.274730319026854,
                "num_examples": 5,
                "num_explored_concrete": 207543,
                "num_explored_lambda": 6335,
                "num_explored_none": 21980,
                "num_inputs": 2,
                "num_kept_concrete": 16683,
                "num_kept_lambda": 745,
                "num_values_explored": 235858,
                "num_values_kept": 17428,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3157841917127,
            "num_unique_values": 16604,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 86.79017300922325,
                "explored_percent_lambda": 2.3823261336745016,
                "explored_percent_none": 10.827500857102242,
                "kept_percent_concrete": 97.14957213450644,
                "kept_percent_lambda": 2.8504278654935518,
                "num_examples": 5,
                "num_explored_concrete": 207583,
                "num_explored_lambda": 5698,
                "num_explored_none": 25897,
                "num_inputs": 2,
                "num_kept_concrete": 16121,
                "num_kept_lambda": 473,
                "num_values_explored": 239178,
                "num_values_kept": 16594,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 41.349476447328925,
            "num_unique_values": 2619,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Multiply(v1, (lambda v1: Square(v1))(v1)))(u1), x, x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 69.75917883932097,
                "explored_percent_lambda": 20.88432688511646,
                "explored_percent_none": 9.356494275562573,
                "kept_percent_concrete": 51.30268199233716,
                "kept_percent_lambda": 48.69731800766284,
                "num_examples": 3,
                "num_explored_concrete": 14136,
                "num_explored_lambda": 4232,
                "num_explored_none": 1896,
                "num_inputs": 1,
                "num_kept_concrete": 1339,
                "num_kept_lambda": 1271,
                "num_values_explored": 20264,
                "num_values_kept": 2610,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map(lambda u1: Multiply(u1, Square(u1)), x)'\n)",
            "task_solution": "Map(lambda u1: Multiply(u1, Square(u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 66.05212690494955,
            "num_unique_values": 3971,
            "solution": "Map(lambda u1: (lambda v1: Max(v1, (lambda v1: Multiply(-1, v1))(v1)))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 75.98173241594809,
                "explored_percent_lambda": 17.96713036685395,
                "explored_percent_none": 6.051137217197969,
                "kept_percent_concrete": 59.91923271075215,
                "kept_percent_lambda": 40.08076728924785,
                "num_examples": 3,
                "num_explored_concrete": 25289,
                "num_explored_lambda": 5980,
                "num_explored_none": 2014,
                "num_inputs": 1,
                "num_kept_concrete": 2374,
                "num_kept_lambda": 1588,
                "num_values_explored": 33283,
                "num_values_kept": 3962,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map(lambda u1: Max(u1, Subtract(0, u1)), x)'\n)",
            "task_solution": "Map(lambda u1: Max(u1, Subtract(0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.458575015887618,
            "num_unique_values": 534,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Subtract((lambda v1: Square(v1))(v2), v1))(u2, u1), x, x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 47.521246458923514,
                "explored_percent_lambda": 41.288951841359776,
                "explored_percent_none": 11.189801699716714,
                "kept_percent_concrete": 47.42857142857143,
                "kept_percent_lambda": 52.57142857142857,
                "num_examples": 3,
                "num_explored_concrete": 671,
                "num_explored_lambda": 583,
                "num_explored_none": 158,
                "num_inputs": 1,
                "num_kept_concrete": 249,
                "num_kept_lambda": 276,
                "num_values_explored": 1412,
                "num_values_kept": 525,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map(lambda u1: Subtract(Square(u1), u1), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(Square(u1), u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0213859956712,
            "num_unique_values": 13255,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.38630357157652,
                "explored_percent_lambda": 21.40916132987581,
                "explored_percent_none": 4.204535098547675,
                "kept_percent_concrete": 53.0197795560924,
                "kept_percent_lambda": 46.9802204439076,
                "num_examples": 3,
                "num_explored_concrete": 179573,
                "num_explored_lambda": 51683,
                "num_explored_none": 10150,
                "num_inputs": 1,
                "num_kept_concrete": 7023,
                "num_kept_lambda": 6223,
                "num_values_explored": 241406,
                "num_values_kept": 13246,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map(lambda u1: IntDivide(Add(Square(u1), u1), 2), x)'\n)",
            "task_solution": "Map(lambda u1: IntDivide(Add(Square(u1), u1), 2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 17.860562589019537,
            "num_unique_values": 1626,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Add(b, (lambda v1: Multiply(a, v1))(v1)))(u2), x, x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 74.4013457352068,
                "explored_percent_lambda": 13.635464080744113,
                "explored_percent_none": 11.963190184049079,
                "kept_percent_concrete": 67.18266253869969,
                "kept_percent_lambda": 32.81733746130031,
                "num_examples": 3,
                "num_explored_concrete": 7519,
                "num_explored_lambda": 1378,
                "num_explored_none": 1209,
                "num_inputs": 3,
                "num_kept_concrete": 1085,
                "num_kept_lambda": 530,
                "num_values_explored": 10106,
                "num_values_kept": 1615,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map(lambda u1: Add(Multiply(a, u1), b), x)'\n)",
            "task_solution": "Map(lambda u1: Add(Multiply(a, u1), b), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 319.52432173490524,
            "num_unique_values": 9174,
            "solution": "Map(lambda u1: (lambda v1: Subtract((lambda v1: Multiply(3, v1))(v1), 4))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 72.64965701031437,
                "explored_percent_lambda": 22.25872632031641,
                "explored_percent_none": 5.091616669369223,
                "kept_percent_concrete": 58.243316966721224,
                "kept_percent_lambda": 41.756683033278776,
                "num_examples": 3,
                "num_explored_concrete": 103047,
                "num_explored_lambda": 31572,
                "num_explored_none": 7222,
                "num_inputs": 1,
                "num_kept_concrete": 5338,
                "num_kept_lambda": 3827,
                "num_values_explored": 141841,
                "num_values_kept": 9165,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map(lambda u1: Subtract(Multiply(u1, 3), 4), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(Multiply(u1, 3), 4), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.2174180522561,
            "num_unique_values": 13944,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.58197686354856,
                "explored_percent_lambda": 25.35917643953392,
                "explored_percent_none": 5.058846696917514,
                "kept_percent_concrete": 57.072120559741656,
                "kept_percent_lambda": 42.927879440258344,
                "num_examples": 3,
                "num_explored_concrete": 166072,
                "num_explored_lambda": 60525,
                "num_explored_none": 12074,
                "num_inputs": 1,
                "num_kept_concrete": 7953,
                "num_kept_lambda": 5982,
                "num_values_explored": 238671,
                "num_values_kept": 13935,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map(lambda u1: Multiply(u1, Add(u1, 2)), x)'\n)",
            "task_solution": "Map(lambda u1: Multiply(u1, Add(u1, 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.099378276616335,
            "num_unique_values": 253,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Max(a, (lambda v1: Min(b, v1))(v1)))(u1), x, x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 26.848249027237355,
                "explored_percent_lambda": 44.87678339818417,
                "explored_percent_none": 28.27496757457847,
                "kept_percent_concrete": 48.34710743801653,
                "kept_percent_lambda": 51.65289256198347,
                "num_examples": 3,
                "num_explored_concrete": 207,
                "num_explored_lambda": 346,
                "num_explored_none": 218,
                "num_inputs": 3,
                "num_kept_concrete": 117,
                "num_kept_lambda": 125,
                "num_values_explored": 771,
                "num_values_kept": 242,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map(lambda u1: Max(Min(u1, b), a), x)'\n)",
            "task_solution": "Map(lambda u1: Max(Min(u1, b), a), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.009648937732,
            "num_unique_values": 14077,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.31960793734685,
                "explored_percent_lambda": 23.56580022101571,
                "explored_percent_none": 5.114591841637438,
                "kept_percent_concrete": 63.65510378163207,
                "kept_percent_lambda": 36.34489621836793,
                "num_examples": 3,
                "num_explored_concrete": 178125,
                "num_explored_lambda": 58857,
                "num_explored_none": 12774,
                "num_inputs": 1,
                "num_kept_concrete": 8955,
                "num_kept_lambda": 5113,
                "num_values_explored": 249756,
                "num_values_kept": 14068,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map(lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1)), x)'\n)",
            "task_solution": "Map(lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.4845368415117264,
            "num_unique_values": 480,
            "solution": "Sort(Reverse(Map(lambda u1: (lambda v1: Square(v1))(u1), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 49.554655870445345,
                "explored_percent_lambda": 38.8663967611336,
                "explored_percent_none": 11.578947368421053,
                "kept_percent_concrete": 46.496815286624205,
                "kept_percent_lambda": 53.503184713375795,
                "num_examples": 3,
                "num_explored_concrete": 612,
                "num_explored_lambda": 480,
                "num_explored_none": 143,
                "num_inputs": 1,
                "num_kept_concrete": 219,
                "num_kept_lambda": 252,
                "num_values_explored": 1235,
                "num_values_kept": 471,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map(lambda u1: Square(u1), x))'\n)",
            "task_solution": "Sort(Map(lambda u1: Square(u1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 6.996270237490535,
            "num_unique_values": 1007,
            "solution": "Reverse(Map(lambda u1: (lambda v1: Max(0, (lambda v1: Subtract(v1, Minimum(x)))(v1)))(u1), Reverse(x)))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 65.78573458368855,
                "explored_percent_lambda": 29.41176470588235,
                "explored_percent_none": 4.802500710429099,
                "kept_percent_concrete": 43.8877755511022,
                "kept_percent_lambda": 56.1122244488978,
                "num_examples": 3,
                "num_explored_concrete": 2315,
                "num_explored_lambda": 1035,
                "num_explored_none": 169,
                "num_inputs": 1,
                "num_kept_concrete": 438,
                "num_kept_lambda": 560,
                "num_values_explored": 3519,
                "num_values_kept": 998,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map(lambda u1: Subtract(u1, Minimum(x)), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(u1, Minimum(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 33.70146730914712,
            "num_unique_values": 2366,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Subtract(v1, Access(i, x)))(u1), x, Sort(x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 79.18868511035126,
                "explored_percent_lambda": 13.122992436016993,
                "explored_percent_none": 7.688322453631748,
                "kept_percent_concrete": 69.90662139219015,
                "kept_percent_lambda": 30.093378607809846,
                "num_examples": 3,
                "num_explored_concrete": 15285,
                "num_explored_lambda": 2533,
                "num_explored_none": 1484,
                "num_inputs": 2,
                "num_kept_concrete": 1647,
                "num_kept_lambda": 709,
                "num_values_explored": 19302,
                "num_values_kept": 2356,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map(lambda u1: Subtract(u1, Access(i, x)), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(u1, Access(i, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 449.8504643831402,
            "num_unique_values": 10030,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Add(t, (lambda v1: Subtract(v1, Head(x)))(v1)))(u1), x, x)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 72.35027542290112,
                "explored_percent_lambda": 21.000019533539085,
                "explored_percent_none": 6.649705043559792,
                "kept_percent_concrete": 58.63273453093812,
                "kept_percent_lambda": 41.36726546906188,
                "num_examples": 3,
                "num_explored_concrete": 148156,
                "num_explored_lambda": 43003,
                "num_explored_none": 13617,
                "num_inputs": 2,
                "num_kept_concrete": 5875,
                "num_kept_lambda": 4145,
                "num_values_explored": 204776,
                "num_values_kept": 10020,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map(lambda u1: Add(u1, Subtract(t, Head(x))), x)'\n)",
            "task_solution": "Map(lambda u1: Add(u1, Subtract(t, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.364149184897542,
            "num_unique_values": 232,
            "solution": "Map(lambda u1: (lambda v1: Access(v1, x))(u1), i)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 28.104575163398692,
                "explored_percent_lambda": 54.46623093681917,
                "explored_percent_none": 17.429193899782135,
                "kept_percent_concrete": 41.44144144144144,
                "kept_percent_lambda": 58.55855855855856,
                "num_examples": 3,
                "num_explored_concrete": 129,
                "num_explored_lambda": 250,
                "num_explored_none": 80,
                "num_inputs": 2,
                "num_kept_concrete": 92,
                "num_kept_lambda": 130,
                "num_values_explored": 459,
                "num_values_kept": 222,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map(lambda u1: Access(u1, x), i)'\n)",
            "task_solution": "Map(lambda u1: Access(u1, x), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.330304929986596,
            "num_unique_values": 1160,
            "solution": "Max(3, Maximum(ZipWith(lambda u1, u2: (lambda v1: Access(v1, x))(u2), x, Drop(2, i))))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 78.2141533901445,
                "explored_percent_lambda": 17.636161541311598,
                "explored_percent_none": 4.1496850685439055,
                "kept_percent_concrete": 80.17391304347827,
                "kept_percent_lambda": 19.82608695652174,
                "num_examples": 5,
                "num_explored_concrete": 2111,
                "num_explored_lambda": 476,
                "num_explored_none": 112,
                "num_inputs": 2,
                "num_kept_concrete": 922,
                "num_kept_lambda": 228,
                "num_values_explored": 2699,
                "num_values_kept": 1150,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map(lambda u1: Access(u1, x), i))'\n)",
            "task_solution": "Maximum(Map(lambda u1: Access(u1, x), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.4088589493185282,
            "num_unique_values": 252,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: If((lambda v1: IsEven(v1))(v2), v1, 0))(u1, u2), x, x)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 24.156305506216697,
                "explored_percent_lambda": 58.792184724689164,
                "explored_percent_none": 17.05150976909414,
                "kept_percent_concrete": 41.56378600823045,
                "kept_percent_lambda": 58.43621399176955,
                "num_examples": 3,
                "num_explored_concrete": 136,
                "num_explored_lambda": 331,
                "num_explored_none": 96,
                "num_inputs": 1,
                "num_kept_concrete": 101,
                "num_kept_lambda": 142,
                "num_values_explored": 563,
                "num_values_kept": 243,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map(lambda u1: If(IsOdd(u1), 0, u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(IsOdd(u1), 0, u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0194529183209,
            "num_unique_values": 12629,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.92992836884312,
                "explored_percent_lambda": 20.620905289391402,
                "explored_percent_none": 5.4491663417654745,
                "kept_percent_concrete": 63.07655729909653,
                "kept_percent_lambda": 36.92344270090347,
                "num_examples": 3,
                "num_explored_concrete": 193414,
                "num_explored_lambda": 53948,
                "num_explored_none": 14256,
                "num_inputs": 3,
                "num_kept_concrete": 7959,
                "num_kept_lambda": 4659,
                "num_values_explored": 261618,
                "num_values_kept": 12618,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map(lambda u1: If(Equal(u1, f), r, u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(Equal(u1, f), r, u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.2948200646788,
            "num_unique_values": 12994,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.89175745418665,
                "explored_percent_lambda": 28.6058853864239,
                "explored_percent_none": 4.502357159389453,
                "kept_percent_concrete": 52.626309303758475,
                "kept_percent_lambda": 47.373690696241525,
                "num_examples": 3,
                "num_explored_concrete": 164735,
                "num_explored_lambda": 70448,
                "num_explored_none": 11088,
                "num_inputs": 2,
                "num_kept_concrete": 6833,
                "num_kept_lambda": 6151,
                "num_values_explored": 246271,
                "num_values_kept": 12984,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map(lambda u1: If(Less(u1, 0), y, u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(Less(u1, 0), y, u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.5147442799061537,
            "num_unique_values": 532,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Add(v1, Last(x)))(u1), x, Take(-1, x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 56.724367509986685,
                "explored_percent_lambda": 32.75632490013316,
                "explored_percent_none": 10.51930758988016,
                "kept_percent_concrete": 60.038240917782026,
                "kept_percent_lambda": 39.961759082217974,
                "num_examples": 3,
                "num_explored_concrete": 852,
                "num_explored_lambda": 492,
                "num_explored_none": 158,
                "num_inputs": 1,
                "num_kept_concrete": 314,
                "num_kept_lambda": 209,
                "num_values_explored": 1502,
                "num_values_kept": 523,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map(lambda u1: Add(u1, Last(x)), x))'\n)",
            "task_solution": "Take(-1, Map(lambda u1: Add(u1, Last(x)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.423019602894783,
            "num_unique_values": 214,
            "solution": "Map(lambda u1: Head(x), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 24.23756019261637,
                "explored_percent_lambda": 61.637239165329056,
                "explored_percent_none": 14.125200642054574,
                "kept_percent_concrete": 38.048780487804876,
                "kept_percent_lambda": 61.951219512195124,
                "num_examples": 3,
                "num_explored_concrete": 151,
                "num_explored_lambda": 384,
                "num_explored_none": 88,
                "num_inputs": 1,
                "num_kept_concrete": 78,
                "num_kept_lambda": 127,
                "num_values_explored": 623,
                "num_values_kept": 205,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map(lambda u1: Head(x), x)'\n)",
            "task_solution": "Map(lambda u1: Head(x), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.4122636672109365,
            "num_unique_values": 484,
            "solution": "Sum(Map(lambda u1: 1, x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 41.072999120492526,
                "explored_percent_lambda": 33.06948109058927,
                "explored_percent_none": 25.857519788918207,
                "kept_percent_concrete": 67.36842105263158,
                "kept_percent_lambda": 32.63157894736842,
                "num_examples": 5,
                "num_explored_concrete": 467,
                "num_explored_lambda": 376,
                "num_explored_none": 294,
                "num_inputs": 1,
                "num_kept_concrete": 320,
                "num_kept_lambda": 155,
                "num_values_explored": 1137,
                "num_values_kept": 475,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map(lambda u1: 1, x))'\n)",
            "task_solution": "Sum(Map(lambda u1: 1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0141785591841,
            "num_unique_values": 16250,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 89.36169339446454,
                "explored_percent_lambda": 3.14207257756671,
                "explored_percent_none": 7.496234027968756,
                "kept_percent_concrete": 93.38094944892556,
                "kept_percent_lambda": 6.619050551074441,
                "num_examples": 5,
                "num_explored_concrete": 217711,
                "num_explored_lambda": 7655,
                "num_explored_none": 18263,
                "num_inputs": 1,
                "num_kept_concrete": 15166,
                "num_kept_lambda": 1075,
                "num_values_explored": 243629,
                "num_values_kept": 16241,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map(lambda u1: 1, x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map(lambda u1: 1, x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 52.58803336881101,
            "num_unique_values": 3688,
            "solution": "Map(lambda u1: (lambda v1: If((lambda v1: Less(y, v1))(v1), 1, 0))(u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 69.68766384540484,
                "explored_percent_lambda": 24.144258857014457,
                "explored_percent_none": 6.168077297580705,
                "kept_percent_concrete": 51.52256661228929,
                "kept_percent_lambda": 48.47743338771071,
                "num_examples": 3,
                "num_explored_concrete": 18608,
                "num_explored_lambda": 6447,
                "num_explored_none": 1647,
                "num_inputs": 2,
                "num_kept_concrete": 1895,
                "num_kept_lambda": 1783,
                "num_values_explored": 26702,
                "num_values_kept": 3678,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map(lambda u1: If(Greater(u1, y), 1, 0), x)'\n)",
            "task_solution": "Map(lambda u1: If(Greater(u1, y), 1, 0), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.1225399691612,
            "num_unique_values": 13053,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.98144931009006,
                "explored_percent_lambda": 22.502845504103515,
                "explored_percent_none": 6.515705185806426,
                "kept_percent_concrete": 55.926096289481755,
                "kept_percent_lambda": 44.073903710518245,
                "num_examples": 3,
                "num_explored_concrete": 177734,
                "num_explored_lambda": 56346,
                "num_explored_none": 16315,
                "num_inputs": 1,
                "num_kept_concrete": 7295,
                "num_kept_lambda": 5749,
                "num_values_explored": 250395,
                "num_values_kept": 13044,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map(lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3600526712835,
            "num_unique_values": 13827,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.25547066241377,
                "explored_percent_lambda": 19.531972874103513,
                "explored_percent_none": 4.212556463482718,
                "kept_percent_concrete": 66.14315698053123,
                "kept_percent_lambda": 33.85684301946877,
                "num_examples": 3,
                "num_explored_concrete": 195320,
                "num_explored_lambda": 50029,
                "num_explored_none": 10790,
                "num_inputs": 2,
                "num_kept_concrete": 9139,
                "num_kept_lambda": 4678,
                "num_values_explored": 256139,
                "num_values_kept": 13817,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map(lambda u1: If(IsOdd(u1), Multiply(u1, n), u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(IsOdd(u1), Multiply(u1, n), u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 12.844105383381248,
            "num_unique_values": 1516,
            "solution": "Filter(lambda u1: (lambda v1: Greater(v1, Add(y, IntDivide(1, y))))(u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 76.92067944522363,
                "explored_percent_lambda": 17.843228923172823,
                "explored_percent_none": 5.236091631603553,
                "kept_percent_concrete": 68.39309428950864,
                "kept_percent_lambda": 31.606905710491368,
                "num_examples": 3,
                "num_explored_concrete": 4936,
                "num_explored_lambda": 1145,
                "num_explored_none": 336,
                "num_inputs": 2,
                "num_kept_concrete": 1030,
                "num_kept_lambda": 476,
                "num_values_explored": 6417,
                "num_values_kept": 1506,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter(lambda u1: Greater(u1, y), x)'\n)",
            "task_solution": "Filter(lambda u1: Greater(u1, y), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.5723473578691483,
            "num_unique_values": 223,
            "solution": "Filter(lambda u1: (lambda v1: IsEven(v1))(u1), Sort(x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 28.171091445427727,
                "explored_percent_lambda": 52.064896755162245,
                "explored_percent_none": 19.764011799410028,
                "kept_percent_concrete": 43.925233644859816,
                "kept_percent_lambda": 56.074766355140184,
                "num_examples": 3,
                "num_explored_concrete": 191,
                "num_explored_lambda": 353,
                "num_explored_none": 134,
                "num_inputs": 1,
                "num_kept_concrete": 94,
                "num_kept_lambda": 120,
                "num_values_explored": 678,
                "num_values_kept": 214,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter(lambda u1: IsEven(u1), Sort(x))'\n)",
            "task_solution": "Filter(lambda u1: IsEven(u1), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.8765402995049953,
            "num_unique_values": 462,
            "solution": "Maximum(Filter(lambda u1: (lambda v1: IsOdd(v1))(u1), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 51.25448028673835,
                "explored_percent_lambda": 36.67861409796894,
                "explored_percent_none": 12.066905615292711,
                "kept_percent_concrete": 65.34216335540839,
                "kept_percent_lambda": 34.65783664459161,
                "num_examples": 5,
                "num_explored_concrete": 429,
                "num_explored_lambda": 307,
                "num_explored_none": 101,
                "num_inputs": 1,
                "num_kept_concrete": 296,
                "num_kept_lambda": 157,
                "num_values_explored": 837,
                "num_values_kept": 453,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter(lambda u1: IsOdd(u1), x))'\n)",
            "task_solution": "Maximum(Filter(lambda u1: IsOdd(u1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.679710254073143,
            "num_unique_values": 509,
            "solution": "Filter(lambda u1: (lambda v1: IsOdd(v1))(u1), Filter(lambda u1: (lambda v1: Less(v1, 0))(u1), x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 50.197005516154455,
                "explored_percent_lambda": 38.455476753349096,
                "explored_percent_none": 11.347517730496454,
                "kept_percent_concrete": 59.2,
                "kept_percent_lambda": 40.8,
                "num_examples": 3,
                "num_explored_concrete": 637,
                "num_explored_lambda": 488,
                "num_explored_none": 144,
                "num_inputs": 1,
                "num_kept_concrete": 296,
                "num_kept_lambda": 204,
                "num_values_explored": 1269,
                "num_values_kept": 500,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter(lambda u1: IsOdd(Min(u1, 0)), x)'\n)",
            "task_solution": "Filter(lambda u1: IsOdd(Min(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.9741427320986986,
            "num_unique_values": 492,
            "solution": "Sum(Filter(lambda u1: (lambda v1: Greater(v1, -1))(u1), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 53.082191780821915,
                "explored_percent_lambda": 37.44292237442922,
                "explored_percent_none": 9.474885844748858,
                "kept_percent_concrete": 65.83850931677019,
                "kept_percent_lambda": 34.161490683229815,
                "num_examples": 5,
                "num_explored_concrete": 465,
                "num_explored_lambda": 328,
                "num_explored_none": 83,
                "num_inputs": 1,
                "num_kept_concrete": 318,
                "num_kept_lambda": 165,
                "num_values_explored": 876,
                "num_values_kept": 483,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter(lambda u1: Greater(u1, 0), x))'\n)",
            "task_solution": "Sum(Filter(lambda u1: Greater(u1, 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.492613723501563,
            "num_unique_values": 701,
            "solution": "Drop(1, Filter(lambda u1: (lambda v1: Greater(4, v1))(u1), Reverse(Take(-1, Sort(x)))))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 61.05137395459976,
                "explored_percent_lambda": 32.07885304659498,
                "explored_percent_none": 6.8697729988052565,
                "kept_percent_concrete": 63.4393063583815,
                "kept_percent_lambda": 36.5606936416185,
                "num_examples": 3,
                "num_explored_concrete": 1022,
                "num_explored_lambda": 537,
                "num_explored_none": 115,
                "num_inputs": 1,
                "num_kept_concrete": 439,
                "num_kept_lambda": 253,
                "num_values_explored": 1674,
                "num_values_kept": 692,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter(lambda u1: Less(u1, 0), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter(lambda u1: Less(u1, 0), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.482908066362143,
            "num_unique_values": 777,
            "solution": "Filter(lambda u1: (lambda v1: Greater(b, v1))(u1), Filter(lambda u1: (lambda v1: Less(a, v1))(u1), x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 66.81523500810373,
                "explored_percent_lambda": 19.93517017828201,
                "explored_percent_none": 13.249594813614262,
                "kept_percent_concrete": 69.71279373368147,
                "kept_percent_lambda": 30.287206266318538,
                "num_examples": 3,
                "num_explored_concrete": 1649,
                "num_explored_lambda": 492,
                "num_explored_none": 327,
                "num_inputs": 3,
                "num_kept_concrete": 534,
                "num_kept_lambda": 232,
                "num_values_explored": 2468,
                "num_values_kept": 766,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter(lambda u1: Less(u1, b), Filter(lambda u1: Greater(u1, a), x))'\n)",
            "task_solution": "Filter(lambda u1: Less(u1, b), Filter(lambda u1: Greater(u1, a), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0184415988624,
            "num_unique_values": 15769,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.51690144369104,
                "explored_percent_lambda": 21.439354133827074,
                "explored_percent_none": 5.043744422481881,
                "kept_percent_concrete": 64.94701440446728,
                "kept_percent_lambda": 35.05298559553271,
                "num_examples": 3,
                "num_explored_concrete": 176295,
                "num_explored_lambda": 51412,
                "num_explored_none": 12095,
                "num_inputs": 2,
                "num_kept_concrete": 10235,
                "num_kept_lambda": 5524,
                "num_values_explored": 239802,
                "num_values_kept": 15759,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter(lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n)), x)'\n)",
            "task_solution": "Filter(lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3602145053446,
            "num_unique_values": 15286,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.94784288473922,
                "explored_percent_lambda": 18.568741083039782,
                "explored_percent_none": 4.483416032221002,
                "kept_percent_concrete": 69.73029588897617,
                "kept_percent_lambda": 30.269704111023827,
                "num_examples": 3,
                "num_explored_concrete": 182835,
                "num_explored_lambda": 44121,
                "num_explored_none": 10653,
                "num_inputs": 2,
                "num_kept_concrete": 10652,
                "num_kept_lambda": 4624,
                "num_values_explored": 237609,
                "num_values_kept": 15276,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter(lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1)), x)'\n)",
            "task_solution": "Filter(lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3398140817881,
            "num_unique_values": 14721,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 79.95865424613329,
                "explored_percent_lambda": 16.668137298155827,
                "explored_percent_none": 3.3732084557108823,
                "kept_percent_concrete": 60.73953235454051,
                "kept_percent_lambda": 39.26046764545949,
                "num_examples": 3,
                "num_explored_concrete": 190296,
                "num_explored_lambda": 39669,
                "num_explored_none": 8028,
                "num_inputs": 1,
                "num_kept_concrete": 8936,
                "num_kept_lambda": 5776,
                "num_values_explored": 237993,
                "num_values_kept": 14712,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter(lambda u1: Equal(u1, Access(u1, x)), x))'\n)",
            "task_solution": "Sort(Filter(lambda u1: Equal(u1, Access(u1, x)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3535696268082,
            "num_unique_values": 16140,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.53526771950258,
                "explored_percent_lambda": 18.032955362954336,
                "explored_percent_none": 6.431776917543078,
                "kept_percent_concrete": 70.10354020708041,
                "kept_percent_lambda": 29.896459792919586,
                "num_examples": 3,
                "num_explored_concrete": 176396,
                "num_explored_lambda": 42112,
                "num_explored_none": 15020,
                "num_inputs": 3,
                "num_kept_concrete": 11307,
                "num_kept_lambda": 4822,
                "num_values_explored": 233528,
                "num_values_kept": 16129,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter(lambda u1: Equal(Access(u1, x), y), i)'\n)",
            "task_solution": "Filter(lambda u1: Equal(Access(u1, x), y), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 122.99123217724264,
            "num_unique_values": 5953,
            "solution": "Count(lambda u1: (lambda v1: Equal(n, v1))(u1), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 91.06659028627166,
                "explored_percent_lambda": 3.283840901701528,
                "explored_percent_none": 5.649568812026816,
                "kept_percent_concrete": 88.86084469123338,
                "kept_percent_lambda": 11.139155308766616,
                "num_examples": 5,
                "num_explored_concrete": 58819,
                "num_explored_lambda": 2121,
                "num_explored_none": 3649,
                "num_inputs": 2,
                "num_kept_concrete": 5281,
                "num_kept_lambda": 662,
                "num_values_explored": 64589,
                "num_values_kept": 5943,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count(lambda u1: Equal(u1, n), x)'\n)",
            "task_solution": "Count(lambda u1: Equal(u1, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.4221681654453278,
            "num_unique_values": 242,
            "solution": "Count(lambda u1: (lambda v1: Less(v1, q))(u1), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 39.72366148531952,
                "explored_percent_lambda": 30.397236614853195,
                "explored_percent_none": 29.879101899827287,
                "kept_percent_concrete": 72.84482758620689,
                "kept_percent_lambda": 27.155172413793103,
                "num_examples": 5,
                "num_explored_concrete": 230,
                "num_explored_lambda": 176,
                "num_explored_none": 173,
                "num_inputs": 2,
                "num_kept_concrete": 169,
                "num_kept_lambda": 63,
                "num_values_explored": 579,
                "num_values_kept": 232,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count(lambda u1: Less(u1, q), x)'\n)",
            "task_solution": "Count(lambda u1: Less(u1, q), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 29.41594523563981,
            "num_unique_values": 3169,
            "solution": "Count(lambda u1: (lambda v1: Greater(Head(x), v1))(u1), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 87.2596585804133,
                "explored_percent_lambda": 7.972446840371369,
                "explored_percent_none": 4.7678945792153336,
                "kept_percent_concrete": 83.92405063291139,
                "kept_percent_lambda": 16.075949367088608,
                "num_examples": 5,
                "num_explored_concrete": 14568,
                "num_explored_lambda": 1331,
                "num_explored_none": 796,
                "num_inputs": 1,
                "num_kept_concrete": 2652,
                "num_kept_lambda": 508,
                "num_values_explored": 16695,
                "num_values_kept": 3160,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count(lambda u1: Less(u1, Head(x)), x)'\n)",
            "task_solution": "Count(lambda u1: Less(u1, Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.629040950909257,
            "num_unique_values": 603,
            "solution": "Min(Maximum(Drop(2, x)), Count(lambda u1: (lambda v1: Greater(1, v1))(u1), x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 59.108159392789375,
                "explored_percent_lambda": 27.988614800759013,
                "explored_percent_none": 12.903225806451612,
                "kept_percent_concrete": 73.06397306397307,
                "kept_percent_lambda": 26.936026936026938,
                "num_examples": 5,
                "num_explored_concrete": 623,
                "num_explored_lambda": 295,
                "num_explored_none": 136,
                "num_inputs": 1,
                "num_kept_concrete": 434,
                "num_kept_lambda": 160,
                "num_values_explored": 1054,
                "num_values_kept": 594,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count(lambda u1: Less(u1, 0), x)'\n)",
            "task_solution": "Count(lambda u1: Less(u1, 0), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 34.97224188968539,
            "num_unique_values": 3616,
            "solution": "Count(lambda u1: (lambda v1: Equal(v1, Last(x)))(u1), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 88.03284505043337,
                "explored_percent_lambda": 6.665315018500684,
                "explored_percent_none": 5.301839931065944,
                "kept_percent_concrete": 86.16578874410868,
                "kept_percent_lambda": 13.834211255891322,
                "num_examples": 5,
                "num_explored_concrete": 17368,
                "num_explored_lambda": 1315,
                "num_explored_none": 1046,
                "num_inputs": 1,
                "num_kept_concrete": 3108,
                "num_kept_lambda": 499,
                "num_values_explored": 19729,
                "num_values_kept": 3607,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count(lambda u1: Equal(u1, Last(x)), x)'\n)",
            "task_solution": "Count(lambda u1: Equal(u1, Last(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 265.7063734047115,
            "num_unique_values": 11355,
            "solution": "Count(lambda u1: (lambda v1: Equal(v1, Access(i, x)))(u1), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 91.30991509734037,
                "explored_percent_lambda": 2.494882188384403,
                "explored_percent_none": 6.195202714275228,
                "kept_percent_concrete": 92.54297047157338,
                "kept_percent_lambda": 7.457029528426619,
                "num_examples": 5,
                "num_explored_concrete": 111956,
                "num_explored_lambda": 3059,
                "num_explored_none": 7596,
                "num_inputs": 2,
                "num_kept_concrete": 10499,
                "num_kept_lambda": 846,
                "num_values_explored": 122611,
                "num_values_kept": 11345,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count(lambda u1: Equal(u1, Access(i, x)), x)'\n)",
            "task_solution": "Count(lambda u1: Equal(u1, Access(i, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 7.7642414085567,
            "num_unique_values": 1306,
            "solution": "Count(lambda u1: (lambda v1: IsEven((lambda v1: Min(0, v1))(v1)))(u1), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 79.17731815012782,
                "explored_percent_lambda": 14.176156170113874,
                "explored_percent_none": 6.646525679758308,
                "kept_percent_concrete": 78.9514263685428,
                "kept_percent_lambda": 21.04857363145721,
                "num_examples": 5,
                "num_explored_concrete": 3407,
                "num_explored_lambda": 610,
                "num_explored_none": 286,
                "num_inputs": 1,
                "num_kept_concrete": 1024,
                "num_kept_lambda": 273,
                "num_values_explored": 4303,
                "num_values_kept": 1297,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count(lambda u1: IsEven(Min(u1, 0)), x)'\n)",
            "task_solution": "Count(lambda u1: IsEven(Min(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0322269257158,
            "num_unique_values": 20241,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 87.61258221538407,
                "explored_percent_lambda": 5.616289218200304,
                "explored_percent_none": 6.771128566415634,
                "kept_percent_concrete": 89.21457169690079,
                "kept_percent_lambda": 10.785428303099204,
                "num_examples": 5,
                "num_explored_concrete": 194747,
                "num_explored_lambda": 12484,
                "num_explored_none": 15051,
                "num_inputs": 2,
                "num_kept_concrete": 18049,
                "num_kept_lambda": 2182,
                "num_values_explored": 222282,
                "num_values_kept": 20231,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count(lambda u1: Equal(u1, 0), x), Count(lambda u1: Equal(u1, 0), y))'\n)",
            "task_solution": "Add(Count(lambda u1: Equal(u1, 0), x), Count(lambda u1: Equal(u1, 0), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.771595997735858,
            "num_unique_values": 705,
            "solution": "Take(Count(lambda u1: (lambda v1: Greater(v1, 0))(u1), r), Sort(c))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 60.3874415497662,
                "explored_percent_lambda": 35.07014028056112,
                "explored_percent_none": 4.542418169672679,
                "kept_percent_concrete": 57.12230215827338,
                "kept_percent_lambda": 42.87769784172662,
                "num_examples": 3,
                "num_explored_concrete": 904,
                "num_explored_lambda": 525,
                "num_explored_none": 68,
                "num_inputs": 2,
                "num_kept_concrete": 397,
                "num_kept_lambda": 298,
                "num_values_explored": 1497,
                "num_values_kept": 695,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count(lambda u1: Greater(u1, 0), r), Sort(c))'\n)",
            "task_solution": "Take(Count(lambda u1: Greater(u1, 0), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0233138520271,
            "num_unique_values": 18163,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 93.7984366018118,
                "explored_percent_lambda": 2.5880408010842246,
                "explored_percent_none": 3.613522597103979,
                "kept_percent_concrete": 95.70318955544538,
                "kept_percent_lambda": 4.296810444554619,
                "num_examples": 5,
                "num_explored_concrete": 223547,
                "num_explored_lambda": 6168,
                "num_explored_none": 8612,
                "num_inputs": 2,
                "num_kept_concrete": 17373,
                "num_kept_lambda": 780,
                "num_values_explored": 238327,
                "num_values_kept": 18153,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith(lambda u1, u2: Add(Multiply(u1, 3), u2), w, t))'\n)",
            "task_solution": "Maximum(ZipWith(lambda u1, u2: Add(Multiply(u1, 3), u2), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3861210849136,
            "num_unique_values": 18485,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 90.73892586982991,
                "explored_percent_lambda": 3.2027050533077084,
                "explored_percent_none": 6.058369076862376,
                "kept_percent_concrete": 96.13531799729364,
                "kept_percent_lambda": 3.8646820027063598,
                "num_examples": 5,
                "num_explored_concrete": 213878,
                "num_explored_lambda": 7549,
                "num_explored_none": 14280,
                "num_inputs": 2,
                "num_kept_concrete": 17761,
                "num_kept_lambda": 714,
                "num_values_explored": 235707,
                "num_values_kept": 18475,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.7099843882024288,
            "num_unique_values": 252,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Min(v1, v2))(u1, u2), a, Reverse(a))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 30.75356415478615,
                "explored_percent_lambda": 55.80448065173116,
                "explored_percent_none": 13.441955193482688,
                "kept_percent_concrete": 43.20987654320987,
                "kept_percent_lambda": 56.79012345679013,
                "num_examples": 3,
                "num_explored_concrete": 151,
                "num_explored_lambda": 274,
                "num_explored_none": 66,
                "num_inputs": 1,
                "num_kept_concrete": 105,
                "num_kept_lambda": 138,
                "num_values_explored": 491,
                "num_values_kept": 243,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith(lambda u1, u2: Min(u1, u2), a, Reverse(a))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Min(u1, u2), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0113937929273,
            "num_unique_values": 18515,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 94.06693456184007,
                "explored_percent_lambda": 2.179870872284619,
                "explored_percent_none": 3.753194565875311,
                "kept_percent_concrete": 95.72547960010807,
                "kept_percent_lambda": 4.274520399891921,
                "num_examples": 5,
                "num_explored_concrete": 223789,
                "num_explored_lambda": 5186,
                "num_explored_none": 8929,
                "num_inputs": 2,
                "num_kept_concrete": 17714,
                "num_kept_lambda": 791,
                "num_values_explored": 237904,
                "num_values_kept": 18505,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith(lambda u1, u2: Add(u1, u2), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith(lambda u1, u2: Add(u1, u2), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3359713833779,
            "num_unique_values": 15904,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 93.6735011127111,
                "explored_percent_lambda": 3.937442728105773,
                "explored_percent_none": 2.389056159183139,
                "kept_percent_concrete": 93.16137150047184,
                "kept_percent_lambda": 6.838628499528154,
                "num_examples": 5,
                "num_explored_concrete": 228983,
                "num_explored_lambda": 9625,
                "num_explored_none": 5840,
                "num_inputs": 1,
                "num_kept_concrete": 14808,
                "num_kept_lambda": 1087,
                "num_values_explored": 244448,
                "num_values_kept": 15895,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith(lambda u1, u2: Max(Subtract(u1, u2), 0), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Max(Subtract(u1, u2), 0), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.3520582914352417,
            "num_unique_values": 495,
            "solution": "Sum(ZipWith(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u2, u1), x, y))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 51.17096018735363,
                "explored_percent_lambda": 36.65105386416862,
                "explored_percent_none": 12.177985948477751,
                "kept_percent_concrete": 65.56701030927834,
                "kept_percent_lambda": 34.43298969072165,
                "num_examples": 5,
                "num_explored_concrete": 437,
                "num_explored_lambda": 313,
                "num_explored_none": 104,
                "num_inputs": 2,
                "num_kept_concrete": 318,
                "num_kept_lambda": 167,
                "num_values_explored": 854,
                "num_values_kept": 485,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, y))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0175432059914,
            "num_unique_values": 13291,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.914557193512,
                "explored_percent_lambda": 23.011769416457163,
                "explored_percent_none": 4.073673390030838,
                "kept_percent_concrete": 58.22603719599428,
                "kept_percent_lambda": 41.77396280400572,
                "num_examples": 3,
                "num_explored_concrete": 189389,
                "num_explored_lambda": 59771,
                "num_explored_none": 10581,
                "num_inputs": 2,
                "num_kept_concrete": 7733,
                "num_kept_lambda": 5548,
                "num_values_explored": 259741,
                "num_values_kept": 13281,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith(lambda u1, u2: IntDivide(Add(u1, u2), 2), x, y)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: IntDivide(Add(u1, u2), 2), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3310726881027,
            "num_unique_values": 12430,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.66944721671905,
                "explored_percent_lambda": 18.4856925804001,
                "explored_percent_none": 4.844860202880849,
                "kept_percent_concrete": 58.49907399951687,
                "kept_percent_lambda": 41.50092600048313,
                "num_examples": 3,
                "num_explored_concrete": 205882,
                "num_explored_lambda": 49640,
                "num_explored_none": 13010,
                "num_inputs": 3,
                "num_kept_concrete": 7265,
                "num_kept_lambda": 5154,
                "num_values_explored": 268532,
                "num_values_kept": 12419,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith(lambda u1, u2: Add(u1, u2), a, ZipWith(lambda u1, u2: Add(u1, u2), b, c))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Add(u1, u2), a, ZipWith(lambda u1, u2: Add(u1, u2), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 330.13284262642264,
            "num_unique_values": 9756,
            "solution": "Sort(ZipWith(lambda u1, u2: (lambda v1, v2: IntDivide(v1, v2))(u1, u2), m, n))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 77.1723150727329,
                "explored_percent_lambda": 20.459352109769938,
                "explored_percent_none": 2.368332817497163,
                "kept_percent_concrete": 60.712087010055406,
                "kept_percent_lambda": 39.287912989944594,
                "num_examples": 3,
                "num_explored_concrete": 119685,
                "num_explored_lambda": 31730,
                "num_explored_none": 3673,
                "num_inputs": 2,
                "num_kept_concrete": 5917,
                "num_kept_lambda": 3829,
                "num_values_explored": 155088,
                "num_values_kept": 9746,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith(lambda u1, u2: IntDivide(u1, u2), m, n))'\n)",
            "task_solution": "Sort(ZipWith(lambda u1, u2: IntDivide(u1, u2), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 401.2670781929046,
            "num_unique_values": 11149,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Subtract(v2, v1))(u1, u2), x, Drop(1, x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 68.97179147737545,
                "explored_percent_lambda": 26.28052229797111,
                "explored_percent_none": 4.747686224653444,
                "kept_percent_concrete": 50.727109515260324,
                "kept_percent_lambda": 49.272890484739676,
                "num_examples": 3,
                "num_explored_concrete": 118268,
                "num_explored_lambda": 45064,
                "num_explored_none": 8141,
                "num_inputs": 1,
                "num_kept_concrete": 5651,
                "num_kept_lambda": 5489,
                "num_values_explored": 171473,
                "num_values_kept": 11140,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith(lambda u1, u2: Subtract(u2, u1), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Subtract(u2, u1), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.2755188904703,
            "num_unique_values": 19724,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 89.03938676251056,
                "explored_percent_lambda": 4.410599447525906,
                "explored_percent_none": 6.550013789963534,
                "kept_percent_concrete": 93.46657197930405,
                "kept_percent_lambda": 6.533428020695952,
                "num_examples": 5,
                "num_explored_concrete": 203390,
                "num_explored_lambda": 10075,
                "num_explored_none": 14962,
                "num_inputs": 2,
                "num_kept_concrete": 18426,
                "num_kept_lambda": 1288,
                "num_values_explored": 228427,
                "num_values_kept": 19714,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, m))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3660315610468,
            "num_unique_values": 14361,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.080482353808,
                "explored_percent_lambda": 26.947794123666608,
                "explored_percent_none": 3.971723522525399,
                "kept_percent_concrete": 56.9646714514668,
                "kept_percent_lambda": 43.0353285485332,
                "num_examples": 3,
                "num_explored_concrete": 168765,
                "num_explored_lambda": 65834,
                "num_explored_none": 9703,
                "num_inputs": 2,
                "num_kept_concrete": 8175,
                "num_kept_lambda": 6176,
                "num_values_explored": 244302,
                "num_values_kept": 14351,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith(lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1)), x, y)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3604943286628,
            "num_unique_values": 16520,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 88.36958394525898,
                "explored_percent_lambda": 2.3842537515486164,
                "explored_percent_none": 9.246162303192406,
                "kept_percent_concrete": 96.9473046638401,
                "kept_percent_lambda": 3.052695336159903,
                "num_examples": 5,
                "num_explored_concrete": 215415,
                "num_explored_lambda": 5812,
                "num_explored_none": 22539,
                "num_inputs": 2,
                "num_kept_concrete": 16006,
                "num_kept_lambda": 504,
                "num_values_explored": 243766,
                "num_values_kept": 16510,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith(lambda u1, u2: Square(Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Square(Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3000631406903,
            "num_unique_values": 14286,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.27636798638488,
                "explored_percent_lambda": 22.995243752543587,
                "explored_percent_none": 7.728388261071533,
                "kept_percent_concrete": 50.980666853460356,
                "kept_percent_lambda": 49.019333146539644,
                "num_examples": 3,
                "num_explored_concrete": 168521,
                "num_explored_lambda": 55938,
                "num_explored_none": 18800,
                "num_inputs": 2,
                "num_kept_concrete": 7278,
                "num_kept_lambda": 6998,
                "num_values_explored": 243259,
                "num_values_kept": 14276,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith(lambda u1, u2: If(Equal(u1, u2), 1, 0), x, y)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: If(Equal(u1, u2), 1, 0), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3662224058062,
            "num_unique_values": 12880,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.39661022159207,
                "explored_percent_lambda": 19.666247843444648,
                "explored_percent_none": 2.937141934963286,
                "kept_percent_concrete": 62.20668220668221,
                "kept_percent_lambda": 37.79331779331779,
                "num_examples": 3,
                "num_explored_concrete": 201427,
                "num_explored_lambda": 51182,
                "num_explored_none": 7644,
                "num_inputs": 2,
                "num_kept_concrete": 8006,
                "num_kept_lambda": 4864,
                "num_values_explored": 260253,
                "num_values_kept": 12870,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith(lambda u1, u2: Min(u1, u2), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Min(u1, u2), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3327096123248,
            "num_unique_values": 12412,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.48187832298389,
                "explored_percent_lambda": 22.60440764641422,
                "explored_percent_none": 3.9137140306018914,
                "kept_percent_concrete": 56.84914939933887,
                "kept_percent_lambda": 43.15085060066113,
                "num_examples": 3,
                "num_explored_concrete": 181052,
                "num_explored_lambda": 55695,
                "num_explored_none": 9643,
                "num_inputs": 1,
                "num_kept_concrete": 7051,
                "num_kept_lambda": 5352,
                "num_values_explored": 246390,
                "num_values_kept": 12403,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith(lambda u1, u2: Add(u1, u2), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Add(u1, u2), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3816307540983,
            "num_unique_values": 19691,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 92.91768985902684,
                "explored_percent_lambda": 2.5511596180081857,
                "explored_percent_none": 4.531150522964984,
                "kept_percent_concrete": 96.18941164515802,
                "kept_percent_lambda": 3.8105883548419874,
                "num_examples": 5,
                "num_explored_concrete": 204326,
                "num_explored_lambda": 5610,
                "num_explored_none": 9964,
                "num_inputs": 1,
                "num_kept_concrete": 18932,
                "num_kept_lambda": 750,
                "num_values_explored": 219900,
                "num_values_kept": 19682,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3821946438402,
            "num_unique_values": 12543,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.25086693748142,
                "explored_percent_lambda": 25.250371544634895,
                "explored_percent_none": 2.4987615178836817,
                "kept_percent_concrete": 53.33120561717067,
                "kept_percent_lambda": 46.66879438282933,
                "num_examples": 3,
                "num_explored_concrete": 182307,
                "num_explored_lambda": 63713,
                "num_explored_none": 6305,
                "num_inputs": 2,
                "num_kept_concrete": 6684,
                "num_kept_lambda": 5849,
                "num_values_explored": 252325,
                "num_values_kept": 12533,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith(lambda u1, u2: Multiply(u1, Add(1, u2)), p, w)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Multiply(u1, Add(1, u2)), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.343598973006,
            "num_unique_values": 17649,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 93.9363577894548,
                "explored_percent_lambda": 3.423186135746131,
                "explored_percent_none": 2.6404560747990673,
                "kept_percent_concrete": 92.58503401360544,
                "kept_percent_lambda": 7.414965986394558,
                "num_examples": 5,
                "num_explored_concrete": 214700,
                "num_explored_lambda": 7824,
                "num_explored_none": 6035,
                "num_inputs": 1,
                "num_kept_concrete": 16332,
                "num_kept_lambda": 1308,
                "num_values_explored": 228559,
                "num_values_kept": 17640,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1(lambda u1, u2: Min(u1, u2), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1(lambda u1, u2: Min(u1, u2), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3537177536637,
            "num_unique_values": 13203,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.74979974057764,
                "explored_percent_lambda": 22.99100154108266,
                "explored_percent_none": 5.259198718339697,
                "kept_percent_concrete": 53.918447779293615,
                "kept_percent_lambda": 46.081552220706385,
                "num_examples": 3,
                "num_explored_concrete": 176455,
                "num_explored_lambda": 56542,
                "num_explored_none": 12934,
                "num_inputs": 1,
                "num_kept_concrete": 7114,
                "num_kept_lambda": 6080,
                "num_values_explored": 245931,
                "num_values_kept": 13194,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1(lambda u1, u2: Max(u1, u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Max(u1, u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 240.55533915013075,
            "num_unique_values": 11401,
            "solution": "Subtract(Max(Sum(x), 4), Min(0, Access(4, x)))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 92.57821858080591,
                "explored_percent_lambda": 4.367783048248766,
                "explored_percent_none": 3.053998370945331,
                "kept_percent_concrete": 91.10779494382022,
                "kept_percent_lambda": 8.892205056179776,
                "num_examples": 5,
                "num_explored_concrete": 96610,
                "num_explored_lambda": 4558,
                "num_explored_none": 3187,
                "num_inputs": 1,
                "num_kept_concrete": 10379,
                "num_kept_lambda": 1013,
                "num_values_explored": 104355,
                "num_values_kept": 11392,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1(lambda u1, u2: Add(u1, u2), x))'\n)",
            "task_solution": "Maximum(Scanl1(lambda u1, u2: Add(u1, u2), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.2403257135302,
            "num_unique_values": 12528,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.2032585763241,
                "explored_percent_lambda": 27.21008792790156,
                "explored_percent_none": 5.586653495774339,
                "kept_percent_concrete": 52.69590222861251,
                "kept_percent_lambda": 47.30409777138749,
                "num_examples": 3,
                "num_explored_concrete": 165318,
                "num_explored_lambda": 66936,
                "num_explored_none": 13743,
                "num_inputs": 1,
                "num_kept_concrete": 6597,
                "num_kept_lambda": 5922,
                "num_values_explored": 245997,
                "num_values_kept": 12519,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1(lambda u1, u2: Add(u1, u2), Reverse(x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(u1, u2), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.4010458458215,
            "num_unique_values": 14598,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.79550967099944,
                "explored_percent_lambda": 23.20583784232021,
                "explored_percent_none": 4.998652486680349,
                "kept_percent_concrete": 57.502227705805744,
                "kept_percent_lambda": 42.497772294194256,
                "num_examples": 3,
                "num_explored_concrete": 173160,
                "num_explored_lambda": 55969,
                "num_explored_none": 12056,
                "num_inputs": 1,
                "num_kept_concrete": 8389,
                "num_kept_lambda": 6200,
                "num_values_explored": 241185,
                "num_values_kept": 14589,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1(lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2)), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.4010121561587,
            "num_unique_values": 15209,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.5932310862759,
                "explored_percent_lambda": 17.834581698569334,
                "explored_percent_none": 4.572187215154758,
                "kept_percent_concrete": 67.0438844660833,
                "kept_percent_lambda": 32.9561155339167,
                "num_examples": 3,
                "num_explored_concrete": 195791,
                "num_explored_lambda": 45002,
                "num_explored_none": 11537,
                "num_inputs": 2,
                "num_kept_concrete": 10190,
                "num_kept_lambda": 5009,
                "num_values_explored": 252330,
                "num_values_kept": 15199,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1(lambda u1, u2: Add(Add(u1, u2), n), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(Add(u1, u2), n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.449358358979225,
            "num_unique_values": 549,
            "solution": "Scanl1(lambda u1, u2: (lambda v1, v2: Add(v1, (lambda v1: IntDivide(v1, 2))(v2)))(u2, u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 57.083333333333336,
                "explored_percent_lambda": 35.25,
                "explored_percent_none": 7.666666666666667,
                "kept_percent_concrete": 55.18518518518518,
                "kept_percent_lambda": 44.81481481481482,
                "num_examples": 3,
                "num_explored_concrete": 685,
                "num_explored_lambda": 423,
                "num_explored_none": 92,
                "num_inputs": 1,
                "num_kept_concrete": 298,
                "num_kept_lambda": 242,
                "num_values_explored": 1200,
                "num_values_kept": 540,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1(lambda u1, u2: Add(IntDivide(u1, 2), u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(IntDivide(u1, 2), u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.021327232942,
            "num_unique_values": 12130,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.41282649417208,
                "explored_percent_lambda": 22.80620450890058,
                "explored_percent_none": 2.7809689969273426,
                "kept_percent_concrete": 56.57590759075907,
                "kept_percent_lambda": 43.42409240924093,
                "num_examples": 3,
                "num_explored_concrete": 191078,
                "num_explored_lambda": 58562,
                "num_explored_none": 7141,
                "num_inputs": 2,
                "num_kept_concrete": 6857,
                "num_kept_lambda": 5263,
                "num_values_explored": 256781,
                "num_values_kept": 12120,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1(lambda u1, u2: Multiply(u1, u2), Take(n, x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Multiply(u1, u2), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 84.8784773722291,
            "num_unique_values": 5710,
            "solution": "Last(Scanl1(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), Reverse(x)))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 89.74299659950496,
                "explored_percent_lambda": 5.931203590182516,
                "explored_percent_none": 4.325799810312522,
                "kept_percent_concrete": 93.82564462375022,
                "kept_percent_lambda": 6.174355376249781,
                "num_examples": 5,
                "num_explored_concrete": 38795,
                "num_explored_lambda": 2564,
                "num_explored_none": 1870,
                "num_inputs": 1,
                "num_kept_concrete": 5349,
                "num_kept_lambda": 352,
                "num_values_explored": 43229,
                "num_values_kept": 5701,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1(lambda u1, u2: Multiply(u1, u2), x))'\n)",
            "task_solution": "Last(Scanl1(lambda u1, u2: Multiply(u1, u2), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.1099435798824,
            "num_unique_values": 10994,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.71678431552888,
                "explored_percent_lambda": 22.964904616280762,
                "explored_percent_none": 3.3183110681903534,
                "kept_percent_concrete": 42.940373236231224,
                "kept_percent_lambda": 57.059626763768776,
                "num_examples": 3,
                "num_explored_concrete": 192361,
                "num_explored_lambda": 59926,
                "num_explored_none": 8659,
                "num_inputs": 1,
                "num_kept_concrete": 4717,
                "num_kept_lambda": 6268,
                "num_values_explored": 260946,
                "num_values_kept": 10985,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1(lambda u1, u2: Min(u1, u2), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Min(u1, u2), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.2922176402062,
            "num_unique_values": 13123,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.04611996737003,
                "explored_percent_lambda": 22.080280971344298,
                "explored_percent_none": 4.8735990612856686,
                "kept_percent_concrete": 58.71587616287937,
                "kept_percent_lambda": 41.28412383712063,
                "num_examples": 3,
                "num_explored_concrete": 181776,
                "num_explored_lambda": 54947,
                "num_explored_none": 12128,
                "num_inputs": 1,
                "num_kept_concrete": 7700,
                "num_kept_lambda": 5414,
                "num_values_explored": 248851,
                "num_values_kept": 13114,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1(lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3286830317229,
            "num_unique_values": 13748,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.73024530040778,
                "explored_percent_lambda": 32.871685456618984,
                "explored_percent_none": 4.398069242973231,
                "kept_percent_concrete": 44.58839799112017,
                "kept_percent_lambda": 55.41160200887983,
                "num_examples": 3,
                "num_explored_concrete": 149064,
                "num_explored_lambda": 78112,
                "num_explored_none": 10451,
                "num_inputs": 1,
                "num_kept_concrete": 6126,
                "num_kept_lambda": 7613,
                "num_values_explored": 237627,
                "num_values_kept": 13739,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1(lambda u1, u2: Access(u1, x), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Access(u1, x), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3678810875863,
            "num_unique_values": 13026,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 79.1734684777256,
                "explored_percent_lambda": 16.166143848125415,
                "explored_percent_none": 4.660387674148982,
                "kept_percent_concrete": 60.251978182376895,
                "kept_percent_lambda": 39.748021817623105,
                "num_examples": 3,
                "num_explored_concrete": 204186,
                "num_explored_lambda": 41692,
                "num_explored_none": 12019,
                "num_inputs": 1,
                "num_kept_concrete": 7843,
                "num_kept_lambda": 5174,
                "num_values_explored": 257897,
                "num_values_kept": 13017,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1(lambda u1, u2: Max(Add(u1, 1), u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Max(Add(u1, 1), u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3266405127943,
            "num_unique_values": 14490,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 67.82678762792143,
                "explored_percent_lambda": 25.884508724425938,
                "explored_percent_none": 6.288703647652627,
                "kept_percent_concrete": 54.51971548926179,
                "kept_percent_lambda": 45.48028451073821,
                "num_examples": 3,
                "num_explored_concrete": 165827,
                "num_explored_lambda": 63284,
                "num_explored_none": 15375,
                "num_inputs": 1,
                "num_kept_concrete": 7895,
                "num_kept_lambda": 6586,
                "num_values_explored": 244486,
                "num_values_kept": 14481,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1(lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3763869460672,
            "num_unique_values": 18083,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 90.3589791214636,
                "explored_percent_lambda": 5.262691330299628,
                "explored_percent_none": 4.378329548236764,
                "kept_percent_concrete": 87.16317158191778,
                "kept_percent_lambda": 12.836828418082222,
                "num_examples": 5,
                "num_explored_concrete": 214055,
                "num_explored_lambda": 12467,
                "num_explored_none": 10372,
                "num_inputs": 2,
                "num_kept_concrete": 15753,
                "num_kept_lambda": 2320,
                "num_values_explored": 236894,
                "num_values_kept": 18073,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count(lambda u1: Greater(u1, 0), ZipWith(lambda u1, u2: Subtract(u1, u2), a, b))'\n)",
            "task_solution": "Count(lambda u1: Greater(u1, 0), ZipWith(lambda u1, u2: Subtract(u1, u2), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.4351630136371,
            "num_unique_values": 18358,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 90.22028656188853,
                "explored_percent_lambda": 3.8708998716573038,
                "explored_percent_none": 5.908813566454165,
                "kept_percent_concrete": 95.46544582515806,
                "kept_percent_lambda": 4.5345541748419445,
                "num_examples": 5,
                "num_explored_concrete": 214404,
                "num_explored_lambda": 9199,
                "num_explored_none": 14042,
                "num_inputs": 2,
                "num_kept_concrete": 17516,
                "num_kept_lambda": 832,
                "num_values_explored": 237645,
                "num_values_kept": 18348,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), s, Scanl1(lambda u1, u2: Add(u1, u2), p)))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), s, Scanl1(lambda u1, u2: Add(u1, u2), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.153290394693613,
            "num_unique_values": 249,
            "solution": "Scanl1(lambda u1, u2: (lambda v1: Subtract(v1, -1))(u1), Map(lambda u1: 0, x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 26.15606936416185,
                "explored_percent_lambda": 51.01156069364162,
                "explored_percent_none": 22.832369942196532,
                "kept_percent_concrete": 43.75,
                "kept_percent_lambda": 56.25,
                "num_examples": 3,
                "num_explored_concrete": 181,
                "num_explored_lambda": 353,
                "num_explored_none": 158,
                "num_inputs": 1,
                "num_kept_concrete": 105,
                "num_kept_lambda": 135,
                "num_values_explored": 692,
                "num_values_kept": 240,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1(lambda u1, u2: Add(u1, 1), Map(lambda u1: 0, x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(u1, 1), Map(lambda u1: 0, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0391164980829,
            "num_unique_values": 17240,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.80902273990806,
                "explored_percent_lambda": 22.402719206656993,
                "explored_percent_none": 5.788258053434942,
                "kept_percent_concrete": 65.26609018629215,
                "kept_percent_lambda": 34.733909813707854,
                "num_examples": 3,
                "num_explored_concrete": 158871,
                "num_explored_lambda": 49564,
                "num_explored_none": 12806,
                "num_inputs": 1,
                "num_kept_concrete": 11246,
                "num_kept_lambda": 5985,
                "num_values_explored": 221241,
                "num_values_kept": 17231,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter(lambda u1: IsOdd(u1), ZipWith(lambda u1, u2: Multiply(u2, u1), x, Drop(1, x)))'\n)",
            "task_solution": "Filter(lambda u1: IsOdd(u1), ZipWith(lambda u1, u2: Multiply(u2, u1), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.4018680285662,
            "num_unique_values": 14902,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.49852730791888,
                "explored_percent_lambda": 19.182445510393,
                "explored_percent_none": 3.319027181688126,
                "kept_percent_concrete": 61.451688712818104,
                "kept_percent_lambda": 38.548311287181896,
                "num_examples": 3,
                "num_explored_concrete": 184183,
                "num_explored_lambda": 45589,
                "num_explored_none": 7888,
                "num_inputs": 1,
                "num_kept_concrete": 9152,
                "num_kept_lambda": 5741,
                "num_values_explored": 237660,
                "num_values_kept": 14893,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1(lambda u1, u2: Multiply(u1, u2), Filter(lambda u1: IsOdd(u1), x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Multiply(u1, u2), Filter(lambda u1: IsOdd(u1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.369060786441,
            "num_unique_values": 13777,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 75.34937903074382,
                "explored_percent_lambda": 20.80256588098696,
                "explored_percent_none": 3.848055088269218,
                "kept_percent_concrete": 63.27449698554514,
                "kept_percent_lambda": 36.72550301445486,
                "num_examples": 3,
                "num_explored_concrete": 196634,
                "num_explored_lambda": 54287,
                "num_explored_none": 10042,
                "num_inputs": 2,
                "num_kept_concrete": 8711,
                "num_kept_lambda": 5056,
                "num_values_explored": 260963,
                "num_values_kept": 13767,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1(lambda u1, u2: Add(u1, u2), ZipWith(lambda u1, u2: Add(u1, u2), x, y))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(u1, u2), ZipWith(lambda u1, u2: Add(u1, u2), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3606493677944,
            "num_unique_values": 12785,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.96353096621937,
                "explored_percent_lambda": 21.006163457646277,
                "explored_percent_none": 4.030305576134359,
                "kept_percent_concrete": 63.3161108501644,
                "kept_percent_lambda": 36.6838891498356,
                "num_examples": 3,
                "num_explored_concrete": 196304,
                "num_explored_lambda": 55008,
                "num_explored_none": 10554,
                "num_inputs": 3,
                "num_kept_concrete": 8088,
                "num_kept_lambda": 4686,
                "num_values_explored": 261866,
                "num_values_kept": 12774,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith(lambda u1, u2: Add(u1, u2), x, Map(lambda u1: Access(u1, y), i))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Add(u1, u2), x, Map(lambda u1: Access(u1, y), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.318117653951,
            "num_unique_values": 16669,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.84178195609209,
                "explored_percent_lambda": 23.71490126951908,
                "explored_percent_none": 4.443316774388832,
                "kept_percent_concrete": 70.92862716849751,
                "kept_percent_lambda": 29.07137283150249,
                "num_examples": 3,
                "num_explored_concrete": 161394,
                "num_explored_lambda": 53276,
                "num_explored_none": 9982,
                "num_inputs": 2,
                "num_kept_concrete": 11816,
                "num_kept_lambda": 4843,
                "num_values_explored": 224652,
                "num_values_kept": 16659,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter(lambda u1: Greater(u1, -1), ZipWith(lambda u1, u2: Subtract(u1, u2), x, y))'\n)",
            "task_solution": "Filter(lambda u1: Greater(u1, -1), ZipWith(lambda u1, u2: Subtract(u1, u2), x, y))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.53
}