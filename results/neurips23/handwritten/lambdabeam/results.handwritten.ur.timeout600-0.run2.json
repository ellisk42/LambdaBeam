{
    "num_tasks": 100,
    "num_tasks_solved": 49,
    "results": [
        {
            "elapsed_time": 18.877505281940103,
            "num_unique_values": 2482,
            "solution": "Sum(Reverse(Take(k, Sort(b))))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 89.77228493577267,
                "explored_percent_lambda": 8.057609964966913,
                "explored_percent_none": 2.1701050992604127,
                "kept_percent_concrete": 86.0032362459547,
                "kept_percent_lambda": 13.996763754045308,
                "num_examples": 5,
                "num_explored_concrete": 9225,
                "num_explored_lambda": 828,
                "num_explored_none": 223,
                "num_inputs": 2,
                "num_kept_concrete": 2126,
                "num_kept_lambda": 346,
                "num_values_explored": 10276,
                "num_values_kept": 2472,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:deepcoder_0',\n    inputs_dict={'k': [2, 2, 3, 6, 5], 'b': [[3, 5, 4, 7, 5], [12, 56, 31, 23, 49], [8, 3, 4, 12, 5, 2, 4], [9, 7, 5, 4, 12, 6, 2, 6], [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]]},\n    outputs=[7, 35, 9, 30, -13],\n    solution='Sum(Take(k, Sort(b)))'\n)",
            "task_solution": "Sum(Take(k, Sort(b)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 11.393478285521269,
            "num_unique_values": 411,
            "solution": "If(IsEven(x), IntDivide(x, 2), Subtract(Multiply(x, 3), -1))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 31.48506020514345,
                "explored_percent_lambda": 9.528764679649175,
                "explored_percent_none": 58.986175115207374,
                "kept_percent_concrete": 85.32338308457712,
                "kept_percent_lambda": 14.676616915422885,
                "num_examples": 5,
                "num_explored_concrete": 2118,
                "num_explored_lambda": 641,
                "num_explored_none": 3968,
                "num_inputs": 1,
                "num_kept_concrete": 343,
                "num_kept_lambda": 59,
                "num_values_explored": 6727,
                "num_values_kept": 402,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:hailstone',\n    inputs_dict={'x': [8, 26, 5, 7, 23]},\n    outputs=[4, 13, 16, 22, 70],\n    solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))'\n)",
            "task_solution": "If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 6.709770368412137,
            "num_unique_values": 241,
            "solution": "Subtract(Add(x, Multiply(x, Subtract(y, 2))), y)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 25.098425196850393,
                "explored_percent_lambda": 9.22736220472441,
                "explored_percent_none": 65.6742125984252,
                "kept_percent_concrete": 88.31168831168831,
                "kept_percent_lambda": 11.688311688311689,
                "num_examples": 5,
                "num_explored_concrete": 1020,
                "num_explored_lambda": 375,
                "num_explored_none": 2669,
                "num_inputs": 2,
                "num_kept_concrete": 204,
                "num_kept_lambda": 27,
                "num_values_explored": 4064,
                "num_values_kept": 231,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:coins',\n    inputs_dict={'x': [3, 8, 5, 11, 14], 'y': [5, 13, 14, 7, 9]},\n    outputs=[7, 83, 51, 59, 103],\n    solution='Subtract(Subtract(Multiply(x, y), x), y)'\n)",
            "task_solution": "Subtract(Subtract(Multiply(x, y), x), y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 188.54097942821681,
            "num_unique_values": 3359,
            "solution": "Multiply(k, IntDivide(Add(x, k), k))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 37.82974256243318,
                "explored_percent_lambda": 6.292918299929694,
                "explored_percent_none": 55.87733913763712,
                "kept_percent_concrete": 96.59599880561362,
                "kept_percent_lambda": 3.404001194386384,
                "num_examples": 5,
                "num_explored_concrete": 39279,
                "num_explored_lambda": 6534,
                "num_explored_none": 58018,
                "num_inputs": 2,
                "num_kept_concrete": 3235,
                "num_kept_lambda": 114,
                "num_values_explored": 103831,
                "num_values_kept": 3349,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:next_multiple',\n    inputs_dict={'x': [3, 8, 13, 27, 58], 'k': [5, 7, 4, 9, 14]},\n    outputs=[5, 14, 16, 36, 70],\n    solution='Multiply(Add(IntDivide(x, k), 1), k)'\n)",
            "task_solution": "Multiply(Add(IntDivide(x, k), 1), k)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.9251515865325928,
            "num_unique_values": 465,
            "solution": "Reverse(Drop(n, Reverse(x)))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 55.87828492392808,
                "explored_percent_lambda": 26.417704011065005,
                "explored_percent_none": 17.704011065006917,
                "kept_percent_concrete": 61.75824175824176,
                "kept_percent_lambda": 38.24175824175824,
                "num_examples": 3,
                "num_explored_concrete": 808,
                "num_explored_lambda": 382,
                "num_explored_none": 256,
                "num_inputs": 2,
                "num_kept_concrete": 281,
                "num_kept_lambda": 174,
                "num_values_explored": 1446,
                "num_values_kept": 455,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:drop_last',\n    inputs_dict={'x': [[5, 3, 2, 1, 6], [4, -11, 5, -6, -5, 7, 8], [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]], 'n': [2, 5, 3]},\n    outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],\n    solution='Take(Subtract(0, n), x)'\n)",
            "task_solution": "Take(Subtract(0, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.6102012917399406,
            "num_unique_values": 468,
            "solution": "Reverse(Sort(Drop(Multiply(n, -1), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 49.71977582065652,
                "explored_percent_lambda": 34.10728582866293,
                "explored_percent_none": 16.172938350680546,
                "kept_percent_concrete": 60.698689956331876,
                "kept_percent_lambda": 39.301310043668124,
                "num_examples": 3,
                "num_explored_concrete": 621,
                "num_explored_lambda": 426,
                "num_explored_none": 202,
                "num_inputs": 2,
                "num_kept_concrete": 278,
                "num_kept_lambda": 180,
                "num_values_explored": 1249,
                "num_values_kept": 458,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:decreasing_suffix',\n    inputs_dict={'x': [[3, 2, 5, 7], [4, 6, 2, 1, 7, 3, 9], [-78, 49, 28, -42, -13, 76, 84, -49, 31, 8]], 'n': [2, 5, 4]},\n    outputs=[[7, 5], [9, 7, 3, 2, 1], [84, 31, 8, -49]],\n    solution='Reverse(Sort(Take(n, Reverse(x))))'\n)",
            "task_solution": "Reverse(Sort(Take(n, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.0250582657754421,
            "num_unique_values": 153,
            "solution": "Drop(1, Take(-1, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 11.204481792717086,
                "explored_percent_lambda": 70.58823529411765,
                "explored_percent_none": 18.207282913165265,
                "kept_percent_concrete": 18.055555555555557,
                "kept_percent_lambda": 81.94444444444444,
                "num_examples": 3,
                "num_explored_concrete": 40,
                "num_explored_lambda": 252,
                "num_explored_none": 65,
                "num_inputs": 1,
                "num_kept_concrete": 26,
                "num_kept_lambda": 118,
                "num_values_explored": 357,
                "num_values_kept": 144,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:remove_ends',\n    inputs_dict={'x': [[4, 2, 5, 6], [6, -4, 4, -7, 1, 0, -2], [42, 68, 38, 22, 87, 17, 83, 29]]},\n    outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],\n    solution='Take(-1, Drop(1, x))'\n)",
            "task_solution": "Take(-1, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 0.8942694440484047,
            "num_unique_values": 159,
            "solution": "Drop(i, Take(j, x))",
            "solution_weight": 5,
            "stats": {
                "explored_percent_concrete": 25.129533678756477,
                "explored_percent_lambda": 51.295336787564764,
                "explored_percent_none": 23.575129533678755,
                "kept_percent_concrete": 38.513513513513516,
                "kept_percent_lambda": 61.486486486486484,
                "num_examples": 3,
                "num_explored_concrete": 97,
                "num_explored_lambda": 198,
                "num_explored_none": 91,
                "num_inputs": 3,
                "num_kept_concrete": 57,
                "num_kept_lambda": 91,
                "num_values_explored": 386,
                "num_values_kept": 148,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:slice',\n    inputs_dict={'x': [[6, 7, 2, 8, 1, 3], [24, 63, 74, 12, 33, 42, 19], [-6, 49, -24, 8, 47, 23, 11, -12, -55, 38]], 'i': [3, 2, 5], 'j': [5, 6, 8]},\n    outputs=[[8, 1], [74, 12, 33, 42], [23, 11, -12]],\n    solution='Drop(i, Take(j, x))'\n)",
            "task_solution": "Drop(i, Take(j, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.299652213230729,
            "num_unique_values": 525,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Max(4, v1))(u1), Reverse(Sort(x)), Take(k, x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 55.63612392880685,
                "explored_percent_lambda": 30.45484508899143,
                "explored_percent_none": 13.909030982201713,
                "kept_percent_concrete": 63.49514563106796,
                "kept_percent_lambda": 36.50485436893204,
                "num_examples": 3,
                "num_explored_concrete": 844,
                "num_explored_lambda": 462,
                "num_explored_none": 211,
                "num_inputs": 2,
                "num_kept_concrete": 327,
                "num_kept_lambda": 188,
                "num_values_explored": 1517,
                "num_values_kept": 515,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:top_k',\n    inputs_dict={'x': [[4, 1, 2, 6, 3], [8, 9, 3, 5, 2, 7, 8], [12, 63, 21, 59, 32, 55, 68, -99, 48]], 'k': [2, 4, 3]},\n    outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],\n    solution='Take(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Take(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.6729788184165955,
            "num_unique_values": 613,
            "solution": "Max(Access(Min(k, 4), x), Minimum(Take(-1, Drop(1, x))))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 72.72030651340997,
                "explored_percent_lambda": 15.78544061302682,
                "explored_percent_none": 11.494252873563218,
                "kept_percent_concrete": 83.74792703150912,
                "kept_percent_lambda": 16.25207296849088,
                "num_examples": 5,
                "num_explored_concrete": 949,
                "num_explored_lambda": 206,
                "num_explored_none": 150,
                "num_inputs": 2,
                "num_kept_concrete": 505,
                "num_kept_lambda": 98,
                "num_values_explored": 1305,
                "num_values_kept": 603,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:kth_largest',\n    inputs_dict={'x': [[5, 9, 4], [7, 8, 6, 2], [18, 38, 24, 74, 37, 87, 64], [-5, 0, -4, 4, 7, -5, 7, -5, 6], [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]], 'k': [0, 2, 4, 3, 7]},\n    outputs=[9, 6, 37, 4, -5],\n    solution='Access(k, Reverse(Sort(x)))'\n)",
            "task_solution": "Access(k, Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0132157951593,
            "num_unique_values": 15481,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 84.80838405018838,
                "explored_percent_lambda": 5.353824647539167,
                "explored_percent_none": 9.837791302272455,
                "kept_percent_concrete": 91.79162357807652,
                "kept_percent_lambda": 8.208376421923475,
                "num_examples": 5,
                "num_explored_concrete": 198991,
                "num_explored_lambda": 12562,
                "num_explored_none": 23083,
                "num_inputs": 1,
                "num_kept_concrete": 14202,
                "num_kept_lambda": 1270,
                "num_values_explored": 234636,
                "num_values_kept": 15472,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:outer_average',\n    inputs_dict={'x': [[59, 37, 23], [58, 32, 47, 16], [-44, 45, 38, -63, -12, 18], [-8, -4, 18, 12, -5, -6, 2, 0, -14], [35, 85, 53, 68, 47, 17, 86, 27, 75, 91]]},\n    outputs=[41, 37, -13, -11, 63],\n    solution='IntDivide(Add(Head(x), Last(x)), 2)'\n)",
            "task_solution": "IntDivide(Add(Head(x), Last(x)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.3930906131863594,
            "num_unique_values": 335,
            "solution": "Max(Minimum(Take(2, x)), Minimum(Drop(1, x)))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 33.77403846153846,
                "explored_percent_lambda": 43.14903846153846,
                "explored_percent_none": 23.076923076923077,
                "kept_percent_concrete": 51.84049079754601,
                "kept_percent_lambda": 48.15950920245399,
                "num_examples": 5,
                "num_explored_concrete": 281,
                "num_explored_lambda": 359,
                "num_explored_none": 192,
                "num_inputs": 1,
                "num_kept_concrete": 169,
                "num_kept_lambda": 157,
                "num_values_explored": 832,
                "num_values_kept": 326,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:triple_median',\n    inputs_dict={'x': [[9, 7, 4], [23, 54, 38], [-6, 5, -7], [5, 8, 13], [-47, -18, -21]]},\n    outputs=[7, 38, -6, 8, -21],\n    solution='Access(1, Sort(x))'\n)",
            "task_solution": "Access(1, Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.995187070220709,
            "num_unique_values": 1119,
            "solution": "Multiply(-1, Minimum(ZipWith(lambda u1, u2: (lambda v1: Subtract(Minimum(x), v1))(u2), x, Reverse(x))))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 74.34646218194493,
                "explored_percent_lambda": 20.250958522133146,
                "explored_percent_none": 5.402579295921924,
                "kept_percent_concrete": 78.10810810810811,
                "kept_percent_lambda": 21.89189189189189,
                "num_examples": 5,
                "num_explored_concrete": 2133,
                "num_explored_lambda": 581,
                "num_explored_none": 155,
                "num_inputs": 1,
                "num_kept_concrete": 867,
                "num_kept_lambda": 243,
                "num_values_explored": 2869,
                "num_values_kept": 1110,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='none:range',\n    inputs_dict={'x': [[16, -14, 5, 22, -7], [43, 58, 13, 29, 67, 38], [4, 5, 3, 4, 8, 3, 6, 5, 6], [26, 24, 28, 27, 28, 29, 24, 22, 26, 25], [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]]},\n    outputs=[36, 54, 5, 7, 119],\n    solution='Subtract(Maximum(x), Minimum(x))'\n)",
            "task_solution": "Subtract(Maximum(x), Minimum(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0959749259055,
            "num_unique_values": 17688,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 88.1222522241839,
                "explored_percent_lambda": 2.715754491639838,
                "explored_percent_none": 9.161993284176273,
                "kept_percent_concrete": 95.9893653128182,
                "kept_percent_lambda": 4.010634687181808,
                "num_examples": 5,
                "num_explored_concrete": 203647,
                "num_explored_lambda": 6276,
                "num_explored_none": 21173,
                "num_inputs": 2,
                "num_kept_concrete": 16969,
                "num_kept_lambda": 709,
                "num_values_explored": 231096,
                "num_values_kept": 17678,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:range_both',\n    inputs_dict={'x': [[58], [5, 2, 6, 4], [64, 24, 81, 57, 25, 73], [67, 92, 21, 13, 57, 48], [63, -35, 68, -54, -23, 9, 18, -34, -26]], 'y': [[25], [9, 4, 3], [41, 32, 53, 18, 27, 20, 61], [43, 17, 58, 34, 23], [25, 61, -58, -2, -62, 77, 23, 18, 47]]},\n    outputs=[33, 7, 63, 79, 139],\n    solution='Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))'\n)",
            "task_solution": "Subtract(Max(Maximum(x), Maximum(y)), Min(Minimum(x), Minimum(y)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3560504000634,
            "num_unique_values": 15652,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 85.88104431431714,
                "explored_percent_lambda": 2.543875350534005,
                "explored_percent_none": 11.575080335148865,
                "kept_percent_concrete": 96.36235775476281,
                "kept_percent_lambda": 3.637642245237182,
                "num_examples": 5,
                "num_explored_concrete": 201513,
                "num_explored_lambda": 5969,
                "num_explored_none": 27160,
                "num_inputs": 2,
                "num_kept_concrete": 15073,
                "num_kept_lambda": 569,
                "num_values_explored": 234642,
                "num_values_kept": 15642,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='none:slope',\n    inputs_dict={'x': [[9, 2], [-3, 1], [37, 32], [-17, -14], [6, -3]], 'y': [[58, 23], [45, -79], [-15, 50], [-46, -4], [5, 77]]},\n    outputs=[5, -31, -13, 14, -8],\n    solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))'\n)",
            "task_solution": "IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.139756916090846,
            "num_unique_values": 250,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), x, Map(lambda u1: (lambda v1: Square(v1))(u1), x))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 18.65671641791045,
                "explored_percent_lambda": 59.25373134328358,
                "explored_percent_none": 22.08955223880597,
                "kept_percent_concrete": 36.51452282157676,
                "kept_percent_lambda": 63.48547717842324,
                "num_examples": 3,
                "num_explored_concrete": 125,
                "num_explored_lambda": 397,
                "num_explored_none": 148,
                "num_inputs": 1,
                "num_kept_concrete": 88,
                "num_kept_lambda": 153,
                "num_values_explored": 670,
                "num_values_kept": 241,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:cube',\n    inputs_dict={'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]]},\n    outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],\n    solution='Map(lambda u1: Multiply(u1, Square(u1)), x)'\n)",
            "task_solution": "Map(lambda u1: Multiply(u1, Square(u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.8025232087820768,
            "num_unique_values": 247,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Max(v1, (lambda v1: IntDivide(v1, -1))(v2)))(u2, u1), x, x)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 27.635327635327634,
                "explored_percent_lambda": 51.99430199430199,
                "explored_percent_none": 20.37037037037037,
                "kept_percent_concrete": 48.319327731092436,
                "kept_percent_lambda": 51.680672268907564,
                "num_examples": 3,
                "num_explored_concrete": 194,
                "num_explored_lambda": 365,
                "num_explored_none": 143,
                "num_inputs": 1,
                "num_kept_concrete": 115,
                "num_kept_lambda": 123,
                "num_values_explored": 702,
                "num_values_kept": 238,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:absolute_value',\n    inputs_dict={'x': [[8, -4, 2, -3, -7, 6], [-23, 31, -12, -46, 78, 0, -32, -61, 48], [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]]},\n    outputs=[[8, 4, 2, 3, 7, 6], [23, 31, 12, 46, 78, 0, 32, 61, 48], [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],\n    solution='Map(lambda u1: Max(u1, Subtract(0, u1)), x)'\n)",
            "task_solution": "Map(lambda u1: Max(u1, Subtract(0, u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.0615202393382788,
            "num_unique_values": 502,
            "solution": "Map(lambda u1: (lambda v1: Subtract((lambda v1: Square(v1))(v1), v1))(u1), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 47.02290076335878,
                "explored_percent_lambda": 40.83969465648855,
                "explored_percent_none": 12.13740458015267,
                "kept_percent_concrete": 46.85598377281947,
                "kept_percent_lambda": 53.14401622718053,
                "num_examples": 3,
                "num_explored_concrete": 616,
                "num_explored_lambda": 535,
                "num_explored_none": 159,
                "num_inputs": 1,
                "num_kept_concrete": 231,
                "num_kept_lambda": 262,
                "num_values_explored": 1310,
                "num_values_kept": 493,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:multiply_previous',\n    inputs_dict={'x': [[6, 3, 4], [-4, 6, 2, -6, 7], [3, -3, -5, 2, 0, 1, -4, 8, -6]]},\n    outputs=[[30, 6, 12], [20, 30, 2, 42, 42], [6, 12, 30, 2, 0, 0, 20, 56, 42]],\n    solution='Map(lambda u1: Subtract(Square(u1), u1), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(Square(u1), u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 47.402932573109865,
            "num_unique_values": 3013,
            "solution": "Map(lambda u1: (lambda v1: IntDivide((lambda v1: Add(v1, (lambda v1: Square(v1))(v1)))(v1), 2))(u1), x)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 77.94382891007473,
                "explored_percent_lambda": 16.902860087606285,
                "explored_percent_none": 5.15331100231899,
                "kept_percent_concrete": 57.2237017310253,
                "kept_percent_lambda": 42.7762982689747,
                "num_examples": 3,
                "num_explored_concrete": 18150,
                "num_explored_lambda": 3936,
                "num_explored_none": 1200,
                "num_inputs": 1,
                "num_kept_concrete": 1719,
                "num_kept_lambda": 1285,
                "num_values_explored": 23286,
                "num_values_kept": 3004,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:triangular',\n    inputs_dict={'x': [[1, 2, 3, 4], [0, 5, 2, 1, 6], [7, 2, 5, 9, 2, 0, 4, 1, 3]]},\n    outputs=[[1, 3, 6, 10], [0, 15, 3, 1, 21], [28, 3, 15, 45, 3, 0, 10, 1, 6]],\n    solution='Map(lambda u1: IntDivide(Add(Square(u1), u1), 2), x)'\n)",
            "task_solution": "Map(lambda u1: IntDivide(Add(Square(u1), u1), 2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 8.130241757258773,
            "num_unique_values": 990,
            "solution": "Map(lambda u1: (lambda v1: Add(b, (lambda v1: Multiply(a, v1))(v1)))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 70.70844686648502,
                "explored_percent_lambda": 16.50772025431426,
                "explored_percent_none": 12.783832879200727,
                "kept_percent_concrete": 66.49642492339122,
                "kept_percent_lambda": 33.50357507660878,
                "num_examples": 3,
                "num_explored_concrete": 3114,
                "num_explored_lambda": 727,
                "num_explored_none": 563,
                "num_inputs": 3,
                "num_kept_concrete": 651,
                "num_kept_lambda": 328,
                "num_values_explored": 4404,
                "num_values_kept": 979,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:linear_equation',\n    inputs_dict={'x': [[14, 23, -16], [4, 2, 6, 0, 3], [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]], 'a': [-3, 4, 7], 'b': [25, -7, 10]},\n    outputs=[[-17, -44, 73], [9, 1, 17, -7, 5], [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],\n    solution='Map(lambda u1: Add(Multiply(a, u1), b), x)'\n)",
            "task_solution": "Map(lambda u1: Add(Multiply(a, u1), b), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0222570654005,
            "num_unique_values": 12879,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.791278369635,
                "explored_percent_lambda": 23.326354126892884,
                "explored_percent_none": 4.88236750347212,
                "kept_percent_concrete": 59.37839937839938,
                "kept_percent_lambda": 40.62160062160062,
                "num_examples": 3,
                "num_explored_concrete": 171098,
                "num_explored_lambda": 55593,
                "num_explored_none": 11636,
                "num_inputs": 1,
                "num_kept_concrete": 7642,
                "num_kept_lambda": 5228,
                "num_values_explored": 238327,
                "num_values_kept": 12870,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:linear_transform',\n    inputs_dict={'x': [[20, -10, 0], [4, 2, 3, 1, 5], [7, 9, -6, 12, 11, 4, 6, 4]]},\n    outputs=[[56, -34, -4], [8, 2, 5, -1, 11], [17, 23, -22, 32, 29, 8, 14, 8]],\n    solution='Map(lambda u1: Subtract(Multiply(u1, 3), 4), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(Multiply(u1, 3), 4), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3251482043415,
            "num_unique_values": 13820,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.70321481430489,
                "explored_percent_lambda": 25.281382301311396,
                "explored_percent_none": 5.015402884383713,
                "kept_percent_concrete": 57.30215045977844,
                "kept_percent_lambda": 42.69784954022156,
                "num_examples": 3,
                "num_explored_concrete": 162007,
                "num_explored_lambda": 58760,
                "num_explored_none": 11657,
                "num_inputs": 1,
                "num_kept_concrete": 7914,
                "num_kept_lambda": 5897,
                "num_values_explored": 232424,
                "num_values_kept": 13811,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:quadratic_transform',\n    inputs_dict={'x': [[3, 5, 1, 6], [7, -1, 4, 0, -2, 3], [5, -3, 9, -10, 11, 2, 7, 10, -8]]},\n    outputs=[[15, 35, 3, 48], [63, -1, 24, 0, 0, 15], [35, 3, 99, 80, 143, 8, 63, 120, 48]],\n    solution='Map(lambda u1: Multiply(u1, Add(u1, 2)), x)'\n)",
            "task_solution": "Map(lambda u1: Multiply(u1, Add(u1, 2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.8160925060510635,
            "num_unique_values": 222,
            "solution": "Map(lambda u1: (lambda v1: Max(a, (lambda v1: Min(b, v1))(v1)))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 25.076923076923077,
                "explored_percent_lambda": 46.0,
                "explored_percent_none": 28.923076923076923,
                "kept_percent_concrete": 45.97156398104266,
                "kept_percent_lambda": 54.02843601895734,
                "num_examples": 3,
                "num_explored_concrete": 163,
                "num_explored_lambda": 299,
                "num_explored_none": 188,
                "num_inputs": 3,
                "num_kept_concrete": 97,
                "num_kept_lambda": 114,
                "num_values_explored": 650,
                "num_values_kept": 211,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:clip',\n    inputs_dict={'x': [[5, -4, 6, 17, -3, 7], [53, 71, 28, 61, 27, 93, 57, 74], [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]], 'a': [0, 52, -5], 'b': [9, 64, 15]},\n    outputs=[[5, 0, 6, 9, 0, 7], [53, 64, 52, 61, 52, 64, 57, 64], [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],\n    solution='Map(lambda u1: Max(Min(u1, b), a), x)'\n)",
            "task_solution": "Map(lambda u1: Max(Min(u1, b), a), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0223530866206,
            "num_unique_values": 13926,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.76290459662799,
                "explored_percent_lambda": 24.38318770436552,
                "explored_percent_none": 5.853907699006485,
                "kept_percent_concrete": 62.599698210821295,
                "kept_percent_lambda": 37.400301789178705,
                "num_examples": 3,
                "num_explored_concrete": 166628,
                "num_explored_lambda": 58239,
                "num_explored_none": 13982,
                "num_inputs": 1,
                "num_kept_concrete": 8712,
                "num_kept_lambda": 5205,
                "num_values_explored": 238849,
                "num_values_kept": 13917,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:square_keep_sign',\n    inputs_dict={'x': [[4, -6, 8, -7], [-1, -4, 6, -5, 2], [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]]},\n    outputs=[[16, -36, 64, -49], [-1, -16, 36, -25, 4], [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],\n    solution='Map(lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1)), x)'\n)",
            "task_solution": "Map(lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.2793236896395683,
            "num_unique_values": 479,
            "solution": "Sort(Reverse(Map(lambda u1: (lambda v1: Square(v1))(u1), x)))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 46.34146341463415,
                "explored_percent_lambda": 40.09146341463415,
                "explored_percent_none": 13.567073170731707,
                "kept_percent_concrete": 47.4468085106383,
                "kept_percent_lambda": 52.5531914893617,
                "num_examples": 3,
                "num_explored_concrete": 608,
                "num_explored_lambda": 526,
                "num_explored_none": 178,
                "num_inputs": 1,
                "num_kept_concrete": 223,
                "num_kept_lambda": 247,
                "num_values_explored": 1312,
                "num_values_kept": 470,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:sort_square',\n    inputs_dict={'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]]},\n    outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],\n    solution='Sort(Map(lambda u1: Square(u1), x))'\n)",
            "task_solution": "Sort(Map(lambda u1: Square(u1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 101.09504698589444,
            "num_unique_values": 4979,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Subtract(v1, Minimum(x)))(u1), x, x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 68.85091640112064,
                "explored_percent_lambda": 26.694326225967192,
                "explored_percent_none": 4.454757372912167,
                "kept_percent_concrete": 49.29577464788732,
                "kept_percent_lambda": 50.70422535211268,
                "num_examples": 3,
                "num_explored_concrete": 32194,
                "num_explored_lambda": 12482,
                "num_explored_none": 2083,
                "num_inputs": 1,
                "num_kept_concrete": 2450,
                "num_kept_lambda": 2520,
                "num_values_explored": 46759,
                "num_values_kept": 4970,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:zero_min',\n    inputs_dict={'x': [[3, 7, 4, 9], [16, 10, 25, 16, 83], [-4, 3, 1, 0, -5, 5]]},\n    outputs=[[0, 4, 1, 6], [6, 0, 15, 6, 73], [1, 8, 6, 5, 0, 10]],\n    solution='Map(lambda u1: Subtract(u1, Minimum(x)), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(u1, Minimum(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.3095700331032276,
            "num_unique_values": 500,
            "solution": "Map(lambda u1: (lambda v1: Subtract(v1, Access(i, x)))(u1), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 62.73764258555133,
                "explored_percent_lambda": 21.989860583016476,
                "explored_percent_none": 15.272496831432193,
                "kept_percent_concrete": 68.9795918367347,
                "kept_percent_lambda": 31.020408163265305,
                "num_examples": 3,
                "num_explored_concrete": 990,
                "num_explored_lambda": 347,
                "num_explored_none": 241,
                "num_inputs": 2,
                "num_kept_concrete": 338,
                "num_kept_lambda": 152,
                "num_values_explored": 1578,
                "num_values_kept": 490,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:zero_element',\n    inputs_dict={'x': [[7, 3, 8], [25, 74, 34, 42, 60], [-6, 8, 2, 5, -7, 1, 4, -3, 0, 9]], 'i': [1, 3, 7]},\n    outputs=[[4, 0, 5], [-17, 32, -8, 0, 18], [-3, 11, 5, 8, -4, 4, 7, 0, 3, 12]],\n    solution='Map(lambda u1: Subtract(u1, Access(i, x)), x)'\n)",
            "task_solution": "Map(lambda u1: Subtract(u1, Access(i, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0404420495033,
            "num_unique_values": 11319,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.45255893062664,
                "explored_percent_lambda": 20.872499302770457,
                "explored_percent_none": 6.674941766602902,
                "kept_percent_concrete": 59.25369174993368,
                "kept_percent_lambda": 40.74630825006632,
                "num_examples": 3,
                "num_explored_concrete": 184449,
                "num_explored_lambda": 53137,
                "num_explored_none": 16993,
                "num_inputs": 2,
                "num_kept_concrete": 6701,
                "num_kept_lambda": 4608,
                "num_values_explored": 254579,
                "num_values_kept": 11309,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:shift_first_to',\n    inputs_dict={'x': [[7, 1, 4, 8, 3], [4, 14, 11, 8, 18, 11, 9, 3], [2, -5, 7, 11, -3, 2, 15, -15, -13]], 't': [2, 10, -5]},\n    outputs=[[2, -4, -1, 3, -2], [10, 20, 17, 14, 24, 17, 15, 9], [-5, -12, 0, 4, -10, -5, 8, -22, -20]],\n    solution='Map(lambda u1: Add(u1, Subtract(t, Head(x))), x)'\n)",
            "task_solution": "Map(lambda u1: Add(u1, Subtract(t, Head(x))), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 40.70519816875458,
            "num_unique_values": 2878,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Head((lambda v1: Drop(v1, x))(v1)))(u1), i, i)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 77.14150943396227,
                "explored_percent_lambda": 19.81132075471698,
                "explored_percent_none": 3.047169811320755,
                "kept_percent_concrete": 59.274755927475596,
                "kept_percent_lambda": 40.725244072524404,
                "num_examples": 3,
                "num_explored_concrete": 16354,
                "num_explored_lambda": 4200,
                "num_explored_none": 646,
                "num_inputs": 2,
                "num_kept_concrete": 1700,
                "num_kept_lambda": 1168,
                "num_values_explored": 21200,
                "num_values_kept": 2868,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:gather',\n    inputs_dict={'x': [[4, 2, 6, 8], [11, 3, 20, -5, 7], [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]], 'i': [[0, 2, 1, 3], [1, 4, 2, 1, 3, 1, 4, 1], [2, 0, 2, 8, 4, 2, 3, 5]]},\n    outputs=[[4, 6, 2, 8], [3, 7, 20, 3, -5, 3, 7, 3], [4, 3, 4, 1, 3, 4, -5, 9]],\n    solution='Map(lambda u1: Access(u1, x), i)'\n)",
            "task_solution": "Map(lambda u1: Access(u1, x), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 21.00877531990409,
            "num_unique_values": 2710,
            "solution": "Maximum(ZipWith(lambda u1, u2: (lambda v1: Access(v1, x))(u2), i, Drop(1, i)))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 88.09563899646405,
                "explored_percent_lambda": 9.580737497895269,
                "explored_percent_none": 2.3236235056406804,
                "kept_percent_concrete": 83.37037037037037,
                "kept_percent_lambda": 16.62962962962963,
                "num_examples": 5,
                "num_explored_concrete": 10464,
                "num_explored_lambda": 1138,
                "num_explored_none": 276,
                "num_inputs": 2,
                "num_kept_concrete": 2251,
                "num_kept_lambda": 449,
                "num_values_explored": 11878,
                "num_values_kept": 2700,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:max_selected',\n    inputs_dict={'x': [[3, 8, 4, 2, 6, 5], [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1], [64, 83, 27, 18, 59, 17, 45, 23, 63], [64, 83, 27, 18, 59, 17, 45, 23, 63], [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]], 'i': [[3, 2, 0, 4], [5, 4, 1], [2, 3, 4, 6, 7], [2, 3, 5, 6, 7], [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]]},\n    outputs=[6, 3, 59, 45, 41],\n    solution='Maximum(Map(lambda u1: Access(u1, x), i))'\n)",
            "task_solution": "Maximum(Map(lambda u1: Access(u1, x), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.325559787452221,
            "num_unique_values": 253,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: If((lambda v1: IsEven(v1))(v2), v1, 0))(u1, u2), x, x)",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 26.059322033898304,
                "explored_percent_lambda": 56.779661016949156,
                "explored_percent_none": 17.161016949152543,
                "kept_percent_concrete": 39.75409836065574,
                "kept_percent_lambda": 60.24590163934426,
                "num_examples": 3,
                "num_explored_concrete": 123,
                "num_explored_lambda": 268,
                "num_explored_none": 81,
                "num_inputs": 1,
                "num_kept_concrete": 97,
                "num_kept_lambda": 147,
                "num_values_explored": 472,
                "num_values_kept": 244,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:zero_odds',\n    inputs_dict={'x': [[4, 2, 5, 6, 3], [15, 14, 7, 26, 24, 21], [-42, 25, -39, 0, 34, 12, 55, -14, 21]]},\n    outputs=[[4, 2, 0, 6, 0], [0, 14, 0, 26, 24, 0], [-42, 0, 0, 0, 34, 12, 0, -14, 0]],\n    solution='Map(lambda u1: If(IsOdd(u1), 0, u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(IsOdd(u1), 0, u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0434147045016,
            "num_unique_values": 12189,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.27381962393702,
                "explored_percent_lambda": 20.267545330781523,
                "explored_percent_none": 5.458635045281455,
                "kept_percent_concrete": 63.35194613236985,
                "kept_percent_lambda": 36.64805386763015,
                "num_examples": 3,
                "num_explored_concrete": 188221,
                "num_explored_lambda": 51361,
                "num_explored_none": 13833,
                "num_inputs": 3,
                "num_kept_concrete": 7715,
                "num_kept_lambda": 4463,
                "num_values_explored": 253415,
                "num_values_kept": 12178,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:replace',\n    inputs_dict={'x': [[7, 2, 4, 6, 4, 2, 5], [-6, -3, 4, 3, -5, -3, 2, 1, 5], [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]], 'f': [4, -3, 27], 'r': [-1, 7, 99]},\n    outputs=[[7, 2, -1, 6, -1, 2, 5], [-6, 7, 4, 3, -5, 7, 2, 1, 5], [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],\n    solution='Map(lambda u1: If(Equal(u1, f), r, u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(Equal(u1, f), r, u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3015301283449,
            "num_unique_values": 13062,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 66.69413211302242,
                "explored_percent_lambda": 29.00435644233735,
                "explored_percent_none": 4.301511444640224,
                "kept_percent_concrete": 52.14526509347226,
                "kept_percent_lambda": 47.85473490652774,
                "num_examples": 3,
                "num_explored_concrete": 157839,
                "num_explored_lambda": 68642,
                "num_explored_none": 10180,
                "num_inputs": 2,
                "num_kept_concrete": 6806,
                "num_kept_lambda": 6246,
                "num_values_explored": 236661,
                "num_values_kept": 13052,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:replace_negative',\n    inputs_dict={'x': [[7, -6, 8, -3, -5, 2], [-6, -4, 2, -3, 14, -15, 2, -5, -8], [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]], 'y': [-9, 5, 99]},\n    outputs=[[7, -9, 8, -9, -9, 2], [5, 5, 2, 5, 14, 5, 2, 5, 5], [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],\n    solution='Map(lambda u1: If(Less(u1, 0), y, u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(Less(u1, 0), y, u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.4351338986307383,
            "num_unique_values": 528,
            "solution": "ZipWith(lambda u1, u2: (lambda v1: Add(v1, Last(x)))(u1), x, Take(-1, x))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 56.09756097560975,
                "explored_percent_lambda": 33.6441893830703,
                "explored_percent_none": 10.258249641319942,
                "kept_percent_concrete": 61.46435452793834,
                "kept_percent_lambda": 38.53564547206166,
                "num_examples": 3,
                "num_explored_concrete": 782,
                "num_explored_lambda": 469,
                "num_explored_none": 143,
                "num_inputs": 1,
                "num_kept_concrete": 319,
                "num_kept_lambda": 200,
                "num_values_explored": 1394,
                "num_values_kept": 519,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:spread_last',\n    inputs_dict={'x': [[4, 2, 6, 3, 5], [-7, 17, -4, -12, 3, -9], [41, 23, 58, 21, 14, 63, 28, 36]]},\n    outputs=[[9, 7, 11, 8], [-16, 8, -13, -21, -6], [77, 59, 94, 57, 50, 99, 64]],\n    solution='Take(-1, Map(lambda u1: Add(u1, Last(x)), x))'\n)",
            "task_solution": "Take(-1, Map(lambda u1: Add(u1, Last(x)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.475226340815425,
            "num_unique_values": 221,
            "solution": "Map(lambda u1: Head(x), x)",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 24.88262910798122,
                "explored_percent_lambda": 60.250391236306726,
                "explored_percent_none": 14.86697965571205,
                "kept_percent_concrete": 37.735849056603776,
                "kept_percent_lambda": 62.264150943396224,
                "num_examples": 3,
                "num_explored_concrete": 159,
                "num_explored_lambda": 385,
                "num_explored_none": 95,
                "num_inputs": 1,
                "num_kept_concrete": 80,
                "num_kept_lambda": 132,
                "num_values_explored": 639,
                "num_values_kept": 212,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:fill_first',\n    inputs_dict={'x': [[3, 6, 1, 4, 7], [-26, 27, 51, -14, 31, -17, -32], [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]]},\n    outputs=[[3, 3, 3, 3, 3], [-26, -26, -26, -26, -26, -26, -26], [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],\n    solution='Map(lambda u1: Head(x), x)'\n)",
            "task_solution": "Map(lambda u1: Head(x), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.43649541772902,
            "num_unique_values": 483,
            "solution": "Sum(Map(lambda u1: 1, x))",
            "solution_weight": 4,
            "stats": {
                "explored_percent_concrete": 40.371024734982335,
                "explored_percent_lambda": 35.512367491166074,
                "explored_percent_none": 24.11660777385159,
                "kept_percent_concrete": 65.18987341772151,
                "kept_percent_lambda": 34.81012658227848,
                "num_examples": 5,
                "num_explored_concrete": 457,
                "num_explored_lambda": 402,
                "num_explored_none": 273,
                "num_inputs": 1,
                "num_kept_concrete": 309,
                "num_kept_lambda": 165,
                "num_values_explored": 1132,
                "num_values_kept": 474,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:length',\n    inputs_dict={'x': [[65, 24], [9, 45, 2, 16, 4, 2, 63], [8, -4, 28, 27, -32, 23, 15, 2, 0], [0], [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]]},\n    outputs=[2, 7, 9, 1, 10],\n    solution='Sum(Map(lambda u1: 1, x))'\n)",
            "task_solution": "Sum(Map(lambda u1: 1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0166939534247,
            "num_unique_values": 15693,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 88.90006862204409,
                "explored_percent_lambda": 3.0871499960005555,
                "explored_percent_none": 8.01278138195535,
                "kept_percent_concrete": 93.29890334098444,
                "kept_percent_lambda": 6.701096659015557,
                "num_examples": 5,
                "num_explored_concrete": 211167,
                "num_explored_lambda": 7333,
                "num_explored_none": 19033,
                "num_inputs": 1,
                "num_kept_concrete": 14633,
                "num_kept_lambda": 1051,
                "num_values_explored": 237533,
                "num_values_kept": 15684,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:median',\n    inputs_dict={'x': [[6, 5, 2], [42, 86, 31, 58, 75], [18, 2, 34, 7, 0, 56, 32, 48, 54], [18, 2, 34, 37, 0, 56, 32, 48, 54], [85, 48, -42, -15, -25, 23, -52]]},\n    outputs=[5, 58, 32, 34, -15],\n    solution='Access(IntDivide(Sum(Map(lambda u1: 1, x)), 2), Sort(x))'\n)",
            "task_solution": "Access(IntDivide(Sum(Map(lambda u1: 1, x)), 2), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.4250951763242483,
            "num_unique_values": 223,
            "solution": "Map(lambda u1: (lambda v1: If((lambda v1: Less(y, v1))(v1), 1, 0))(u1), x)",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 37.423312883435585,
                "explored_percent_lambda": 38.65030674846626,
                "explored_percent_none": 23.926380368098158,
                "kept_percent_concrete": 60.563380281690144,
                "kept_percent_lambda": 39.436619718309856,
                "num_examples": 3,
                "num_explored_concrete": 183,
                "num_explored_lambda": 189,
                "num_explored_none": 117,
                "num_inputs": 2,
                "num_kept_concrete": 129,
                "num_kept_lambda": 84,
                "num_values_explored": 489,
                "num_values_kept": 213,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='map:is_greater',\n    inputs_dict={'x': [[19, 13, 17, 18, 20], [5, 7, 4, 5, 6, 2, 3], [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]], 'y': [17, 4, -7]},\n    outputs=[[1, 0, 0, 1, 1], [1, 1, 0, 1, 1, 0, 0], [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],\n    solution='Map(lambda u1: If(Greater(u1, y), 1, 0), x)'\n)",
            "task_solution": "Map(lambda u1: If(Greater(u1, y), 1, 0), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0083898659796,
            "num_unique_values": 12782,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.24333818726296,
                "explored_percent_lambda": 21.704881078724156,
                "explored_percent_none": 6.051780734012883,
                "kept_percent_concrete": 56.96390824395208,
                "kept_percent_lambda": 43.03609175604792,
                "num_examples": 3,
                "num_explored_concrete": 175625,
                "num_explored_lambda": 52765,
                "num_explored_none": 14712,
                "num_inputs": 1,
                "num_kept_concrete": 7276,
                "num_kept_lambda": 5497,
                "num_values_explored": 243102,
                "num_values_kept": 12773,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:divide_even',\n    inputs_dict={'x': [[8, 5, 6, 14, 9], [42, -15, 67, 0, -16, 23, 31, 28], [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]]},\n    outputs=[[4, 5, 3, 7, 9], [21, -15, 67, 0, -8, 23, 31, 14], [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],\n    solution='Map(lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3630883190781,
            "num_unique_values": 13779,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.46314771051087,
                "explored_percent_lambda": 19.067312725023395,
                "explored_percent_none": 4.469539564465733,
                "kept_percent_concrete": 67.02011765560317,
                "kept_percent_lambda": 32.979882344396835,
                "num_examples": 3,
                "num_explored_concrete": 192837,
                "num_explored_lambda": 48087,
                "num_explored_none": 11272,
                "num_inputs": 2,
                "num_kept_concrete": 9228,
                "num_kept_lambda": 4541,
                "num_values_explored": 252196,
                "num_values_kept": 13769,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='map:multiply_odd',\n    inputs_dict={'x': [[3, 1, 2, 5, 4, 7], [15, 21, 28, 7, 33, 26, 42, 27, 18], [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]], 'n': [3, 2, -3]},\n    outputs=[[9, 3, 2, 15, 4, 21], [30, 42, 28, 14, 66, 26, 42, 54, 18], [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],\n    solution='Map(lambda u1: If(IsOdd(u1), Multiply(u1, n), u1), x)'\n)",
            "task_solution": "Map(lambda u1: If(IsOdd(u1), Multiply(u1, n), u1), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 5.081783941015601,
            "num_unique_values": 780,
            "solution": "Filter(lambda u1: (lambda v1: Greater((lambda v1: Max(y, v1))(v1), y))(u1), x)",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 68.29268292682927,
                "explored_percent_lambda": 22.571310458867302,
                "explored_percent_none": 9.136006614303431,
                "kept_percent_concrete": 67.66233766233766,
                "kept_percent_lambda": 32.33766233766234,
                "num_examples": 3,
                "num_explored_concrete": 1652,
                "num_explored_lambda": 546,
                "num_explored_none": 221,
                "num_inputs": 2,
                "num_kept_concrete": 521,
                "num_kept_lambda": 249,
                "num_values_explored": 2419,
                "num_values_kept": 770,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:greater',\n    inputs_dict={'x': [[1, 3, 4, 2], [6, 4, 3, 5, 9, 2], [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]], 'y': [2, 4, -3]},\n    outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],\n    solution='Filter(lambda u1: Greater(u1, y), x)'\n)",
            "task_solution": "Filter(lambda u1: Greater(u1, y), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.5405141487717628,
            "num_unique_values": 225,
            "solution": "Filter(lambda u1: (lambda v1: IsEven(v1))(u1), Sort(x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 25.03793626707132,
                "explored_percent_lambda": 54.931714719271625,
                "explored_percent_none": 20.030349013657055,
                "kept_percent_concrete": 41.666666666666664,
                "kept_percent_lambda": 58.333333333333336,
                "num_examples": 3,
                "num_explored_concrete": 165,
                "num_explored_lambda": 362,
                "num_explored_none": 132,
                "num_inputs": 1,
                "num_kept_concrete": 90,
                "num_kept_lambda": 126,
                "num_values_explored": 659,
                "num_values_kept": 216,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:sort_even',\n    inputs_dict={'x': [[7, 6, 2, 5, 8, 0, 5], [52, 35, 68, 37, 41, 22, 64, 57, 26], [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]]},\n    outputs=[[0, 2, 6, 8], [22, 26, 52, 64, 68], [-24, -14, -12, 16, 28, 58]],\n    solution='Filter(lambda u1: IsEven(u1), Sort(x))'\n)",
            "task_solution": "Filter(lambda u1: IsEven(u1), Sort(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.108836343511939,
            "num_unique_values": 460,
            "solution": "Maximum(Filter(lambda u1: (lambda v1: IsOdd(v1))(u1), x))",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 48.27956989247312,
                "explored_percent_lambda": 38.27956989247312,
                "explored_percent_none": 13.440860215053764,
                "kept_percent_concrete": 64.96674057649668,
                "kept_percent_lambda": 35.033259423503324,
                "num_examples": 5,
                "num_explored_concrete": 449,
                "num_explored_lambda": 356,
                "num_explored_none": 125,
                "num_inputs": 1,
                "num_kept_concrete": 293,
                "num_kept_lambda": 158,
                "num_values_explored": 930,
                "num_values_kept": 451,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:max_odd',\n    inputs_dict={'x': [[32, 57, 60, 53], [7, 12, 6, 18, 13, 14, 5, 6], [-6, 8, 5, -7, -13, 1, -4, 18, 32], [32, 25, 68, 43, 42, 44, 56, 37, 28, 29], [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]]},\n    outputs=[57, 13, 5, 43, 55],\n    solution='Maximum(Filter(lambda u1: IsOdd(u1), x))'\n)",
            "task_solution": "Maximum(Filter(lambda u1: IsOdd(u1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.4974066615104675,
            "num_unique_values": 792,
            "solution": "Filter(lambda u1: (lambda v1: Less(v1, 1))(u1), Filter(lambda u1: (lambda v1: IsOdd(v1))(u1), Take(-1, x)))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 63.03057964399817,
                "explored_percent_lambda": 28.34322227293473,
                "explored_percent_none": 8.626198083067093,
                "kept_percent_concrete": 65.51724137931035,
                "kept_percent_lambda": 34.48275862068966,
                "num_examples": 3,
                "num_explored_concrete": 1381,
                "num_explored_lambda": 621,
                "num_explored_none": 189,
                "num_inputs": 1,
                "num_kept_concrete": 513,
                "num_kept_lambda": 270,
                "num_values_explored": 2191,
                "num_values_kept": 783,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:odd_negative',\n    inputs_dict={'x': [[-11, 7, -3, -8, 2], [2, -5, 3, -4, -7, -1, -2], [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]]},\n    outputs=[[-11, -3], [-5, -7, -1], [-17, -25, -31, -23, -7]],\n    solution='Filter(lambda u1: IsOdd(Min(u1, 0)), x)'\n)",
            "task_solution": "Filter(lambda u1: IsOdd(Min(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.01769832521677,
            "num_unique_values": 492,
            "solution": "Sum(Filter(lambda u1: (lambda v1: Less(0, v1))(u1), x))",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 54.21965317919075,
                "explored_percent_lambda": 37.34104046242775,
                "explored_percent_none": 8.439306358381502,
                "kept_percent_concrete": 65.63146997929607,
                "kept_percent_lambda": 34.368530020703936,
                "num_examples": 5,
                "num_explored_concrete": 469,
                "num_explored_lambda": 323,
                "num_explored_none": 73,
                "num_inputs": 1,
                "num_kept_concrete": 317,
                "num_kept_lambda": 166,
                "num_values_explored": 865,
                "num_values_kept": 483,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:sum_positive',\n    inputs_dict={'x': [[-5, 8, -10, 7, 2], [16, 21, -14, 21, 1, -49, 31], [45, -45, -38, -41, -6, 45, -13, 20], [-46, -32, -29, 33, -3, -13, 9, 23, -39], [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]]},\n    outputs=[17, 90, 110, 65, 78],\n    solution='Sum(Filter(lambda u1: Greater(u1, 0), x))'\n)",
            "task_solution": "Sum(Filter(lambda u1: Greater(u1, 0), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.4169298969209194,
            "num_unique_values": 468,
            "solution": "Reverse(Take(-1, Filter(lambda u1: (lambda v1: Less(v1, 4))(u1), Sort(x))))",
            "solution_weight": 10,
            "stats": {
                "explored_percent_concrete": 52.908587257617725,
                "explored_percent_lambda": 38.227146814404435,
                "explored_percent_none": 8.86426592797784,
                "kept_percent_concrete": 59.91285403050109,
                "kept_percent_lambda": 40.08714596949891,
                "num_examples": 3,
                "num_explored_concrete": 573,
                "num_explored_lambda": 414,
                "num_explored_none": 96,
                "num_inputs": 1,
                "num_kept_concrete": 275,
                "num_kept_lambda": 184,
                "num_values_explored": 1083,
                "num_values_kept": 459,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:negative_descending',\n    inputs_dict={'x': [[-4, 8, 1, -2, -9, -5], [-11, 10, -13, -19, 0, -12, -10], [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]]},\n    outputs=[[-2, -4, -5, -9], [-10, -11, -12, -13, -19], [-19, -36, -38, -43, -44, -48]],\n    solution='Filter(lambda u1: Less(u1, 0), Reverse(Sort(x)))'\n)",
            "task_solution": "Filter(lambda u1: Less(u1, 0), Reverse(Sort(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 4.650671599432826,
            "num_unique_values": 776,
            "solution": "Filter(lambda u1: (lambda v1: Greater(b, v1))(u1), Filter(lambda u1: (lambda v1: Greater(v1, a))(u1), x))",
            "solution_weight": 11,
            "stats": {
                "explored_percent_concrete": 66.74603174603175,
                "explored_percent_lambda": 20.1984126984127,
                "explored_percent_none": 13.055555555555555,
                "kept_percent_concrete": 70.06535947712419,
                "kept_percent_lambda": 29.934640522875817,
                "num_examples": 3,
                "num_explored_concrete": 1682,
                "num_explored_lambda": 509,
                "num_explored_none": 329,
                "num_inputs": 3,
                "num_kept_concrete": 536,
                "num_kept_lambda": 229,
                "num_values_explored": 2520,
                "num_values_kept": 765,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='filter:between',\n    inputs_dict={'x': [[7, 6, 1, 4, 9, 3, 5, 8], [11, 78, 73, 35, 70, 59, 16, 74, 24], [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]], 'a': [3, 15, -20], 'b': [8, 74, 20]},\n    outputs=[[7, 6, 4, 5], [73, 35, 70, 59, 16, 24], [-12, 13, 19, 0, -19]],\n    solution='Filter(lambda u1: Less(u1, b), Filter(lambda u1: Greater(u1, a), x))'\n)",
            "task_solution": "Filter(lambda u1: Less(u1, b), Filter(lambda u1: Greater(u1, a), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0202288478613,
            "num_unique_values": 15785,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.88942914046211,
                "explored_percent_lambda": 20.99903604020604,
                "explored_percent_none": 5.111534819331853,
                "kept_percent_concrete": 64.72900158478605,
                "kept_percent_lambda": 35.270998415213946,
                "num_examples": 3,
                "num_explored_concrete": 174000,
                "num_explored_lambda": 49450,
                "num_explored_none": 12037,
                "num_inputs": 2,
                "num_kept_concrete": 10211,
                "num_kept_lambda": 5564,
                "num_values_explored": 235487,
                "num_values_kept": 15775,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:multiple',\n    inputs_dict={'x': [[24, 19, 22, 16, 10, 44], [21, -35, -25, 0, -17, -14, 15, 42], [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]], 'n': [4, 7, 3]},\n    outputs=[[24, 16, 44], [21, -35, 0, -14, 42], [84, -57, 27, -39]],\n    solution='Filter(lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n)), x)'\n)",
            "task_solution": "Filter(lambda u1: Equal(u1, Multiply(IntDivide(u1, n), n)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3590217642486,
            "num_unique_values": 15219,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.62618922000783,
                "explored_percent_lambda": 18.971356604319485,
                "explored_percent_none": 4.402454175672686,
                "kept_percent_concrete": 68.65014136366625,
                "kept_percent_lambda": 31.34985863633375,
                "num_examples": 3,
                "num_explored_concrete": 180093,
                "num_explored_lambda": 44588,
                "num_explored_none": 10347,
                "num_inputs": 2,
                "num_kept_concrete": 10441,
                "num_kept_lambda": 4768,
                "num_values_explored": 235028,
                "num_values_kept": 15209,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:find_factors',\n    inputs_dict={'x': [[4, 5, 2, 15, 3, 5, 1, 7], [4, 5, 6, 2, 3, 7, 9, 1, 8], [-5, 7, -8, 12, -4, 2, -1, 4, 6, -10]], 'n': [45, 28, 40]},\n    outputs=[[5, 15, 3, 5, 1], [4, 2, 7, 1], [-5, -8, -4, 2, -1, 4, -10]],\n    solution='Filter(lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1)), x)'\n)",
            "task_solution": "Filter(lambda u1: Equal(n, Multiply(IntDivide(n, u1), u1)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3408006969839,
            "num_unique_values": 14509,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 80.75834214910722,
                "explored_percent_lambda": 16.452161399331,
                "explored_percent_none": 2.789496451561784,
                "kept_percent_concrete": 61.0,
                "kept_percent_lambda": 39.0,
                "num_examples": 3,
                "num_explored_concrete": 188557,
                "num_explored_lambda": 38413,
                "num_explored_none": 6513,
                "num_inputs": 1,
                "num_kept_concrete": 8845,
                "num_kept_lambda": 5655,
                "num_values_explored": 233483,
                "num_values_kept": 14500,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:fixpoints',\n    inputs_dict={'x': [[0, 5, 4, 3, 5, 5, 6, 1], [3, 1, 2, 4, 6, 5, 8, 0, 7], [0, 9, 2, 3, 4, 7, 6, 8, 7, 9]]},\n    outputs=[[0, 3, 5, 5, 5, 6], [1, 2, 5], [0, 2, 3, 4, 6, 9, 9]],\n    solution='Sort(Filter(lambda u1: Equal(u1, Access(u1, x)), x))'\n)",
            "task_solution": "Sort(Filter(lambda u1: Equal(u1, Access(u1, x)), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3449215330184,
            "num_unique_values": 15841,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.10750493888804,
                "explored_percent_lambda": 17.514273929183943,
                "explored_percent_none": 6.3782211319280115,
                "kept_percent_concrete": 71.73720783322804,
                "kept_percent_lambda": 28.262792166771952,
                "num_examples": 3,
                "num_explored_concrete": 175287,
                "num_explored_lambda": 40338,
                "num_explored_none": 14690,
                "num_inputs": 3,
                "num_kept_concrete": 11356,
                "num_kept_lambda": 4474,
                "num_values_explored": 230315,
                "num_values_kept": 15830,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='filter:find_at',\n    inputs_dict={'x': [[8, 7, 4, 7, 7, 2], [17, -9, -10, -9, -9, 23, -9], [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]], 'y': [7, -9, 42], 'i': [[0, 1, 2, 4, 5], [0, 1, 0, 4, 6, 2, 1, 5, 4, 1], [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]]},\n    outputs=[[1, 4], [1, 4, 6, 1, 4, 1], [6, 3, 0, 9, 7]],\n    solution='Filter(lambda u1: Equal(Access(u1, x), y), i)'\n)",
            "task_solution": "Filter(lambda u1: Equal(Access(u1, x), y), i)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 117.80270869284868,
            "num_unique_values": 5788,
            "solution": "Count(lambda u1: (lambda v1: Equal(n, v1))(u1), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 90.83121206187586,
                "explored_percent_lambda": 3.5555773121858887,
                "explored_percent_none": 5.613210625938255,
                "kept_percent_concrete": 88.88888888888889,
                "kept_percent_lambda": 11.11111111111111,
                "num_examples": 5,
                "num_explored_concrete": 55665,
                "num_explored_lambda": 2179,
                "num_explored_none": 3440,
                "num_inputs": 2,
                "num_kept_concrete": 5136,
                "num_kept_lambda": 642,
                "num_values_explored": 61284,
                "num_values_kept": 5778,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:num_match',\n    inputs_dict={'x': [[5, 7, 8, 7, 9, 6], [5, 7, 8, 7, 9, 6], [7, 0, 7, 0, 7, 7], [42, 34, 42, 42, 42, 56, 42, 38, 42, 42], [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]], 'n': [7, 8, 7, 42, 42]},\n    outputs=[2, 1, 4, 7, 6],\n    solution='Count(lambda u1: Equal(u1, n), x)'\n)",
            "task_solution": "Count(lambda u1: Equal(u1, n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.5961898937821388,
            "num_unique_values": 241,
            "solution": "Count(lambda u1: (lambda v1: Greater(q, v1))(u1), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 43.7414030261348,
                "explored_percent_lambda": 22.420907840440165,
                "explored_percent_none": 33.83768913342504,
                "kept_percent_concrete": 80.51948051948052,
                "kept_percent_lambda": 19.48051948051948,
                "num_examples": 5,
                "num_explored_concrete": 318,
                "num_explored_lambda": 163,
                "num_explored_none": 246,
                "num_inputs": 2,
                "num_kept_concrete": 186,
                "num_kept_lambda": 45,
                "num_values_explored": 727,
                "num_values_kept": 231,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:rank',\n    inputs_dict={'x': [[28, 43, 69, 38, 42], [35, -54, 48, 17, 49, -24, 32], [-7, -4, 8, -5, -4, -3, -8, 4], [2, 6, 0, 3, 1, 4, 2, 3, 5, 0], [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]], 'q': [44, 18, -3, 4, 4]},\n    outputs=[4, 3, 5, 7, 6],\n    solution='Count(lambda u1: Less(u1, q), x)'\n)",
            "task_solution": "Count(lambda u1: Less(u1, q), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.9697640519589186,
            "num_unique_values": 800,
            "solution": "Count(lambda u1: (lambda v1: Less(v1, Head(x)))(u1), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 63.64105208870552,
                "explored_percent_lambda": 25.012893243940177,
                "explored_percent_none": 11.346054667354306,
                "kept_percent_concrete": 73.95701643489254,
                "kept_percent_lambda": 26.04298356510746,
                "num_examples": 5,
                "num_explored_concrete": 1234,
                "num_explored_lambda": 485,
                "num_explored_none": 220,
                "num_inputs": 1,
                "num_kept_concrete": 585,
                "num_kept_lambda": 206,
                "num_values_explored": 1939,
                "num_values_kept": 791,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:num_under_first',\n    inputs_dict={'x': [[5, 2, 6, 7, 1, 3, 8], [26, 0, 19, 22, 39, 47, 1, 26], [65, 33, 16, 53, 34, 95, 86, 4, 12], [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12], [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]]},\n    outputs=[3, 4, 6, 4, 5],\n    solution='Count(lambda u1: Less(u1, Head(x)), x)'\n)",
            "task_solution": "Count(lambda u1: Less(u1, Head(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.1575960963964462,
            "num_unique_values": 246,
            "solution": "Count(lambda u1: (lambda v1: Less(v1, 0))(u1), x)",
            "solution_weight": 6,
            "stats": {
                "explored_percent_concrete": 31.222707423580786,
                "explored_percent_lambda": 50.87336244541485,
                "explored_percent_none": 17.903930131004365,
                "kept_percent_concrete": 51.89873417721519,
                "kept_percent_lambda": 48.10126582278481,
                "num_examples": 5,
                "num_explored_concrete": 143,
                "num_explored_lambda": 233,
                "num_explored_none": 82,
                "num_inputs": 1,
                "num_kept_concrete": 123,
                "num_kept_lambda": 114,
                "num_values_explored": 458,
                "num_values_kept": 237,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:count_negative',\n    inputs_dict={'x': [[6, 7, 0, -4, 1, -5, 2], [11, -4, -1, 19, -5, 18, -8, -13], [25, 16, -15, 18, -3, -12, 1, 29, -21], [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11], [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]]},\n    outputs=[2, 5, 4, 6, 3],\n    solution='Count(lambda u1: Less(u1, 0), x)'\n)",
            "task_solution": "Count(lambda u1: Less(u1, 0), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 90.53859940730035,
            "num_unique_values": 5898,
            "solution": "Count(lambda u1: (lambda v1: Equal(Last(x), v1))(u1), x)",
            "solution_weight": 7,
            "stats": {
                "explored_percent_concrete": 88.52896758519556,
                "explored_percent_lambda": 5.255094223992646,
                "explored_percent_none": 6.2159381908117926,
                "kept_percent_concrete": 88.38512480896587,
                "kept_percent_lambda": 11.614875191034132,
                "num_examples": 5,
                "num_explored_concrete": 40448,
                "num_explored_lambda": 2401,
                "num_explored_none": 2840,
                "num_inputs": 1,
                "num_kept_concrete": 5205,
                "num_kept_lambda": 684,
                "num_values_explored": 45689,
                "num_values_kept": 5889,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:count_last',\n    inputs_dict={'x': [[11, 10, 9, 7, 10, 19, 10], [47, 23, 44, 3, 23, 40, 23, 44], [47, 23, 44, 3, 23, 40, 23, 23], [-2, 26, -20, -19, 23, -29, -9, 2, -23], [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]]},\n    outputs=[3, 2, 4, 1, 6],\n    solution='Count(lambda u1: Equal(u1, Last(x)), x)'\n)",
            "task_solution": "Count(lambda u1: Equal(u1, Last(x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 522.4951027333736,
            "num_unique_values": 16449,
            "solution": "Count(lambda u1: (lambda v1: Equal(v1, Access(i, x)))(u1), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 90.52800181971548,
                "explored_percent_lambda": 2.112102055709831,
                "explored_percent_none": 7.359896124574689,
                "kept_percent_concrete": 93.46067279031571,
                "kept_percent_lambda": 6.539327209684287,
                "num_examples": 5,
                "num_explored_concrete": 191034,
                "num_explored_lambda": 4457,
                "num_explored_none": 15531,
                "num_inputs": 2,
                "num_kept_concrete": 15364,
                "num_kept_lambda": 1075,
                "num_values_explored": 211022,
                "num_values_kept": 16439,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:count_at',\n    inputs_dict={'x': [[14, 11, 28, 11, -17, -1, -21], [24, 33, 24, 24, 23, 0, 24, 25], [26, -7, -21, 20, -26, -7, -29, -7, -23], [48, -21, -97, 3, 88, -21, -21, -20, -21, -21], [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]], 'i': [3, 6, 1, 7, 7]},\n    outputs=[2, 4, 3, 1, 6],\n    solution='Count(lambda u1: Equal(u1, Access(i, x)), x)'\n)",
            "task_solution": "Count(lambda u1: Equal(u1, Access(i, x)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 53.3570717535913,
            "num_unique_values": 4544,
            "solution": "Count(lambda u1: (lambda v1: IsEven((lambda v1: Min(2, v1))(v1)))(u1), x)",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 88.45654993514916,
                "explored_percent_lambda": 6.816544170629774,
                "explored_percent_none": 4.726905894221069,
                "kept_percent_concrete": 84.9173098125689,
                "kept_percent_lambda": 15.082690187431092,
                "num_examples": 5,
                "num_explored_concrete": 24552,
                "num_explored_lambda": 1892,
                "num_explored_none": 1312,
                "num_inputs": 1,
                "num_kept_concrete": 3851,
                "num_kept_lambda": 684,
                "num_values_explored": 27756,
                "num_values_kept": 4535,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:even_or_positive',\n    inputs_dict={'x': [[6, -5, -1, -6, 0, -3, -4], [6, -5, -2, -6, 0, -3, -4], [6, -5, -2, -6, 0, 3, -4], [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11], [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]]},\n    outputs=[4, 5, 6, 3, 7],\n    solution='Count(lambda u1: IsEven(Min(u1, 0)), x)'\n)",
            "task_solution": "Count(lambda u1: IsEven(Min(u1, 0)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.1688215527683,
            "num_unique_values": 20034,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 87.99562122705574,
                "explored_percent_lambda": 5.467561196077273,
                "explored_percent_none": 6.536817576866997,
                "kept_percent_concrete": 89.2179384738314,
                "kept_percent_lambda": 10.782061526168597,
                "num_examples": 5,
                "num_explored_concrete": 193725,
                "num_explored_lambda": 12037,
                "num_explored_none": 14391,
                "num_inputs": 2,
                "num_kept_concrete": 17865,
                "num_kept_lambda": 2159,
                "num_values_explored": 220153,
                "num_values_kept": 20024,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='count:total_zeros',\n    inputs_dict={'x': [[-2, 0, 3, 1], [8, 4, 0, 1, 0, 2], [0, 1, 0], [17, 0, -2, 0, -11, -9, -6], [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]], 'y': [[0, 0, 1, -1], [0, 3, 0, 0, 5, 9], [6, 0, 6, 0, 0, 0, 5], [-11, 3, 0, -11, -15, 0, -15, -12], [0, -54, 0, 14, 35, 0, 0]]},\n    outputs=[3, 5, 6, 4, 11],\n    solution='Add(Count(lambda u1: Equal(u1, 0), x), Count(lambda u1: Equal(u1, 0), y))'\n)",
            "task_solution": "Add(Count(lambda u1: Equal(u1, 0), x), Count(lambda u1: Equal(u1, 0), y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.430906919762492,
            "num_unique_values": 425,
            "solution": "Take(Count(lambda u1: (lambda v1: Less(0, v1))(u1), r), Sort(c))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 40.803108808290155,
                "explored_percent_lambda": 51.424870466321245,
                "explored_percent_none": 7.772020725388601,
                "kept_percent_concrete": 43.13253012048193,
                "kept_percent_lambda": 56.86746987951807,
                "num_examples": 3,
                "num_explored_concrete": 315,
                "num_explored_lambda": 397,
                "num_explored_none": 60,
                "num_inputs": 2,
                "num_kept_concrete": 179,
                "num_kept_lambda": 236,
                "num_values_explored": 772,
                "num_values_kept": 415,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='count:min_costs',\n    inputs_dict={'r': [[4, 0, 7, 3, 0], [-5, 2, -1, 0, 5, 1, 3, -6], [1, 0, 3, 2, 0, 4, 0, 2, 3, 4]], 'c': [[6, 8, 2, 5, 9], [11, 25, 14, 7, 16, 5, 10, 18, 10], [61, 32, 44, 67, 17, 73, 25, 68, 95, 43]]},\n    outputs=[[2, 5, 6], [5, 7, 10, 10], [17, 25, 32, 43, 44, 61, 67]],\n    solution='Take(Count(lambda u1: Greater(u1, 0), r), Sort(c))'\n)",
            "task_solution": "Take(Count(lambda u1: Greater(u1, 0), r), Sort(c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0138690527529,
            "num_unique_values": 17519,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 93.4743271230265,
                "explored_percent_lambda": 2.4363186954559453,
                "explored_percent_none": 4.089354181517553,
                "kept_percent_concrete": 95.71077731452397,
                "kept_percent_lambda": 4.289222685476041,
                "num_examples": 5,
                "num_explored_concrete": 221608,
                "num_explored_lambda": 5776,
                "num_explored_none": 9695,
                "num_inputs": 2,
                "num_kept_concrete": 16758,
                "num_kept_lambda": 751,
                "num_values_explored": 237079,
                "num_values_kept": 17509,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_1',\n    inputs_dict={'w': [[6, 2, 4, 7, 9], [10, 30, 20], [8, 6, 5, 9], [7, 5, 1, 6, 2, 7], [14, 7, 2, 9, 3, 13, 10, 11]], 't': [[5, 3, 6, 1, 0], [65, 7, 32], [2, 5, 9, 1], [0, 9, 4, 5, 7, 2], [1, 4, 2, 11, 7, 5, 7, 4]]},\n    outputs=[27, 97, 28, 24, 44],\n    solution='Maximum(ZipWith(lambda u1, u2: Add(Multiply(u1, 3), u2), w, t))'\n)",
            "task_solution": "Maximum(ZipWith(lambda u1, u2: Add(Multiply(u1, 3), u2), w, t))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3786709997803,
            "num_unique_values": 18880,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 91.1551263855096,
                "explored_percent_lambda": 3.0248884833738847,
                "explored_percent_none": 5.819985131116518,
                "kept_percent_concrete": 96.36459989401166,
                "kept_percent_lambda": 3.6354001059883414,
                "num_examples": 5,
                "num_explored_concrete": 215797,
                "num_explored_lambda": 7161,
                "num_explored_none": 13778,
                "num_inputs": 2,
                "num_kept_concrete": 18184,
                "num_kept_lambda": 686,
                "num_values_explored": 236736,
                "num_values_kept": 18870,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_4',\n    inputs_dict={'x': [[7, 3, 8, 2, 5], [5, 6, 1], [3, 5, 1, 2], [7, 2, 1, 9, 3, 6], [4, 2, 6, 19, 5, 13, 2, 3]], 'y': [[2, 8, 9, 1, 3], [8, 2, 3], [4, 6, 1, 3], [5, 1, 6, 4, 7, 5], [2, 9, 3, 11, 1, 5, 16, 15]]},\n    outputs=[79, 35, 28, 101, 219],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), Sort(x), Reverse(Sort(y))))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), Sort(x), Reverse(Sort(y))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 1.69547388702631,
            "num_unique_values": 252,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Min(v1, v2))(u1, u2), a, Reverse(a))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 29.012345679012345,
                "explored_percent_lambda": 56.99588477366255,
                "explored_percent_none": 13.991769547325102,
                "kept_percent_concrete": 40.74074074074074,
                "kept_percent_lambda": 59.25925925925926,
                "num_examples": 3,
                "num_explored_concrete": 141,
                "num_explored_lambda": 277,
                "num_explored_none": 68,
                "num_inputs": 1,
                "num_kept_concrete": 99,
                "num_kept_lambda": 144,
                "num_values_explored": 486,
                "num_values_kept": 243,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='zipwith:deepcoder_5',\n    inputs_dict={'a': [[3, 7, 5, 2, 8], [14, 11, 15, 18, 14, 12], [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]]},\n    outputs=[[3, 2, 5, 2, 3], [12, 11, 15, 15, 11, 12], [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],\n    solution='ZipWith(lambda u1, u2: Min(u1, u2), a, Reverse(a))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Min(u1, u2), a, Reverse(a))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0114058721811,
            "num_unique_values": 19404,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 93.82899786780384,
                "explored_percent_lambda": 2.297228144989339,
                "explored_percent_none": 3.873773987206823,
                "kept_percent_concrete": 95.83891925337733,
                "kept_percent_lambda": 4.161080746622667,
                "num_examples": 5,
                "num_explored_concrete": 220029,
                "num_explored_lambda": 5387,
                "num_explored_none": 9084,
                "num_inputs": 2,
                "num_kept_concrete": 18587,
                "num_kept_lambda": 807,
                "num_values_explored": 234500,
                "num_values_kept": 19394,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_6',\n    inputs_dict={'t': [[4, 8, 11, 2], [46, 24, 68], [8, 22, 18, 6], [21, 26, 10, 11, 15], [11, 18, 15, 33, 18, 23, 7]], 'p': [[2, 3, 4, 1], [35, 37, 31], [26, 19, 21, 38], [3, 11, 22, 10, 9], [29, 23, 24, 7, 14, 12, 25]]},\n    outputs=[1, 59, 32, 19, 30],\n    solution='Subtract(Minimum(ZipWith(lambda u1, u2: Add(u1, u2), t, p)), 2)'\n)",
            "task_solution": "Subtract(Minimum(ZipWith(lambda u1, u2: Add(u1, u2), t, p)), 2)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3537462931126,
            "num_unique_values": 16063,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 93.8190549127564,
                "explored_percent_lambda": 3.83250884855008,
                "explored_percent_none": 2.348436238693519,
                "kept_percent_concrete": 93.21041484988164,
                "kept_percent_lambda": 6.78958515011835,
                "num_examples": 5,
                "num_explored_concrete": 226634,
                "num_explored_lambda": 9258,
                "num_explored_none": 5673,
                "num_inputs": 1,
                "num_kept_concrete": 14964,
                "num_kept_lambda": 1090,
                "num_values_explored": 241565,
                "num_values_kept": 16054,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:deepcoder_8',\n    inputs_dict={'s': [[1, 2, 4, 5, 7], [2, 4, 11, 26], [14, 36, 54, 89], [1, 7, 10, 11, 13, 18, 19], [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]]},\n    outputs=[9, 31, 93, 32, 37],\n    solution='Sum(ZipWith(lambda u1, u2: Max(Subtract(u1, u2), 0), Reverse(s), s))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Max(Subtract(u1, u2), 0), Reverse(s), s))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.2976021934301,
            "num_unique_values": 18585,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 91.76204760266965,
                "explored_percent_lambda": 2.5346876047593963,
                "explored_percent_none": 5.703264792570954,
                "kept_percent_concrete": 96.20995962314939,
                "kept_percent_lambda": 3.7900403768506057,
                "num_examples": 5,
                "num_explored_concrete": 210771,
                "num_explored_lambda": 5822,
                "num_explored_none": 13100,
                "num_inputs": 2,
                "num_kept_concrete": 17871,
                "num_kept_lambda": 704,
                "num_values_explored": 229693,
                "num_values_kept": 18575,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:dot',\n    inputs_dict={'x': [[2, 0], [3, 1, 2], [7, 8, 1, 4], [2, -4, 6, -5, -1, 3, 2], [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]], 'y': [[10, 5], [8, 2, -5], [1, 0, 4, 2], [3, 8, 4, 4, 2, 0, 5], [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]]},\n    outputs=[20, 16, 19, -14, 21],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, y))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3258095216006,
            "num_unique_values": 12960,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.62324323264794,
                "explored_percent_lambda": 23.53725228845287,
                "explored_percent_none": 3.8395044788991903,
                "kept_percent_concrete": 58.21621621621622,
                "kept_percent_lambda": 41.78378378378378,
                "num_examples": 3,
                "num_explored_concrete": 185251,
                "num_explored_lambda": 60040,
                "num_explored_none": 9794,
                "num_inputs": 2,
                "num_kept_concrete": 7539,
                "num_kept_lambda": 5411,
                "num_values_explored": 255085,
                "num_values_kept": 12950,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:average',\n    inputs_dict={'x': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]], 'y': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]]},\n    outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],\n    solution='ZipWith(lambda u1, u2: IntDivide(Add(u1, u2), 2), x, y)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: IntDivide(Add(u1, u2), 2), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3208133131266,
            "num_unique_values": 12194,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.63497919921691,
                "explored_percent_lambda": 18.61415959189052,
                "explored_percent_none": 4.75086120889257,
                "kept_percent_concrete": 59.3778215546253,
                "kept_percent_lambda": 40.6221784453747,
                "num_examples": 3,
                "num_explored_concrete": 203554,
                "num_explored_lambda": 49442,
                "num_explored_none": 12619,
                "num_inputs": 3,
                "num_kept_concrete": 7234,
                "num_kept_lambda": 4949,
                "num_values_explored": 265615,
                "num_values_kept": 12183,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:three_sum',\n    inputs_dict={'a': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]], 'b': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]], 'c': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]]},\n    outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],\n    solution='ZipWith(lambda u1, u2: Add(u1, u2), a, ZipWith(lambda u1, u2: Add(u1, u2), b, c))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Add(u1, u2), a, ZipWith(lambda u1, u2: Add(u1, u2), b, c))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3347054049373,
            "num_unique_values": 13398,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.93794845438863,
                "explored_percent_lambda": 22.27122601105175,
                "explored_percent_none": 2.790825534559623,
                "kept_percent_concrete": 60.16582013743651,
                "kept_percent_lambda": 39.83417986256349,
                "num_examples": 3,
                "num_explored_concrete": 188095,
                "num_explored_lambda": 55901,
                "num_explored_none": 7005,
                "num_inputs": 2,
                "num_kept_concrete": 8055,
                "num_kept_lambda": 5333,
                "num_values_explored": 251001,
                "num_values_kept": 13388,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sort_divide',\n    inputs_dict={'m': [[43, 68, 27], [28, 41, 57, 52], [78, 68, 25, 76, 67, 38, 49, 74, 47]], 'n': [[5, 7, 13], [6, 2, 6, 4], [10, 4, 19, 12, 19, 7, 7, 15, 3]]},\n    outputs=[[2, 8, 9], [4, 9, 13, 20], [1, 3, 4, 5, 6, 7, 7, 15, 17]],\n    solution='Sort(ZipWith(lambda u1, u2: IntDivide(u1, u2), m, n))'\n)",
            "task_solution": "Sort(ZipWith(lambda u1, u2: IntDivide(u1, u2), m, n))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 210.33580960147083,
            "num_unique_values": 7557,
            "solution": "ZipWith(lambda u1, u2: (lambda v1, v2: Subtract(v2, v1))(u1, u2), Take(-1, x), Drop(1, x))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 69.51000646925019,
                "explored_percent_lambda": 24.854441870656732,
                "explored_percent_none": 5.635551660093074,
                "kept_percent_concrete": 51.0731319554849,
                "kept_percent_lambda": 48.9268680445151,
                "num_examples": 3,
                "num_explored_concrete": 66617,
                "num_explored_lambda": 23820,
                "num_explored_none": 5401,
                "num_inputs": 1,
                "num_kept_concrete": 3855,
                "num_kept_lambda": 3693,
                "num_values_explored": 95838,
                "num_values_kept": 7548,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='zipwith:pair_differences',\n    inputs_dict={'x': [[16, 43, 64], [34, 13, 23, 58, 46], [9, 49, -27, -37, 26, -38, 9, -12, 19]]},\n    outputs=[[27, 21], [-21, 10, 35, -12], [40, -76, -10, 63, -64, 47, -21, 31]],\n    solution='ZipWith(lambda u1, u2: Subtract(u2, u1), x, Drop(1, x))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Subtract(u2, u1), x, Drop(1, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.2138958312571,
            "num_unique_values": 18981,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 89.08623814926385,
                "explored_percent_lambda": 4.085216627761912,
                "explored_percent_none": 6.828545222974236,
                "kept_percent_concrete": 93.44789415423541,
                "kept_percent_lambda": 6.552105845764588,
                "num_examples": 5,
                "num_explored_concrete": 204942,
                "num_explored_lambda": 9398,
                "num_explored_none": 15709,
                "num_inputs": 2,
                "num_kept_concrete": 17728,
                "num_kept_lambda": 1243,
                "num_values_explored": 230049,
                "num_values_kept": 18971,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sum_mask',\n    inputs_dict={'x': [[6, 11, 2, 7], [4, 5, 9, 0, 7, 9], [3, 13, 17, 5, 0, 14, 18], [2, -12, -5, 9, -13, -2, -9, 5], [-38, 34, 20, 32, 10, -10, 4, -1, -27]], 'm': [[1, 0, 1, 1], [0, 1, 1, 0, 1, 0], [0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 1, 0, 0]]},\n    outputs=[15, 21, 31, -20, -12],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, m))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, m))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3468764070421,
            "num_unique_values": 14250,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.84284027523309,
                "explored_percent_lambda": 26.262367167460607,
                "explored_percent_none": 3.8947925573062987,
                "kept_percent_concrete": 57.15589887640449,
                "kept_percent_lambda": 42.84410112359551,
                "num_examples": 3,
                "num_explored_concrete": 171541,
                "num_explored_lambda": 64503,
                "num_explored_none": 9566,
                "num_inputs": 2,
                "num_kept_concrete": 8139,
                "num_kept_lambda": 6101,
                "num_values_explored": 245610,
                "num_values_kept": 14240,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:distance',\n    inputs_dict={'x': [[2, 6, 1, 7, 4], [-6, 3, 15, -4, 11, -1, 7, -9], [15, 62, 47, 23, 50, 13, 52, 28, 58]], 'y': [[4, 1, 5, 4, 8], [3, 6, -2, 0, -8, -3, 4, 2], [63, 44, 78, 65, 13, 31, 23, 22, 68]]},\n    outputs=[[2, 5, 4, 3, 4], [9, 3, 17, 4, 19, 2, 3, 11], [48, 18, 31, 42, 37, 18, 29, 6, 10]],\n    solution='ZipWith(lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1)), x, y)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Max(Subtract(u1, u2), Subtract(u2, u1)), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3719558846205,
            "num_unique_values": 16756,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 87.19995391818833,
                "explored_percent_lambda": 2.7381647918501026,
                "explored_percent_none": 10.06188128996157,
                "kept_percent_concrete": 96.84103666547234,
                "kept_percent_lambda": 3.158963334527648,
                "num_examples": 5,
                "num_explored_concrete": 211936,
                "num_explored_lambda": 6655,
                "num_explored_none": 24455,
                "num_inputs": 2,
                "num_kept_concrete": 16217,
                "num_kept_lambda": 529,
                "num_values_explored": 243046,
                "num_values_kept": 16746,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:squared_distance',\n    inputs_dict={'x': [[26], [6, 14], [8, 5, 7], [-3, -2, 9, 4], [-6, 2, -5, 4, -2]], 'y': [[35], [9, 8], [6, 9, 8], [-5, 1, 6, -2], [-1, -2, 1, 4, 7]]},\n    outputs=[81, 45, 21, 58, 158],\n    solution='Sum(ZipWith(lambda u1, u2: Square(Subtract(u1, u2)), x, y))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Square(Subtract(u1, u2)), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.2978872004896,
            "num_unique_values": 14174,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 69.03879672602167,
                "explored_percent_lambda": 22.75141694370728,
                "explored_percent_none": 8.20978633027105,
                "kept_percent_concrete": 51.5249929398475,
                "kept_percent_lambda": 48.4750070601525,
                "num_examples": 3,
                "num_explored_concrete": 166757,
                "num_explored_lambda": 54954,
                "num_explored_none": 19830,
                "num_inputs": 2,
                "num_kept_concrete": 7298,
                "num_kept_lambda": 6866,
                "num_values_explored": 241541,
                "num_values_kept": 14164,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:is_equal',\n    inputs_dict={'x': [[5, 2, 7, 3, 5], [0, -2, 6, 4, 5, -4], [-2, -3, 2, 9, 4, -1, 4, 7, 5]], 'y': [[5, 1, 7, 3, 6], [0, -2, 0, -4, 5, -4], [5, -2, 2, 9, 3, -1, -2, 7, 7]]},\n    outputs=[[1, 0, 1, 1, 0], [1, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 1, 0]],\n    solution='ZipWith(lambda u1, u2: If(Equal(u1, u2), 1, 0), x, y)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: If(Equal(u1, u2), 1, 0), x, y)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3634125236422,
            "num_unique_values": 12902,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.56992058099856,
                "explored_percent_lambda": 18.380758261457025,
                "explored_percent_none": 3.0493211575444215,
                "kept_percent_concrete": 63.744958113558795,
                "kept_percent_lambda": 36.255041886441205,
                "num_examples": 3,
                "num_explored_concrete": 204688,
                "num_explored_lambda": 47885,
                "num_explored_none": 7944,
                "num_inputs": 2,
                "num_kept_concrete": 8218,
                "num_kept_lambda": 4674,
                "num_values_explored": 260517,
                "num_values_kept": 12892,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:sorted_min',\n    inputs_dict={'x': [[7, 2, 5, 6], [4, -7, -6, 7, 1, -6], [12, 20, 27, 19, 19, 29, 23, 7, 1]], 'y': [[4, 8, 1, 9], [-8, 2, -6, 0, 9, -1], [26, 18, 25, 0, 9, 28, 19, 22, 17]]},\n    outputs=[[1, 4, 6, 7], [-8, -6, -6, 0, 2, 7], [0, 7, 12, 18, 19, 20, 23, 26, 28]],\n    solution='ZipWith(lambda u1, u2: Min(u1, u2), Sort(x), Sort(y))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Min(u1, u2), Sort(x), Sort(y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3248801250011,
            "num_unique_values": 12347,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.42448012120323,
                "explored_percent_lambda": 22.78343881598775,
                "explored_percent_none": 3.7920810628090154,
                "kept_percent_concrete": 56.27330199384017,
                "kept_percent_lambda": 43.72669800615983,
                "num_examples": 3,
                "num_explored_concrete": 180285,
                "num_explored_lambda": 55942,
                "num_explored_none": 9311,
                "num_inputs": 1,
                "num_kept_concrete": 6943,
                "num_kept_lambda": 5395,
                "num_values_explored": 245538,
                "num_values_kept": 12338,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:add_outer_triples',\n    inputs_dict={'x': [[3, 2, 6, 8, 1], [4, 3, 7, 6, 2, 5], [-4, 16, -12, -5, 7, 0, -2, -5, -3, -7]]},\n    outputs=[[9, 10, 7], [10, 5, 12], [-9, 13, -19]],\n    solution='ZipWith(lambda u1, u2: Add(u1, u2), x, Reverse(Take(3, Reverse(x))))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Add(u1, u2), x, Reverse(Take(3, Reverse(x))))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3274796213955,
            "num_unique_values": 19331,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 92.76888743740474,
                "explored_percent_lambda": 2.5623231003701283,
                "explored_percent_none": 4.668789462225125,
                "kept_percent_concrete": 96.21157230100404,
                "kept_percent_lambda": 3.7884276989959633,
                "num_examples": 5,
                "num_explored_concrete": 204522,
                "num_explored_lambda": 5649,
                "num_explored_none": 10293,
                "num_inputs": 1,
                "num_kept_concrete": 18590,
                "num_kept_lambda": 732,
                "num_values_explored": 220464,
                "num_values_kept": 19322,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:max_mirror_product',\n    inputs_dict={'x': [[3, 9, 4, 2, 5], [2, 3, 1, 8, 3, 5], [-4, 5, -3, 5, -7, 3, -3], [-4, 5, -3, 5, -7, 3, -3, 4], [1, 0, 3, 1, 2, 4, 0, 4, 2, 1]]},\n    outputs=[18, 10, 25, -9, 12],\n    solution='Maximum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, Reverse(x)))'\n)",
            "task_solution": "Maximum(ZipWith(lambda u1, u2: Multiply(u1, u2), x, Reverse(x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3515942487866,
            "num_unique_values": 13150,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.73255715375703,
                "explored_percent_lambda": 25.640570185176962,
                "explored_percent_none": 2.6268726610660087,
                "kept_percent_concrete": 54.010654490106546,
                "kept_percent_lambda": 45.989345509893454,
                "num_examples": 3,
                "num_explored_concrete": 177688,
                "num_explored_lambda": 63514,
                "num_explored_none": 6507,
                "num_inputs": 2,
                "num_kept_concrete": 7097,
                "num_kept_lambda": 6043,
                "num_values_explored": 247709,
                "num_values_kept": 13140,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='zipwith:double_or_nothing',\n    inputs_dict={'p': [[5, 6, 8, 2, 6], [10, 15, 30, 20, 25, 40, 5], [22, 53, 31, 47, 27, 24, 14, 39, 42, 13]], 'w': [[1, 1, -1, 1, -1], [-1, 1, -1, -1, 1, -1, 1], [1, -1, -1, 1, -1, 1, 1, -1, -1, 1]]},\n    outputs=[[10, 12, 0, 4, 0], [0, 30, 0, 0, 50, 0, 10], [44, 0, 0, 94, 0, 48, 28, 0, 0, 26]],\n    solution='ZipWith(lambda u1, u2: Multiply(u1, Add(1, u2)), p, w)'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Multiply(u1, Add(1, u2)), p, w)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3638588599861,
            "num_unique_values": 17791,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 93.95773717807616,
                "explored_percent_lambda": 3.530706581554039,
                "explored_percent_none": 2.5115562403697997,
                "kept_percent_concrete": 92.08750421774829,
                "kept_percent_lambda": 7.912495782251715,
                "num_examples": 5,
                "num_explored_concrete": 213425,
                "num_explored_lambda": 8020,
                "num_explored_none": 5705,
                "num_inputs": 1,
                "num_kept_concrete": 16375,
                "num_kept_lambda": 1407,
                "num_values_explored": 227150,
                "num_values_kept": 17782,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:deepcoder_3',\n    inputs_dict={'h': [[8, 5, 7, 2, 5], [8, 5, 7, 1, 5], [6, 4, 8, 2, 7, 3], [6, 7, 8, 6, 7, 5, 2, 5, 7, 4], [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]]},\n    outputs=[5, 6, 10, 14, 13],\n    solution='Subtract(Sum(h), Sum(Scanl1(lambda u1, u2: Min(u1, u2), h)))'\n)",
            "task_solution": "Subtract(Sum(h), Sum(Scanl1(lambda u1, u2: Min(u1, u2), h)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3403433784842,
            "num_unique_values": 13051,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.08234927142284,
                "explored_percent_lambda": 23.56725312030334,
                "explored_percent_none": 4.350397608273817,
                "kept_percent_concrete": 53.220364974697134,
                "kept_percent_lambda": 46.779635025302866,
                "num_examples": 3,
                "num_explored_concrete": 177936,
                "num_explored_lambda": 58176,
                "num_explored_none": 10739,
                "num_inputs": 1,
                "num_kept_concrete": 6941,
                "num_kept_lambda": 6101,
                "num_values_explored": 246851,
                "num_values_kept": 13042,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_max',\n    inputs_dict={'x': [[1, 6, 3, 20], [4, 2, 6, 3, 1, 7, 3, 9], [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]]},\n    outputs=[[1, 6, 6, 20], [4, 4, 6, 6, 6, 7, 7, 9], [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],\n    solution='Scanl1(lambda u1, u2: Max(u1, u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Max(u1, u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 13.552491707727313,
            "num_unique_values": 1997,
            "solution": "Maximum(Map(lambda u1: (lambda v1: Sum((lambda v1: Take(v1, x))(v1)))(u1), Sort(Take(-1, x))))",
            "solution_weight": 12,
            "stats": {
                "explored_percent_concrete": 86.80777422790203,
                "explored_percent_lambda": 11.408413205537807,
                "explored_percent_none": 1.7838125665601703,
                "kept_percent_concrete": 81.18712273641852,
                "kept_percent_lambda": 18.812877263581488,
                "num_examples": 5,
                "num_explored_concrete": 6521,
                "num_explored_lambda": 857,
                "num_explored_none": 134,
                "num_inputs": 1,
                "num_kept_concrete": 1614,
                "num_kept_lambda": 374,
                "num_values_explored": 7512,
                "num_values_kept": 1988,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='scanl1:max_running_sum',\n    inputs_dict={'x': [[5, 4, -1, 2, -5], [4, 7, -2, -5, 6, -3, 4], [-3, -1, 8, 2, -1, -5, 4, 1], [4, -2, 3, -5, -1, 2, -4, 7, -3, 2], [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]]},\n    outputs=[10, 11, 6, 5, 14],\n    solution='Maximum(Scanl1(lambda u1, u2: Add(u1, u2), x))'\n)",
            "task_solution": "Maximum(Scanl1(lambda u1, u2: Add(u1, u2), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 3.1546556316316128,
            "num_unique_values": 549,
            "solution": "Scanl1(lambda u1, u2: (lambda v1, v2: Add(v1, v2))(u2, u1), Reverse(x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 43.17817014446228,
                "explored_percent_lambda": 44.62279293739968,
                "explored_percent_none": 12.199036918138042,
                "kept_percent_concrete": 44.074074074074076,
                "kept_percent_lambda": 55.925925925925924,
                "num_examples": 3,
                "num_explored_concrete": 538,
                "num_explored_lambda": 556,
                "num_explored_none": 152,
                "num_inputs": 1,
                "num_kept_concrete": 238,
                "num_kept_lambda": 302,
                "num_values_explored": 1246,
                "num_values_kept": 540,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='scanl1:running_sum_reverse',\n    inputs_dict={'x': [[7, 4, 5], [3, 1, 6, 8, 2], [-4, 13, 9, 0, -3, -8, 5, 2]]},\n    outputs=[[5, 9, 16], [2, 10, 16, 17, 20], [2, 7, -1, -4, -4, 5, 18, 14]],\n    solution='Scanl1(lambda u1, u2: Add(u1, u2), Reverse(x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(u1, u2), Reverse(x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0211727116257,
            "num_unique_values": 14883,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 70.81173063301325,
                "explored_percent_lambda": 23.834711575135483,
                "explored_percent_none": 5.353557791851259,
                "kept_percent_concrete": 57.05257496302272,
                "kept_percent_lambda": 42.94742503697728,
                "num_examples": 3,
                "num_explored_concrete": 168949,
                "num_explored_lambda": 56867,
                "num_explored_none": 12773,
                "num_inputs": 1,
                "num_kept_concrete": 8486,
                "num_kept_lambda": 6388,
                "num_values_explored": 238589,
                "num_values_kept": 14874,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_restart',\n    inputs_dict={'x': [[3, 5, 0, 4, 2], [6, 0, 4, 7, 3, 0, 1, 0, 4, 5], [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]]},\n    outputs=[[3, 8, 0, 4, 6], [6, 0, 4, 11, 14, 0, 1, 0, 4, 9], [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],\n    solution='Scanl1(lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2)), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2)), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3690403942019,
            "num_unique_values": 14984,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 76.69510821369508,
                "explored_percent_lambda": 18.160646805518937,
                "explored_percent_none": 5.144244980785977,
                "kept_percent_concrete": 66.24816348337117,
                "kept_percent_lambda": 33.75183651662882,
                "num_examples": 3,
                "num_explored_concrete": 191997,
                "num_explored_lambda": 45463,
                "num_explored_none": 12878,
                "num_inputs": 2,
                "num_kept_concrete": 9920,
                "num_kept_lambda": 5054,
                "num_values_explored": 250338,
                "num_values_kept": 14974,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_sum_extra',\n    inputs_dict={'x': [[3, 2, 6, 4], [-6, 4, -2, 3, 8, -3, -9], [12, -21, 15, 7, -5, 10, 11, -5, -28, 8]], 'n': [1, 3, -2]},\n    outputs=[[3, 6, 13, 18], [-6, 1, 2, 8, 19, 19, 13], [12, -11, 2, 7, 0, 8, 17, 10, -20, -14]],\n    solution='Scanl1(lambda u1, u2: Add(Add(u1, u2), n), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(Add(u1, u2), n), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3508111629635,
            "num_unique_values": 12944,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.16528406595437,
                "explored_percent_lambda": 24.603998801426794,
                "explored_percent_none": 4.2307171326188415,
                "kept_percent_concrete": 51.03981445689988,
                "kept_percent_lambda": 48.96018554310012,
                "num_examples": 3,
                "num_explored_concrete": 173375,
                "num_explored_lambda": 59941,
                "num_explored_none": 10307,
                "num_inputs": 1,
                "num_kept_concrete": 6602,
                "num_kept_lambda": 6333,
                "num_values_explored": 243623,
                "num_values_kept": 12935,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:decay',\n    inputs_dict={'x': [[7, 2, 6, 1, 5], [10, 14, 8, 3, 12, 6, 2, 7], [15, 12, 27, 39, 12, 11, 25, 0, 0, 3]]},\n    outputs=[[7, 5, 8, 5, 7], [10, 19, 17, 11, 17, 14, 9, 11], [15, 19, 36, 57, 40, 31, 40, 20, 10, 8]],\n    solution='Scanl1(lambda u1, u2: Add(IntDivide(u1, 2), u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(IntDivide(u1, 2), u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3266921732575,
            "num_unique_values": 12014,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.42172839506173,
                "explored_percent_lambda": 23.107555555555557,
                "explored_percent_none": 2.470716049382716,
                "kept_percent_concrete": 55.63978673775408,
                "kept_percent_lambda": 44.36021326224592,
                "num_examples": 3,
                "num_explored_concrete": 188380,
                "num_explored_lambda": 58491,
                "num_explored_none": 6254,
                "num_inputs": 2,
                "num_kept_concrete": 6679,
                "num_kept_lambda": 5325,
                "num_values_explored": 253125,
                "num_values_kept": 12004,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:prefix_running_product',\n    inputs_dict={'x': [[2, 1, 5, 2, 3, 1, 2], [1, 3, 2, 1, 4, 1, 5], [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]], 'n': [4, 5, 8]},\n    outputs=[[2, 2, 10, 20], [1, 3, 6, 6, 24], [5, -5, 10, 10, -30, -60, 60, -180]],\n    solution='Scanl1(lambda u1, u2: Multiply(u1, u2), Take(n, x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Multiply(u1, u2), Take(n, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 29.26312029361725,
            "num_unique_values": 2873,
            "solution": "Last(Scanl1(lambda u1, u2: (lambda v1, v2: Multiply(v1, v2))(u1, u2), Sort(x)))",
            "solution_weight": 9,
            "stats": {
                "explored_percent_concrete": 88.85511651469098,
                "explored_percent_lambda": 7.807750759878419,
                "explored_percent_none": 3.337132725430598,
                "kept_percent_concrete": 90.18854748603351,
                "kept_percent_lambda": 9.811452513966481,
                "num_examples": 5,
                "num_explored_concrete": 14032,
                "num_explored_lambda": 1233,
                "num_explored_none": 527,
                "num_inputs": 1,
                "num_kept_concrete": 2583,
                "num_kept_lambda": 281,
                "num_values_explored": 15792,
                "num_values_kept": 2864,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='scanl1:product',\n    inputs_dict={'x': [[3, 6, 5], [2, 1, 4, 2, 3], [3, 4, 1, 5, 2], [5, -2, 1, -1, -3, 1, 2], [-2, 1, 2, 2, -3, -1, 3, -1]]},\n    outputs=[90, 48, 120, -60, 72],\n    solution='Last(Scanl1(lambda u1, u2: Multiply(u1, u2), x))'\n)",
            "task_solution": "Last(Scanl1(lambda u1, u2: Multiply(u1, u2), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0667593497783,
            "num_unique_values": 10964,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 73.68196933272944,
                "explored_percent_lambda": 22.91373910754449,
                "explored_percent_none": 3.404291559726077,
                "kept_percent_concrete": 43.01232314011867,
                "kept_percent_lambda": 56.98767685988133,
                "num_examples": 3,
                "num_explored_concrete": 190336,
                "num_explored_lambda": 59191,
                "num_explored_none": 8794,
                "num_inputs": 1,
                "num_kept_concrete": 4712,
                "num_kept_lambda": 6243,
                "num_values_explored": 258321,
                "num_values_kept": 10955,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:running_min_no_ends',\n    inputs_dict={'x': [[4, 7, 5, 6, 3, 8, 2], [8, 6, 7, 5, 4, 5, 2, 5], [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]]},\n    outputs=[[7, 5, 5, 3, 3], [6, 6, 5, 4, 4, 2], [57, 45, 45, 43, -28, -28, -30, -43]],\n    solution='Scanl1(lambda u1, u2: Min(u1, u2), Take(-1, Drop(1, x)))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Min(u1, u2), Take(-1, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.2963258381933,
            "num_unique_values": 13232,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.76932976046002,
                "explored_percent_lambda": 22.271272306702397,
                "explored_percent_none": 4.959397932837583,
                "kept_percent_concrete": 58.383120320653404,
                "kept_percent_lambda": 41.616879679346596,
                "num_examples": 3,
                "num_explored_concrete": 178688,
                "num_explored_lambda": 54688,
                "num_explored_none": 12178,
                "num_inputs": 1,
                "num_kept_concrete": 7720,
                "num_kept_lambda": 5503,
                "num_values_explored": 245554,
                "num_values_kept": 13223,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:alternate_signs',\n    inputs_dict={'x': [[3, 1, 5, 7, 3, 4], [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3], [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]]},\n    outputs=[[3, -1, 5, -7, 3, -4], [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3], [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],\n    solution='Scanl1(lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3777368068695,
            "num_unique_values": 13594,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 62.97208053237848,
                "explored_percent_lambda": 32.533020301996416,
                "explored_percent_none": 4.494899165625106,
                "kept_percent_concrete": 44.7258005152742,
                "kept_percent_lambda": 55.2741994847258,
                "num_examples": 3,
                "num_explored_concrete": 149133,
                "num_explored_lambda": 77046,
                "num_explored_none": 10645,
                "num_inputs": 1,
                "num_kept_concrete": 6076,
                "num_kept_lambda": 7509,
                "num_values_explored": 236824,
                "num_values_kept": 13585,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:follow_cycle',\n    inputs_dict={'x': [[4, 0, 2, 3, 1], [3, 5, 0, 1, 6, 4, 2], [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]]},\n    outputs=[[4, 1, 0, 4, 1], [3, 1, 5, 4, 6, 2, 0], [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],\n    solution='Scanl1(lambda u1, u2: Access(u1, x), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Access(u1, x), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3608139473945,
            "num_unique_values": 13051,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 78.36458711827991,
                "explored_percent_lambda": 16.67996334855211,
                "explored_percent_none": 4.955449533167981,
                "kept_percent_concrete": 60.45851863211164,
                "kept_percent_lambda": 39.54148136788836,
                "num_examples": 3,
                "num_explored_concrete": 198416,
                "num_explored_lambda": 42233,
                "num_explored_none": 12547,
                "num_inputs": 1,
                "num_kept_concrete": 7885,
                "num_kept_lambda": 5157,
                "num_values_explored": 253196,
                "num_values_kept": 13042,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:make_strictly_increasing',\n    inputs_dict={'x': [[2, 4, 3, 7, 8, 8], [-5, -8, -5, 1, -4, 5, 5, 7], [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]]},\n    outputs=[[2, 4, 5, 7, 8, 9], [-5, -4, -3, 1, 2, 5, 6, 7], [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],\n    solution='Scanl1(lambda u1, u2: Max(Add(u1, 1), u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Max(Add(u1, 1), u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.326894832775,
            "num_unique_values": 14351,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 68.28653130078791,
                "explored_percent_lambda": 25.750375444876465,
                "explored_percent_none": 5.963093254335617,
                "kept_percent_concrete": 54.46939060103193,
                "kept_percent_lambda": 45.53060939896807,
                "num_examples": 3,
                "num_explored_concrete": 165967,
                "num_explored_lambda": 62585,
                "num_explored_none": 14493,
                "num_inputs": 1,
                "num_kept_concrete": 7812,
                "num_kept_lambda": 6530,
                "num_values_explored": 243045,
                "num_values_kept": 14342,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='scanl1:closest_to_zero',\n    inputs_dict={'x': [[7, -5, 6, 4, -7, -2, -1], [-6, 5, 8, -4, -6, 5, 3, 0, -6], [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]]},\n    outputs=[[7, -5, -5, 4, 4, -2, -1], [-6, 5, 5, -4, -4, -4, 3, 0, 0], [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],\n    solution='Scanl1(lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2), x)'\n)",
            "task_solution": "Scanl1(lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2), x)",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.429555810988,
            "num_unique_values": 17981,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 90.15901067576351,
                "explored_percent_lambda": 5.414349619572374,
                "explored_percent_none": 4.426639704664115,
                "kept_percent_concrete": 86.75087641199711,
                "kept_percent_lambda": 13.249123588002893,
                "num_examples": 5,
                "num_explored_concrete": 212228,
                "num_explored_lambda": 12745,
                "num_explored_none": 10420,
                "num_inputs": 2,
                "num_kept_concrete": 15590,
                "num_kept_lambda": 2381,
                "num_values_explored": 235393,
                "num_values_kept": 17971,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_2',\n    inputs_dict={'a': [[6, 2, 4, 7, 9], [7, 2, 4, 5, 7, 8, 4, 3], [7, 2, 4, 5, 7, 8, 4, 3], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27], [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]], 'b': [[5, 3, 2, 1, 0], [8, 1, 4, 5, 3, 5, 1, 2], [8, 1, 4, 4, 3, 5, 1, 2], [10, 28, 47, 78, 37, 38, 62, 17, 44, 23], [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]]},\n    outputs=[4, 5, 6, 8, 5],\n    solution='Count(lambda u1: Greater(u1, 0), ZipWith(lambda u1, u2: Subtract(u1, u2), a, b))'\n)",
            "task_solution": "Count(lambda u1: Greater(u1, 0), ZipWith(lambda u1, u2: Subtract(u1, u2), a, b))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3954370412976,
            "num_unique_values": 17942,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 90.88597741800383,
                "explored_percent_lambda": 3.626318305461899,
                "explored_percent_none": 5.487704276534268,
                "kept_percent_concrete": 95.51081864822663,
                "kept_percent_lambda": 4.489181351773366,
                "num_examples": 5,
                "num_explored_concrete": 214839,
                "num_explored_lambda": 8572,
                "num_explored_none": 12972,
                "num_inputs": 2,
                "num_kept_concrete": 17127,
                "num_kept_lambda": 805,
                "num_values_explored": 236383,
                "num_values_kept": 17932,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:deepcoder_7',\n    inputs_dict={'s': [[4, 7, 2, 3], [5, 2, 1, 4], [3, 5, 6, 1, 4], [8, 4, 3, 2, 2, 4, 3], [6, 3, 5, 5, 1, 3, 4, 1, 2]], 'p': [[2, 1, 3, 1], [1, 3, 2, 4], [1, 1, 3, 2, 5], [2, 1, 1, 3, 1, 2, 3], [1, 2, 1, 1, 3, 1, 1, 2, 1]]},\n    outputs=[62, 59, 98, 149, 173],\n    solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), s, Scanl1(lambda u1, u2: Add(u1, u2), p)))'\n)",
            "task_solution": "Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), s, Scanl1(lambda u1, u2: Add(u1, u2), p)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 2.270973091945052,
            "num_unique_values": 250,
            "solution": "Scanl1(lambda u1, u2: (lambda v1: Subtract(v1, -1))(u1), Map(lambda u1: 0, x))",
            "solution_weight": 8,
            "stats": {
                "explored_percent_concrete": 25.608011444921317,
                "explored_percent_lambda": 51.93133047210301,
                "explored_percent_none": 22.46065808297568,
                "kept_percent_concrete": 42.738589211618255,
                "kept_percent_lambda": 57.261410788381745,
                "num_examples": 3,
                "num_explored_concrete": 179,
                "num_explored_lambda": 363,
                "num_explored_none": 157,
                "num_inputs": 1,
                "num_kept_concrete": 103,
                "num_kept_lambda": 138,
                "num_values_explored": 699,
                "num_values_kept": 241,
                "temperature": 1.0
            },
            "success": true,
            "task": "Task(\n    name='multi:range_like',\n    inputs_dict={'x': [[3, 6, 2], [-6, -3, 6, 1, 0, 2, -1], [0, 0, 0, 0, 0, 0, 0, 0, 0]]},\n    outputs=[[0, 1, 2], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7, 8]],\n    solution='Scanl1(lambda u1, u2: Add(u1, 1), Map(lambda u1: 0, x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(u1, 1), Map(lambda u1: 0, x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.0111899748445,
            "num_unique_values": 17044,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 71.94880591107007,
                "explored_percent_lambda": 22.22975463053537,
                "explored_percent_none": 5.821439458394566,
                "kept_percent_concrete": 65.35368359260346,
                "kept_percent_lambda": 34.64631640739653,
                "num_examples": 3,
                "num_explored_concrete": 158137,
                "num_explored_lambda": 48859,
                "num_explored_none": 12795,
                "num_inputs": 1,
                "num_kept_concrete": 11133,
                "num_kept_lambda": 5902,
                "num_values_explored": 219791,
                "num_values_kept": 17035,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:find_odd_products',\n    inputs_dict={'x': [[4, 5, 7, 3, 8], [6, -1, 9, 4, -3, 11, 7, -7, 8], [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]]},\n    outputs=[[35, 21], [-9, -33, 77, -49], [55, 91, 39, 15, 35]],\n    solution='Filter(lambda u1: IsOdd(u1), ZipWith(lambda u1, u2: Multiply(u2, u1), x, Drop(1, x)))'\n)",
            "task_solution": "Filter(lambda u1: IsOdd(u1), ZipWith(lambda u1, u2: Multiply(u2, u1), x, Drop(1, x)))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3977935481817,
            "num_unique_values": 14761,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 77.51086979575389,
                "explored_percent_lambda": 19.13635495980827,
                "explored_percent_none": 3.352775244437846,
                "kept_percent_concrete": 61.62554229934924,
                "kept_percent_lambda": 38.37445770065076,
                "num_examples": 3,
                "num_explored_concrete": 182728,
                "num_explored_lambda": 45113,
                "num_explored_none": 7904,
                "num_inputs": 1,
                "num_kept_concrete": 9091,
                "num_kept_lambda": 5661,
                "num_values_explored": 235745,
                "num_values_kept": 14752,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:multiply_odds',\n    inputs_dict={'x': [[3, 5, 8, 2, 1], [5, 2, 1, 3, 3, 1, 4], [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]]},\n    outputs=[[3, 15, 15], [5, 5, 15, 45, 45], [3, -3, 9, 81, -81]],\n    solution='Scanl1(lambda u1, u2: Multiply(u1, u2), Filter(lambda u1: IsOdd(u1), x))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Multiply(u1, u2), Filter(lambda u1: IsOdd(u1), x))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3734710663557,
            "num_unique_values": 13831,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.68168156446387,
                "explored_percent_lambda": 21.30762324837035,
                "explored_percent_none": 4.010695187165775,
                "kept_percent_concrete": 62.8174517039288,
                "kept_percent_lambda": 37.1825482960712,
                "num_examples": 3,
                "num_explored_concrete": 191327,
                "num_explored_lambda": 54588,
                "num_explored_none": 10275,
                "num_inputs": 2,
                "num_kept_concrete": 8682,
                "num_kept_lambda": 5139,
                "num_values_explored": 256190,
                "num_values_kept": 13821,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:running_total',\n    inputs_dict={'x': [[8, 4, 2, 7], [9, -3, 7, 0, 2, -2, 5, -1, 5], [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]], 'y': [[2, 5, 3, 1], [8, 0, 4, -3, 7, 0, -4, -6, 1], [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]]},\n    outputs=[[10, 19, 24, 32], [17, 14, 25, 22, 31, 29, 30, 23, 29], [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],\n    solution='Scanl1(lambda u1, u2: Add(u1, u2), ZipWith(lambda u1, u2: Add(u1, u2), x, y))'\n)",
            "task_solution": "Scanl1(lambda u1, u2: Add(u1, u2), ZipWith(lambda u1, u2: Add(u1, u2), x, y))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3243907187134,
            "num_unique_values": 12639,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 74.99980665568471,
                "explored_percent_lambda": 20.86881201518913,
                "explored_percent_none": 4.131381329126161,
                "kept_percent_concrete": 62.55939182768451,
                "kept_percent_lambda": 37.44060817231549,
                "num_examples": 3,
                "num_explored_concrete": 193954,
                "num_explored_lambda": 53968,
                "num_explored_none": 10684,
                "num_inputs": 3,
                "num_kept_concrete": 7900,
                "num_kept_lambda": 4728,
                "num_values_explored": 258606,
                "num_values_kept": 12628,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:add_from_index',\n    inputs_dict={'x': [[3, 6, 7], [11, 23, 8, 15, 4], [-5, 7, 23, -4, 0, -12, 3, 2, -8]], 'y': [[8, 5, 3, 10, 4], [-5, 0, 5], [-20, 14, 8, -4, 22, 0]], 'i': [[0, 3, 1], [2, 0, 2, 0, 1], [1, 4, 5, 2, 3, 3, 0, 1, 4]]},\n    outputs=[[11, 16, 12], [16, 18, 13, 10, 4], [9, 29, 23, 4, -4, -16, -17, 16, 14]],\n    solution='ZipWith(lambda u1, u2: Add(u1, u2), x, Map(lambda u1: Access(u1, y), i))'\n)",
            "task_solution": "ZipWith(lambda u1, u2: Add(u1, u2), x, Map(lambda u1: Access(u1, y), i))",
            "task_solution_weight": null
        },
        {
            "elapsed_time": 600.3032372482121,
            "num_unique_values": 16475,
            "solution": null,
            "solution_weight": null,
            "stats": {
                "explored_percent_concrete": 72.1313909334677,
                "explored_percent_lambda": 23.532852232440117,
                "explored_percent_none": 4.335756834092177,
                "kept_percent_concrete": 71.19344063164287,
                "kept_percent_lambda": 28.80655936835712,
                "num_examples": 3,
                "num_explored_concrete": 160325,
                "num_explored_lambda": 52306,
                "num_explored_none": 9637,
                "num_inputs": 2,
                "num_kept_concrete": 11722,
                "num_kept_lambda": 4743,
                "num_values_explored": 222268,
                "num_values_kept": 16465,
                "temperature": 1.0
            },
            "success": false,
            "task": "Task(\n    name='multi:positive_differences',\n    inputs_dict={'x': [[8, 5, 7, 1, 2], [11, 4, 2, 13, 21, 16, 8, 4], [68, 23, 13, 6, 47, 72, 18, 58, 9, 25]], 'y': [[3, 1, 7, 2, 1], [2, 3, 7, 15, 5, 16, 3, 5], [24, 73, 88, 31, 19, 58, 42, 13, 7, 10]]},\n    outputs=[[5, 4, 0, 1], [9, 1, 16, 0, 5], [44, 28, 14, 45, 2, 15]],\n    solution='Filter(lambda u1: Greater(u1, -1), ZipWith(lambda u1, u2: Subtract(u1, u2), x, y))'\n)",
            "task_solution": "Filter(lambda u1: Greater(u1, -1), ZipWith(lambda u1, u2: Subtract(u1, u2), x, y))",
            "task_solution_weight": null
        }
    ],
    "success_rate": 0.49
}