"""Handwritten DeepCoder-style tasks using lambdas."""

import collections
import re

from crossbeam.dsl import task as task_module

Task = task_module.Task


HANDWRITTEN_TASKS = [
    # Tasks without higher-order functions.
    Task(
        name='none:deepcoder_0',
        inputs_dict={
            'k': [2, 2, 3, 6, 5],
            'b': [[3, 5, 4, 7, 5],
                  [12, 56, 31, 23, 49],
                  [8, 3, 4, 12, 5, 2, 4],
                  [9, 7, 5, 4, 12, 6, 2, 6],
                  [9, 0, 12, -4, 3, -7, 39, 5, 1, -3]],
        },
        outputs=[7, 35, 9, 30, -13],
        solution='Sum(Take(k, Sort(b)))',
    ),
    Task(
        name='none:next_hailstone',
        inputs_dict={
            'x': [8, 26, 5, 7, 23],
        },
        outputs=[4, 13, 16, 22, 70],
        solution='If(IsEven(x), IntDivide(x, 2), Add(1, Multiply(3, x)))',
    ),
    Task(
        name='none:top_k',
        inputs_dict={
            'x': [[4, 1, 2, 6, 3],
                  [8, 9, 3, 5, 2, 7, 8],
                  [12, 63, 21, 59, 32, 55, 68, -99, 48]],
            'k': [2, 4, 3],
        },
        outputs=[[6, 4], [9, 8, 8, 7], [68, 63, 59]],
        solution='Take(k, Reverse(Sort(x)))',
    ),
    Task(
        name='none:remove_last_n',
        inputs_dict={
            'x': [[5, 3, 2, 1, 6],
                  [4, -11, 5, -6, -5, 7, 8],
                  [13, 48, 28, 37, 85, 43, 23, 54, 42, 17]],
            'n': [2, 5, 3],
        },
        outputs=[[5, 3, 2], [4, -11], [13, 48, 28, 37, 85, 43, 23]],
        solution='Take(Subtract(0, n), x)',
    ),
    Task(
        name='none:remove_ends',
        inputs_dict={
            'x': [[4, 2, 5, 6],
                  [6, -4, 4, -7, 1, 0, -2],
                  [42, 68, 38, 22, 87, 17, 83, 29]],
        },
        outputs=[[2, 5], [-4, 4, -7, 1, 0], [68, 38, 22, 87, 17, 83]],
        solution='Take(-1, Drop(1, x))',
    ),
    Task(
        name='none:kth_largest',
        inputs_dict={
            'x': [[5, 9, 4],
                  [7, 8, 6, 2],
                  [18, 38, 24, 74, 37, 87, 64],
                  [-5, 0, -4, 4, 7, -5, 7, -5, 6],
                  [2, -10, 0, -3, -5, 7, 9, -8, 7, 4]],
            'k': [0, 2, 4, 3, 7],
        },
        outputs=[9, 6, 37, 4, -5],
        solution='Access(k, Reverse(Sort(x)))',
    ),
    Task(
        name='none:next_multiple',
        inputs_dict={
            'x': [3, 8, 13, 27, 58],
            'factor': [5, 7, 4, 9, 14],
        },
        outputs=[5, 14, 16, 36, 70],
        solution='Multiply(Add(IntDivide(x, factor), 1), factor)',
    ),
    Task(
        name='none:mean_first_and_last',
        inputs_dict={
            'x': [[59, 37, 23],
                  [58, 32, 47, 16],
                  [-44, 45, 38, -63, -12, 18],
                  [-8, -4, 18, 12, -5, -6, 2, 0, -14],
                  [35, 85, 53, 68, 47, 17, 86, 27, 75, 91],
                  ],
        },
        outputs=[41, 37, -13, -11, 63],
        solution='IntDivide(Add(Head(x), Last(x)), 2)',
    ),
    Task(
        name='none:triple_median',
        inputs_dict={
            'x': [[9, 7, 4],
                  [23, 54, 38],
                  [-6, 5, -7],
                  [5, 8, 13],
                  [-47, -18, -21]],
        },
        outputs=[7, 38, -6, 8, -21],
        solution='Subtract(Sum(x), Add(Maximum(x), Minimum(x)))',
    ),
    Task(
        name='none:list_range',
        inputs_dict={
            'x': [[16, -14, 5, 22, -7],
                  [43, 58, 13, 29, 67, 38],
                  [4, 5, 3, 4, 8, 3, 6, 5, 6],
                  [26, 24, 28, 27, 28, 29, 24, 22, 26, 25],
                  [42, -35, 48, -57, 42, 13, 58, 62, -32, -49]],
        },
        outputs=[36, 54, 5, 7, 119],
        solution='Subtract(Maximum(x), Minimum(x))',
    ),
    Task(
        name='none:slope',
        inputs_dict={
            'x': [[9, 2],
                  [-3, 1],
                  [37, 32],
                  [-17, -14],
                  [6, -3]],
            'y': [[58, 23],
                  [45, -79],
                  [-15, 50],
                  [-46, -4],
                  [5, 77]],
        },
        outputs=[5, -31, -13, 14, -8],
        solution='IntDivide(Subtract(Last(y), Head(y)), Subtract(Last(x), Head(x)))',
    ),

    # Tasks primarily using Map.
    ############################
    Task(
        name='map:cube',
        inputs_dict={
            'x': [[3], [4, 1, 2], [-1, 5, 0, -4, 2, 3, -2]],
        },
        outputs=[[27], [64, 1, 8], [-1, 125, 0, -64, 8, 27, -8]],
        solution='Map(lambda u1: Multiply(u1, Square(u1)), x)',
    ),
    Task(
        name='map:sort_square',
        inputs_dict={
            'x': [[3, 4, 5], [2, 6, -3], [3, 1, -1, 6, 0, 3, 2, 7, -5]],
        },
        outputs=[[9, 16, 25], [4, 9, 36], [0, 1, 1, 4, 9, 9, 25, 36, 49]],
        solution='Sort(Map(lambda u1: Square(u1), x))',
    ),
    Task(
        name='map:triangular_numbers',
        inputs_dict={
            'x': [[1, 2, 3, 4],
                  [0, 5, 2, 1, 6],
                  [7, 2, 5, 9, 2, 0, 4, 1, 3]],
        },
        outputs=[[1, 3, 6, 10],
                 [0, 15, 3, 1, 21],
                 [28, 3, 15, 45, 3, 0, 10, 1, 6]],
        solution='Map(lambda u1: IntDivide(Multiply(u1, Add(u1, 1)), 2), x)',
    ),
    Task(
        name='map:shift_min_to_zero',
        inputs_dict={
            'x': [[3, 4, 7, 9],
                  [16, 10, 25, 16, 83],
                  [-4, 3, 1, 0, -5, 5]],
        },
        outputs=[[0, 1, 4, 6],
                 [6, 0, 15, 6, 73],
                 [1, 8, 6, 5, 0, 10]],
        solution='Map(lambda u1: Subtract(u1, Minimum(x)), x)',
    ),
    Task(
        name='map:shift_element_to_zero',
        inputs_dict={
            'x': [[3, 4, 7, 9],
                  [16, 10, 25, 16, 83],
                  [-4, 3, 1, 0, -5, 5]],
            'i': [1, 3, 2],
        },
        outputs=[[-1, 0, 3, 5],
                 [0, -6, 9, 0, 67],
                 [-5, 2, 0, -1, -6, 4]],
        solution='Map(lambda u1: Subtract(u1, Access(i, x)), x)',
    ),
    Task(
        name='map:gather',
        inputs_dict={
            'x': [[4, 2, 6, 8],
                  [11, 3, 20, -5, 7],
                  [3, -6, 4, -5, 3, 9, -2, 0, 1, -4]],
            'i': [[0, 2, 1, 3],
                  [1, 4, 2, 1, 3, 1, 4, 1],
                  [2, 0, 2, 8, 4, 2, 3, 5]],
        },
        outputs=[[4, 6, 2, 8],
                 [3, 7, 20, 3, -5, 3, 7, 3],
                 [4, 3, 4, 1, 3, 4, -5, 9]],
        solution='Map(lambda u1: Access(u1, x), i)',
    ),
    Task(
        name='map:max_of_selected',
        inputs_dict={
            'x': [[3, 8, 4, 2, 6, 5],
                  [-8, -4, 7, 6, 3, -5, 0, -2, 2, 1],
                  [64, 83, 27, 18, 59, 17, 45, 23, 63],
                  [64, 83, 27, 18, 59, 17, 45, 23, 63],
                  [15, -32, 38, 67, -21, 41, 25, -43, -28, 33]],
            'i': [[3, 2, 0, 4],
                  [5, 4, 1],
                  [2, 3, 4, 6, 7],
                  [2, 3, 5, 6, 7],
                  [7, 2, 1, 0, 8, 5, 2, 0, 1, 2]],
        },
        outputs=[6, 3, 59, 45, 41],
        solution='Maximum(Map(lambda u1: Access(u1, x), i))',
    ),
    Task(
        name='map:find_replace',
        inputs_dict={
            'data': [[7, 2, 4, 6, 4, 2, 5],
                     [-6, -3, 4, 3, -5, -3, 2, 1, 5],
                     [18, 48, 27, 26, 27, 27, 28, 17, 27, 33]],
            'to_find': [4, -3, 27],
            'replacement': [-1, 7, 99],
        },
        outputs=[[7, 2, -1, 6, -1, 2, 5],
                 [-6, 7, 4, 3, -5, 7, 2, 1, 5],
                 [18, 48, 99, 26, 99, 99, 28, 17, 99, 33]],
        solution='Map(lambda u1: If(Equal(u1, to_find), replacement, u1), data)',
    ),
    Task(
        name='map:clip_to_bounds',
        inputs_dict={
            'data': [[5, -4, 6, 17, -3, 7],
                     [53, 71, 28, 61, 27, 93, 57, 74],
                     [16, -4, -5, 14, 13, -7, -6, 17, -3, 15]],
            'lower': [0, 52, -5],
            'upper': [9, 64, 15],
        },
        outputs=[[5, 0, 6, 9, 0, 7],
                 [53, 64, 52, 61, 52, 64, 57, 64],
                 [15, -4, -5, 14, 13, -5, -5, 15, -3, 15]],
        solution='Map(lambda u1: Max(Min(u1, upper), lower), data)',
    ),
    Task(
        name='map:add_last_and_remove',
        inputs_dict={
            'x': [[4, 2, 6, 3, 5],
                  [-7, 17, -4, -12, 3, -9],
                  [41, 23, 58, 21, 14, 63, 28, 36]],
        },
        outputs=[[9, 7, 11, 8],
                 [-16, 8, -13, -21, -6],
                 [77, 59, 94, 57, 50, 99, 64]],
        solution='Take(-1, Map(lambda u1: Add(u1, Last(x)), x))',
    ),
    Task(
        name='map:absolute_value',
        inputs_dict={
            'x': [[8, -4, 2, -3, -7, 6],
                  [-23, 31, -12, -46, 78, 0, -32, -61, 48],
                  [98, -58, 43, -42, -68, 47, -15, -21, 74, -29]],
        },
        outputs=[[8, 4, 2, 3, 7, 6],
                 [23, 31, 12, 46, 78, 0, 32, 61, 48],
                 [98, 58, 43, 42, 68, 47, 15, 21, 74, 29]],
        solution='Map(lambda u1: Max(u1, Subtract(0, u1)), x)',
    ),
    Task(
        name='map:square_keep_sign',
        inputs_dict={
            'x': [[4, -6, 8, -7],
                  [-1, -4, 6, -5, 2],
                  [7, 9, -3, 4, -2, 0, -4, -8, 5, 1]],
        },
        outputs=[[16, -36, 64, -49],
                 [-1, -16, 36, -25, 4],
                 [49, 81, -9, 16, -4, 0, -16, -64, 25, 1]],
        solution='Map(lambda u1: Multiply(If(Less(u1, 0), -1, 1), Square(u1)), x)',
    ),
    Task(
        name='map:fill_with_first',
        inputs_dict={
            'x': [[3, 6, 1, 4, 7],
                  [-26, 27, 51, -14, 31, -17, -32],
                  [73, 67, 48, 27, 97, 85, 37, 68, 21, 84]],
        },
        outputs=[[3, 3, 3, 3, 3],
                 [-26, -26, -26, -26, -26, -26, -26],
                 [73, 73, 73, 73, 73, 73, 73, 73, 73, 73]],
        solution='Map(lambda u1: Head(x), x)',
    ),
    Task(
        name='map:list_length',
        inputs_dict={
            'x': [[65, 24],
                  [9, 45, 2, 16, 4, 2, 63],
                  [8, -4, 28, 27, -32, 23, 15, 2, 0],
                  [0],
                  [-1, 3, 1, 2, 4, -2, 6, -4, -8, 3]],
        },
        outputs=[2, 7, 9, 1, 10],
        solution='Sum(Map(lambda u1: 1, x))',
    ),
    Task(
        name='map:list_median',
        inputs_dict={
            'x': [[6, 5, 2],
                  [42, 86, 31, 58, 75],
                  [18, 2, 34, 7, 0, 56, 32, 48, 54],
                  [18, 2, 34, 37, 0, 56, 32, 48, 54],
                  [85, 48, -42, -15, -25, 23, -52]],
        },
        outputs=[5, 58, 32, 34, -15],
        solution='Access(IntDivide(Sum(Map(lambda u1: 1, x)), 2), Sort(x))',
    ),
    Task(
        name='map:linear_equation',
        inputs_dict={
            'x': [[14, 23, -16],
                  [4, 2, 6, 0, 3],
                  [3, -7, 4, 1, 5, -2, 0, 1, 2, -1]],
            'a': [-3, 4, 7],
            'b': [25, -7, 10],
        },
        outputs=[[-17, -44, 73],
                 [9, 1, 17, -7, 5],
                 [31, -39, 38, 17, 45, -4, 10, 17, 24, 3]],
        solution='Map(lambda u1: Add(Multiply(a, u1), b), x)',
    ),
    Task(
        name='map:rank',
        inputs_dict={
            'x': [[28, 43, 69, 38, 42],
                  [35, -54, 48, 17, 49, -24, 32],
                  [-7, -4, 8, -5, -4, -3, -8, 4],
                  [2, 6, 0, 3, 1, 4, 2, 3, 5, 0],
                  [2, 6, 0, 5, 1, 4, 2, 3, 5, 0]],
            'query': [44, 18, -3, 4, 4],
        },
        outputs=[4, 3, 5, 7, 6],
        solution='Sum(Map(lambda u1: If(Less(u1, query), 1, 0), x))',
    ),
    Task(
        name='map:greater_mask',
        inputs_dict={
            'x': [[19, 13, 17, 18, 20],
                  [5, 7, 4, 5, 6, 2, 3],
                  [-9, -6, 2, -7, 18, -11, -8, 1, -15, -4]],
            'limit': [17, 4, -7],
        },
        outputs=[[1, 0, 0, 1, 1],
                 [1, 1, 0, 1, 1, 0, 0],
                 [0, 1, 1, 0, 1, 0, 0, 1, 0, 1]],
        solution='Map(lambda u1: If(Greater(u1, limit), 1, 0), x)',
    ),
    Task(
        name='map:replace_negative',
        inputs_dict={
            'x': [[7, -6, 8, -3, -5, 2],
                  [-6, -4, 2, -3, 14, -15, 2, -5, -8],
                  [13, 63, -23, -35, 32, 45, -78, -31, 12, -14]],
            'replacement': [-9, 5, 99],
        },
        outputs=[[7, -9, 8, -9, -9, 2],
                 [5, 5, 2, 5, 14, 5, 2, 5, 5],
                 [13, 63, 99, 99, 32, 45, 99, 99, 12, 99]],
        solution='Map(lambda u1: If(Less(u1, 0), replacement, u1), x)',
    ),
    Task(
        name='map:divide_even',
        inputs_dict={
            'x': [[8, 5, 6, 14, 9],
                  [42, -15, 67, 0, -16, 23, 31, 28],
                  [62, 24, 68, -44, -25, -14, 2, 5, -20, 41]],
        },
        outputs=[[4, 5, 3, 7, 9],
                 [21, -15, 67, 0, -8, 23, 31, 14],
                 [31, 12, 34, -22, -25, -7, 1, 5, -10, 41]],
        solution='Map(lambda u1: If(IsEven(u1), IntDivide(u1, 2), u1), x)',
    ),
    Task(
        name='map:multiply_odd_by',
        inputs_dict={
            'x': [[3, 1, 2, 5, 4, 7],
                  [15, 21, 28, 7, 33, 26, 42, 27, 18],
                  [7, -22, -1, 28, 9, -17, 5, 13, -4, 11]],
            'factor': [3, 2, -3],
        },
        outputs=[[9, 3, 2, 15, 4, 21],
                 [30, 42, 28, 14, 66, 26, 42, 54, 18],
                 [-21, -22, 3, 28, -27, 51, -15, -39, -4, -33]],
        solution='Map(lambda u1: If(IsOdd(u1), Multiply(u1, factor), u1), x)',
    ),

    # Tasks primarily using Filter.
    ###############################
    Task(
        name='filter:greater',
        inputs_dict={
            'data': [[1, 3, 4, 2],
                     [6, 4, 3, 5, 9, 2],
                     [25, 0, 79, -1, -45, 31, -4, 7, -2, 11]],
            'limit': [2, 4, -3],
        },
        outputs=[[3, 4], [6, 5, 9], [25, 0, 79, -1, 31, 7, -2, 11]],
        solution='Filter(lambda u1: Greater(u1, limit), data)',
    ),
    Task(
        name='filter:sort_even',
        inputs_dict={
            'x': [[7, 6, 2, 5, 8, 0, 5],
                  [52, 35, 68, 37, 41, 22, 64, 57, 26],
                  [16, -24, 28, -29, -12, -17, 23, 58, 21, -14]],
        },
        outputs=[[0, 2, 6, 8],
                 [22, 26, 52, 64, 68],
                 [-24, -14, -12, 16, 28, 58]],
        solution='Filter(lambda u1: IsEven(u1), Sort(x))',
    ),
    Task(
        name='filter:max_odd',
        inputs_dict={
            'x': [[32, 57, 60, 53],
                  [7, 12, 6, 18, 13, 14, 5, 6],
                  [-6, 8, 5, -7, -13, 1, -4, 18, 32],
                  [32, 25, 68, 43, 42, 44, 56, 37, 28, 29],
                  [32, 25, 68, 43, 42, 44, 55, 37, 28, 29]],
        },
        outputs=[57, 13, 5, 43, 55],
        solution='Maximum(Filter(lambda u1: IsOdd(u1), x))',
    ),
    Task(
        name='filter:odd_and_negative',
        inputs_dict={
            'x': [[-11, 7, -3, -8, 2],
                  [2, -5, 3, -4, -7, -1, -2],
                  [-17, 23, -40, -25, -31, 42, 0, -23, -7, -16]],
        },
        outputs=[[-11, -3],
                 [-5, -7, -1],
                 [-17, -25, -31, -23, -7]],
        solution='Filter(lambda u1: IsOdd(u1), Filter(lambda u1: Less(u1, 0), x))',
    ),
    Task(
        name='filter:sum_positive',
        inputs_dict={
            'x': [[-5, 8, -10, 7, 2],
                  [16, 21, -14, 21, 1, -49, 31],
                  [45, -45, -38, -41, -6, 45, -13, 20],
                  [-46, -32, -29, 33, -3, -13, 9, 23, -39],
                  [-4, 8, 23, 15, 8, -31, -7, -9, -9, 24]],
        },
        outputs=[17, 90, 110, 65, 78],
        solution='Sum(Filter(lambda u1: Greater(u1, 0), x))',
    ),
    Task(
        name='filter:negative_and_sort_reverse',
        inputs_dict={
            'x': [[-4, 8, 1, -2, -9, -5],
                  [-11, 10, -13, -19, 0, -12, -10],
                  [3, -38, -48, 32, -43, -19, 23, -36, -44, 48]],
        },
        outputs=[[-2, -4, -5, -9],
                 [-10, -11, -12, -13, -19],
                 [-19, -36, -38, -43, -44, -48]],
        solution='Filter(lambda u1: Less(u1, 0), Reverse(Sort(x)))',
    ),
    Task(
        name='filter:between',
        inputs_dict={
            'x': [[7, 6, 1, 4, 9, 3, 5, 8],
                  [11, 78, 73, 35, 70, 59, 16, 74, 24],
                  [-12, -21, 37, 20, 13, 21, 19, 0, -19, -20]],
            'lower': [3, 15, -20],
            'upper': [8, 74, 20],
        },
        outputs=[[7, 6, 4, 5],
                 [73, 35, 70, 59, 16, 24],
                 [-12, 13, 19, 0, -19]],
        solution='Filter(lambda u1: Less(u1, upper), Filter(lambda u1: Greater(u1, lower), x))',
    ),
    Task(
        name='filter:multiple',
        inputs_dict={
            'x': [[24, 19, 22, 16, 10, 44],
                  [21, -35, -25, 0, -17, -14, 15, 42],
                  [11, 84, 79, 16, -57, 97, 27, -23, -39, -32]],
            'factor': [4, 7, 3],
        },
        outputs=[[24, 16, 44],
                 [21, -35, 0, -14, 42],
                 [84, -57, 27, -39]],
        solution='Filter(lambda u1: Greater(IntDivide(u1, factor), IntDivide(Subtract(u1, 1), factor)), x)',
    ),
    Task(
        name='filter:find_target_at_indices',
        inputs_dict={
            'data': [[8, 7, 4, 7, 7, 2],
                     [17, -9, -10, -9, -9, 23, -9],
                     [42, 43, 41, 42, 45, 48, 42, 42, 49, 42]],
            'target': [7, -9, 42],
            'query_indices': [[0, 1, 2, 4, 5],
                              [0, 1, 0, 4, 6, 2, 1, 5, 4, 1],
                              [6, 2, 5, 4, 1, 3, 0, 9, 7, 8]],
        },
        outputs=[[1, 4],
                 [1, 4, 6, 1, 4, 1],
                 [6, 3, 0, 9, 7]],
        solution='Filter(lambda u1: Equal(Access(u1, data), target), query_indices)',
    ),

    # Tasks primarily using Count.
    ##############################
    Task(
        name='count:element',
        inputs_dict={
            'data': [[5, 7, 8, 7, 9, 6],
                     [5, 7, 8, 7, 9, 6],
                     [7, 0, 7, 0, 7, 7],
                     [42, 34, 42, 42, 42, 56, 42, 38, 42, 42],
                     [42, 34, 42, 42, 38, 56, 42, 38, 42, 42]],
            'query': [7, 8, 7, 42, 42],
        },
        outputs=[2, 1, 4, 7, 6],
        solution='Count(lambda u1: Equal(u1, query), data)',
    ),
    Task(
        name='count:less_than_head',
        inputs_dict={
            'x': [[5, 2, 6, 7, 1, 3, 8],
                  [26, 0, 19, 22, 39, 47, 1, 26],
                  [65, 33, 16, 53, 34, 95, 86, 4, 12],
                  [-11, 23, -48, -24, -11, -4, 44, 7, -26, -12],
                  [-11, 23, -48, -24, -11, -14, 44, 7, -26, -12]],
        },
        outputs=[3, 4, 6, 4, 5],
        solution='Count(lambda u1: Less(u1, Head(x)), x)',
    ),
    Task(
        name='count:negative',
        inputs_dict={
            'x': [[6, 7, 0, -4, 1, -5, 2],
                  [11, -4, -1, 19, -5, 18, -8, -13],
                  [25, 16, -15, 18, -3, -12, 1, 29, -21],
                  [-18, 18, 46, -7, -15, -44, -33, 8, -1, 11],
                  [32, 42, -46, -97, 53, 34, 8, -9, 36, 20]],
        },
        outputs=[2, 5, 4, 6, 3],
        solution='Count(lambda u1: Less(u1, 0), x)',
    ),
    Task(
        name='count:last',
        inputs_dict={
            'x': [[11, 10, 9, 7, 10, 19, 10],
                  [47, 23, 44, 3, 23, 40, 23, 44],
                  [47, 23, 44, 3, 23, 40, 23, 23],
                  [-2, 26, -20, -19, 23, -29, -9, 2, -23],
                  [-42, 0, -42, -42, -41, -43, -42, 42, -42, -42]],
        },
        outputs=[3, 2, 4, 1, 6],
        solution='Count(lambda u1: Equal(u1, Last(x)), x)',
    ),
    Task(
        name='count:element_at_index',
        inputs_dict={
            'x': [[14, 11, 28, 11, -17, -1, -21],
                  [24, 33, 24, 24, 23, 0, 24, 25],
                  [26, -7, -21, 20, -26, -7, -29, -7, -23],
                  [48, -21, -97, 3, 88, -21, -21, -20, -21, -21],
                  [48, -21, -97, 3, 88, -21, -21, -21, -21, -21]],
            'i': [3, 6, 1, 7, 7]
        },
        outputs=[2, 4, 3, 1, 6],
        solution='Count(lambda u1: Equal(u1, Access(i, x)), x)',
    ),
    Task(
        name='count:total_zeros',
        inputs_dict={
            'x1': [[-2, 0, 3, 1],
                   [8, 4, 0, 1, 0, 2],
                   [0, 1, 0],
                   [17, 0, -2, 0, -11, -9, -6],
                   [0, 0, 0, 42, 0, 0, 0, 63, 0, -14]],
            'x2': [[0, 0, 1, -1],
                   [0, 3, 0, 0, 5, 9],
                   [6, 0, 6, 0, 0, 0, 5],
                   [-11, 3, 0, -11, -15, 0, -15, -12],
                   [0, -54, 0, 14, 35, 0, 0]]
        },
        outputs=[3, 5, 6, 4, 11],
        solution='Add(Count(lambda u1: Equal(u1, 0), x1), Count(lambda u1: Equal(u1, 0), x2))',
    ),

    # Tasks primarily using ZipWith.
    ################################
    Task(
        name='zipwith:deepcoder_1',
        inputs_dict={
            'w': [[6, 2, 4, 7, 9],
                  [10, 30, 20],
                  [8, 6, 5, 9],
                  [7, 5, 1, 6, 2, 7],
                  [14, 7, 2, 9, 3, 13, 10, 11]],
            't': [[5, 3, 6, 1, 0],
                  [65, 7, 32],
                  [2, 5, 9, 1],
                  [0, 9, 4, 5, 7, 2],
                  [1, 4, 2, 11, 7, 5, 7, 4]],
        },
        outputs=[27, 97, 28, 24, 44],
        solution='Maximum(ZipWith(lambda u1, u2: Add(Multiply(u1, 3), u2), w, t))',
        original_solution='Maximum(ZipWith(lambda u1, u2: Add(u1, u2), Map(lambda u1: Multiply(u1, 3), w), t))',
    ),
    Task(
        name='zipwith:deepcoder_4',
        inputs_dict={
            'x': [[7, 3, 8, 2, 5],
                  [5, 6, 1],
                  [3, 5, 1, 2],
                  [7, 2, 1, 9, 3, 6],
                  [4, 2, 6, 19, 5, 13, 2, 3]],
            'y': [[2, 8, 9, 1, 3],
                  [8, 2, 3],
                  [4, 6, 1, 3],
                  [5, 1, 6, 4, 7, 5],
                  [2, 9, 3, 11, 1, 5, 16, 15]],
        },
        outputs=[79, 35, 28, 101, 219],
        solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), Sort(x), Reverse(Sort(y))))',
    ),
    Task(
        name='zipwith:deepcoder_5',
        inputs_dict={
            'a': [[3, 7, 5, 2, 8],
                  [14, 11, 15, 18, 14, 12],
                  [85, 3, 35, 1, 74, 47, 2, 26, 33, 43]],
        },
        outputs=[[3, 2, 5, 2, 3],
                 [12, 11, 15, 15, 11, 12],
                 [43, 3, 26, 1, 47, 47, 1, 26, 3, 43]],
        solution='ZipWith(lambda u1, u2: Min(u1, u2), a, Reverse(a))',
    ),
    Task(
        name='zipwith:deepcoder_6',
        inputs_dict={
            't': [[4, 8, 11, 2],
                  [46, 24, 68],
                  [8, 22, 18, 6],
                  [21, 26, 10, 11, 15],
                  [11, 18, 15, 33, 18, 23, 7]],
            'p': [[2, 3, 4, 1],
                  [35, 37, 31],
                  [26, 19, 21, 38],
                  [3, 11, 22, 10, 9],
                  [29, 23, 24, 7, 14, 12, 25]]
        },
        outputs=[1, 59, 32, 19, 30],
        solution='Minimum(ZipWith(lambda u1, u2: Subtract(Add(u1, u2), 2), t, p))',
        original_solution='Minimum(ZipWith(lambda u1, u2: Add(u1, u2), Map(lambda u1: Subtract(u1, 1), t), Map(lambda u1: Subtract(u1, 1), p)))',
    ),
    Task(
        name='zipwith:deepcoder_8',
        inputs_dict={
            's': [[1, 2, 4, 5, 7],
                  [2, 4, 11, 26],
                  [14, 36, 54, 89],
                  [1, 7, 10, 11, 13, 18, 19],
                  [4, 5, 8, 9, 10, 11, 12, 15, 17, 18]],
        },
        outputs=[9, 31, 93, 32, 37],
        solution='Sum(ZipWith(lambda u1, u2: Max(Subtract(u1, u2), 0), Reverse(s), s))',
        original_solution='Sum(Filter(lambda u1: Greater(u1, 0), ZipWith(lambda u1, u2: Subtract(u1, u2), Reverse(s), s)))',
    ),
    Task(
        name='zipwith:dot_product',
        inputs_dict={
            'x1': [[2, 0],
                   [3, 1, 2],
                   [7, 8, 1, 4],
                   [2, -4, 6, -5, -1, 3, 2],
                   [-4, 0, 4, 6, 2, -3, 1, 5, 6, 5]],
            'x2': [[10, 5],
                   [8, 2, -5],
                   [1, 0, 4, 2],
                   [3, 8, 4, 4, 2, 0, 5],
                   [2, 1, 0, 2, 0, 6, 2, 1, 3, 2]],
        },
        outputs=[20, 16, 19, -14, 21],
        solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), x1, x2))',
    ),
    Task(
        name='zipwith:elementwise_mean',
        inputs_dict={
            'x1': [[8, 0], [12, 3, 7], [-5, 4, 3, -7, 11, 0]],
            'x2': [[2, 4], [4, 1, 7], [3, 6, -3, -11, 19, -6]],
        },
        outputs=[[5, 2], [8, 2, 7], [-1, 5, 0, -9, 15, -3]],
        solution='ZipWith(lambda u1, u2: IntDivide(Add(u1, u2), 2), x1, x2)',
    ),
    Task(
        name='zipwith:three_way_sum',
        inputs_dict={
            'x1': [[6, 3], [2, 1, 5], [4, 2, 1, 5, 3]],
            'x2': [[2, 7], [6, -4, 2], [8, 4, 0, 2, 1]],
            'x3': [[0, 0], [3, 0, -3], [0, 1, 8, 0, 6]],
        },
        outputs=[[8, 10], [11, -3, 4], [12, 7, 9, 7, 10]],
        solution='ZipWith(lambda u1, u2: Add(u1, u2), x1, ZipWith(lambda u1, u2: Add(u1, u2), x2, x3))',
    ),
    Task(
        name='zipwith:sorted_divide',
        inputs_dict={
            'total': [[43, 68, 27],
                      [28, 41, 57, 52],
                      [78, 68, 25, 76, 67, 38, 49, 74, 47]],
            'factor': [[5, 7, 13],
                       [6, 2, 6, 4],
                       [10, 4, 19, 12, 19, 7, 7, 15, 3]],
        },
        outputs=[[2, 8, 9],
                 [4, 9, 13, 20],
                 [1, 3, 4, 5, 6, 7, 7, 15, 17]],
        solution='Sort(ZipWith(lambda u1, u2: IntDivide(u1, u2), total, factor))',
    ),
    Task(
        name='zipwith:consecutive_difference',
        inputs_dict={
            'x': [[16, 43, 64],
                  [34, 13, 23, 58, 46],
                  [9, 49, -27, -37, 26, -38, 9, -12, 19]]
        },
        outputs=[[27, 21],
                 [-21, 10, 35, -12],
                 [40, -76, -10, 63, -64, 47, -21, 31]],
        solution='ZipWith(lambda u1, u2: Subtract(u2, u1), x, Drop(1, x))',
    ),
    Task(
        name='zipwith:sum_with_mask',
        inputs_dict={
            'data': [[6, 11, 2, 7],
                     [4, 5, 9, 0, 7, 9],
                     [3, 13, 17, 5, 0, 14, 18],
                     [2, -12, -5, 9, -13, -2, -9, 5],
                     [-38, 34, 20, 32, 10, -10, 4, -1, -27]],
            'mask': [[1, 0, 1, 1],
                     [0, 1, 1, 0, 1, 0],
                     [0, 0, 1, 0, 0, 1, 0],
                     [0, 1, 0, 1, 1, 0, 1, 1],
                     [1, 0, 0, 1, 0, 1, 1, 0, 0]],
        },
        outputs=[15, 21, 31, -20, -12],
        solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), data, mask))',
    ),
    Task(
        name='zipwith:squared_distance',
        inputs_dict={
            'x': [[26],
                  [6, 14],
                  [8, 5, 7],
                  [-3, -2, 9, 4],
                  [-6, 2, -5, 4, -2]],
            'y': [[35],
                  [9, 8],
                  [6, 9, 8],
                  [-5, 1, 6, -2],
                  [-1, -2, 1, 4, 7]],
        },
        outputs=[81, 45, 21, 58, 158],
        solution='Sum(ZipWith(lambda u1, u2: Square(Subtract(u1, u2)), x, y))',
    ),
    Task(
        name='zipwith:equal_mask',
        inputs_dict={
            'x1': [[5, 2, 7, 3, 5],
                   [0, -2, 6, 4, 5, -4],
                   [-2, -3, 2, 9, 4, -1, 4, 7, 5]],
            'x2': [[5, 1, 7, 3, 6],
                   [0, -2, 0, -4, 5, -4],
                   [5, -2, 2, 9, 3, -1, -2, 7, 7]],
        },
        outputs=[[1, 0, 1, 1, 0],
                 [1, 1, 0, 0, 1, 1],
                 [0, 0, 1, 1, 0, 1, 0, 1, 0]],
        solution='ZipWith(lambda u1, u2: If(Equal(u1, u2), 1, 0), x1, x2)',
    ),
    Task(
        name='zipwith:sorted_min',
        inputs_dict={
            'x1': [[7, 2, 5, 6],
                   [4, -7, -6, 7, 1, -6],
                   [12, 20, 27, 19, 19, 29, 23, 7, 1]],
            'x2': [[4, 8, 1, 9],
                   [-8, 2, -6, 0, 9, -1],
                   [26, 18, 25, 0, 9, 28, 19, 22, 17]],
        },
        outputs=[[1, 4, 6, 7],
                 [-8, -6, -6, 0, 2, 7],
                 [0, 7, 12, 18, 19, 20, 23, 26, 28]],
        solution='ZipWith(lambda u1, u2: Min(u1, u2), Sort(x1), Sort(x2))',
    ),

    # Tasks primarily using Scanl1.
    ###############################
    Task(
        name='scanl1:running_max',
        inputs_dict={
            'x': [[1, 6, 3, 20],
                  [4, 2, 6, 3, 1, 7, 3, 9],
                  [-6, -5, -2, 0, -1, 3, 3, 2, 5, 4]],
        },
        outputs=[[1, 6, 6, 20],
                 [4, 4, 6, 6, 6, 7, 7, 9],
                 [-6, -5, -2, 0, 0, 3, 3, 3, 5, 5]],
        solution='Scanl1(lambda u1, u2: Max(u1, u2), x)',
    ),
    Task(
        name='scanl1:max_running_sum',
        inputs_dict={
            'x': [[5, 4, -1, 2, -5],
                  [4, 7, -2, -5, 6, -3, 4],
                  [-3, -1, 8, 2, -1, -5, 4, 1],
                  [4, -2, 3, -5, -1, 2, -4, 7, -3, 2],
                  [4, -2, 3, -5, -1, 2, -4, 17, -3, 2]],
        },
        outputs=[10, 11, 6, 5, 14],
        solution='Maximum(Scanl1(lambda u1, u2: Add(u1, u2), x))',
    ),
    Task(
        name='scanl1:running_sum_reverse',
        inputs_dict={
            'x': [[7, 4, 5],
                  [3, 1, 6, 8, 2],
                  [-4, 13, 9, 0, -3, -8, 5, 2]],
        },
        outputs=[[5, 9, 16],
                 [2, 10, 16, 17, 20],
                 [2, 7, -1, -4, -4, 5, 18, 14]],
        solution='Scanl1(lambda u1, u2: Add(u1, u2), Reverse(x))',
    ),
    Task(
        name='scanl1:running_sum_with_restarts',
        inputs_dict={
            'x': [[3, 5, 0, 4, 2],
                  [6, 0, 4, 7, 3, 0, 1, 0, 4, 5],
                  [-6, 3, 8, -4, 0, -3, -1, 0, 8, -5]],
        },
        outputs=[[3, 8, 0, 4, 6],
                 [6, 0, 4, 11, 14, 0, 1, 0, 4, 9],
                 [-6, -3, 5, 1, 0, -3, -4, 0, 8, 3]],
        solution='Scanl1(lambda u1, u2: If(Equal(u2, 0), 0, Add(u1, u2)), x)',
    ),
    Task(
        name='scanl1:running_product_first_n',
        inputs_dict={
            'x': [[2, 1, 5, 2, 3, 1, 2],
                  [1, 3, 2, 1, 4, 1, 5],
                  [5, -1, -2, 1, -3, 2, -1, -3, -1, 2]],
            'n': [4, 5, 8],
        },
        outputs=[[2, 2, 10, 20],
                 [1, 3, 6, 6, 24],
                 [5, -5, 10, 10, -30, -60, 60, -180]],
        solution='Scanl1(lambda u1, u2: Multiply(u1, u2), Take(n, x))',
    ),
    Task(
        name='scanl1:product',
        inputs_dict={
            'x': [[3, 6, 5],
                  [2, 1, 4, 2, 3],
                  [3, 4, 1, 5, 2],
                  [5, -2, 1, -1, -3, 1, 2],
                  [-2, 1, 2, 2, -3, -1, 3, -1]],
        },
        outputs=[90, 48, 120, -60, 72],
        solution='Last(Scanl1(lambda u1, u2: Multiply(u1, u2), x))',
    ),
    Task(
        name='scanl1:running_min_excluding_ends',
        inputs_dict={
            'x': [[4, 7, 5, 6, 3, 8, 2],
                  [8, 6, 7, 5, 4, 5, 2, 5],
                  [32, 57, 45, 68, 43, -28, -12, -30, -43, -5]],
        },
        outputs=[[7, 5, 5, 3, 3],
                 [6, 6, 5, 4, 4, 2],
                 [57, 45, 45, 43, -28, -28, -30, -43]],
        solution='Scanl1(lambda u1, u2: Min(u1, u2), Take(-1, Drop(1, x)))',
    ),
    Task(
        name='scanl1:alternate_signs',
        inputs_dict={
            'x': [[3, 1, 5, 7, 3, 4],
                  [-5, 3, 6, -3, -2, 9, 4, -8, 5, -3],
                  [50, 28, -68, 56, 43, 21, -12, 48, 87, 57]],
        },
        outputs=[[3, -1, 5, -7, 3, -4],
                 [-5, 3, -6, 3, -2, 9, -4, 8, -5, 3],
                 [50, -28, 68, -56, 43, -21, 12, -48, 87, -57]],
        solution='Scanl1(lambda u1, u2: If(Greater(Multiply(u1, u2), 0), Subtract(0, u2), u2), x)',
    ),
    Task(
        name='scanl1:follow_permutation_cycle',
        inputs_dict={
            'x': [[4, 0, 2, 3, 1],
                  [3, 5, 0, 1, 6, 4, 2],
                  [8, 4, 7, 5, 6, 0, 9, 1, 3, 2]],
        },
        outputs=[[4, 1, 0, 4, 1],
                 [3, 1, 5, 4, 6, 2, 0],
                 [8, 3, 5, 0, 8, 3, 5, 0, 8, 3]],
        solution='Scanl1(lambda u1, u2: Access(u1, x), x)',
    ),
    Task(
        name='scanl1:make_strictly_increasing',
        inputs_dict={
            'x': [[2, 4, 3, 7, 8, 8],
                  [-5, -8, -5, 1, -4, 5, 5, 7],
                  [-40, -23, -59, -9, 0, 4, 2, -4, 18, 14]],
        },
        outputs=[[2, 4, 5, 7, 8, 9],
                 [-5, -4, -3, 1, 2, 5, 6, 7],
                 [-40, -23, -22, -9, 0, 4, 5, 6, 18, 19]],
        solution='Scanl1(lambda u1, u2: Max(Add(u1, 1), u2), x)',
    ),
    Task(
        name='scanl1:closest_to_zero',
        inputs_dict={
            'x': [[7, -5, 6, 4, -7, -2, -1],
                  [-6, 5, 8, -4, -6, 5, 3, 0, -6],
                  [57, 54, -37, 46, -33, -65, 21, -20, -14, 15]],
        },
        outputs=[[7, -5, -5, 4, 4, -2, -1],
                 [-6, 5, 5, -4, -4, -4, 3, 0, 0],
                 [57, 54, -37, -37, -33, -33, 21, -20, -14, -14]],
        solution='Scanl1(lambda u1, u2: If(Less(Square(u1), Square(u2)), u1, u2), x)',
    ),

    # Tasks using a combination of higher-order functions.
    ######################################################
    Task(
        name='multi:deepcoder_2',
        inputs_dict={
            'a': [[6, 2, 4, 7, 9],
                  [7, 2, 4, 5, 7, 8, 4, 3],
                  [7, 2, 4, 5, 7, 8, 4, 3],
                  [11, 31, 52, 68, 37, 53, 69, 42, 53, 27],
                  [11, 31, 52, 68, 37, 53, 69, 42, 53, 27]],
            'b': [[5, 3, 2, 1, 0],
                  [8, 1, 4, 5, 3, 5, 1, 2],
                  [8, 1, 4, 4, 3, 5, 1, 2],
                  [10, 28, 47, 78, 37, 38, 62, 17, 44, 23],
                  [38, 62, 17, 44, 23, 10, 28, 47, 78, 37]],
        },
        outputs=[4, 5, 6, 8, 5],
        solution='Count(lambda u1: Greater(u1, 0), ZipWith(lambda u1, u2: Subtract(u1, u2), a, b))',
    ),
    Task(
        name='multi:deepcoder_3',
        inputs_dict={
            'h': [[8, 5, 7, 2, 5],
                  [8, 5, 7, 1, 5],
                  [6, 4, 8, 2, 7, 3],
                  [6, 7, 8, 6, 7, 5, 2, 5, 7, 4],
                  [10, 8, 9, 9, 6, 8, 10, 5, 2, 7]],
        },
        outputs=[5, 6, 10, 14, 13],
        solution='Sum(ZipWith(lambda u1, u2: Subtract(u1, u2), h, Scanl1(lambda u1, u2: Min(u1, u2), h)))',
        original_solution='Sum(Filter(lambda u1: Greater(u1, 0), ZipWith(lambda u1, u2: Subtract(u1, u2), h, Scanl1(lambda u1, u2: Min(u1, u2), h))))',
    ),
    Task(
        name='multi:deepcoder_7',
        inputs_dict={
            's': [[4, 7, 2, 3],
                  [5, 2, 1, 4],
                  [3, 5, 6, 1, 4],
                  [8, 4, 3, 2, 2, 4, 3],
                  [6, 3, 5, 5, 1, 3, 4, 1, 2]],
            'p': [[2, 1, 3, 1],
                  [1, 3, 2, 4],
                  [1, 1, 3, 2, 5],
                  [2, 1, 1, 3, 1, 2, 3],
                  [1, 2, 1, 1, 3, 1, 1, 2, 1]],
        },
        outputs=[62, 59, 98, 149, 173],
        solution='Sum(ZipWith(lambda u1, u2: Multiply(u1, u2), s, Scanl1(lambda u1, u2: Add(u1, u2), p)))',
    ),
    Task(
        name='multi:range_like',
        inputs_dict={
            'x': [[3, 6, 2],
                  [-6, -3, 6, 1, 0, 2, -1],
                  [0, 0, 0, 0, 0, 0, 0, 0, 0]],
        },
        outputs=[[0, 1, 2],
                 [0, 1, 2, 3, 4, 5, 6],
                 [0, 1, 2, 3, 4, 5, 6, 7, 8]],
        solution='Scanl1(lambda u1, u2: Add(u1, 1), Map(lambda u1: 0, x))',
    ),
    Task(
        name='multi:find_odd_products',
        inputs_dict={
            'x': [[4, 5, 7, 3, 8],
                  [6, -1, 9, 4, -3, 11, 7, -7, 8],
                  [11, 5, 2, 7, 13, 3, 5, 6, 5, 7]],
        },
        outputs=[[35, 21],
                 [-9, -33, 77, -49],
                 [55, 91, 39, 15, 35]],
        solution='Filter(lambda u1: IsOdd(u1), ZipWith(lambda u1, u2: Multiply(u2, u1), x, Drop(1, x)))',
    ),
    Task(
        name='multi:num_even_or_positive',
        inputs_dict={
            'x': [[6, -5, -1, -6, 0, -3, -4],
                  [6, -5, -2, -6, 0, -3, -4],
                  [6, -5, -2, -6, 0, 3, -4],
                  [-9, -3, -7, -8, -11, -53, -32, -5, 23, -11],
                  [-4, -7, -6, 3, 0, -9, -12, 4, 5, -3]],
        },
        outputs=[4, 5, 6, 3, 7],
        solution='Count(lambda u1: IsEven(u1), Map(lambda u1: Min(u1, 0), x))',
    ),
    Task(
        name='multi:running_product_odd',
        inputs_dict={
            'x': [[3, 5, 8, 2, 1],
                  [5, 2, 1, 3, 3, 1, 4],
                  [3, -4, -1, 8, 2, 0, -3, 0, 9, -1]],
        },
        outputs=[[3, 15, 15],
                 [5, 5, 15, 45, 45],
                 [3, -3, 9, 81, -81]],
        solution='Scanl1(lambda u1, u2: Multiply(u1, u2), Filter(lambda u1: IsOdd(u1), x))',
    ),
    Task(
        name='multi:running_sum_of_sum',
        inputs_dict={
            'x': [[8, 4, 2, 7],
                  [9, -3, 7, 0, 2, -2, 5, -1, 5],
                  [23, -54, 39, 28, -36, -12, 21, 42, -84, 35]],
            'y': [[2, 5, 3, 1],
                  [8, 0, 4, -3, 7, 0, -4, -6, 1],
                  [-52, 32, 18, -43, -32, 73, -28, 32, 56, -24]],
        },
        outputs=[[10, 19, 24, 32],
                 [17, 14, 25, 22, 31, 29, 30, 23, 29],
                 [-29, -51, 6, -9, -77, -16, -23, 51, 23, 34]],
        solution='Scanl1(lambda u1, u2: Add(u1, u2), ZipWith(lambda u1, u2: Add(u1, u2), x, y))',
    ),
]


def print_stats():
  """Prints some stats about the tasks."""
  op_counts = collections.Counter()
  num_ops = collections.Counter()
  for task in HANDWRITTEN_TASKS:
    ops_used = re.findall(r'\b([A-Z]\w+)\(', task.solution)
    op_counts.update(ops_used)
    num_ops[len(ops_used)] += 1
  print(f'There are {len(HANDWRITTEN_TASKS)} handwritten tasks.')
  print(f'Operation usage counts: {op_counts}')
  print(f'Solution sizes (num ops used): {dict(sorted(num_ops.items()))}')


if __name__ == '__main__':
  print_stats()
